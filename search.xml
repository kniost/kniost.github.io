<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>绘制我的设计说明</title>
    <url>/%E5%8A%A8%E7%89%A9%E6%A3%AE%E5%8F%8B%E4%BC%9A%E5%9C%88%E5%9C%88/%E7%BB%98%E5%88%B6%E6%88%91%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E-20200327.html</url>
    <content><![CDATA[<h1 id="绘制我的设计"><a href="#绘制我的设计" class="headerlink" title="绘制我的设计"></a>绘制我的设计</h1><p>在绘制我的设计中，你可以在白板上创作属于你自己的动森设计：</p>
<ul>
<li>白板创作，可以生成二维码，并使用Nintendo Switch Online的APP扫码直接传到游戏中</li>
<li>可以扫描已有的二维码，获取别人的设计</li>
<li>可以在别人的设计上直接进行修改</li>
<li><strong>可以使用图片直接生成图案</strong></li>
<li>可以自由选择颜色</li>
</ul>
<h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ul>
<li><p>由于动森的数据设计问题，一幅图中只能最多存在15种色板，且颜色种类只有100多种。<strong>选择颜色时需要先选择调色板，并且在下方选择你需要的颜色</strong>；</p>
</li>
<li><p>调色板如下图所示，蓝色区域为你的调色板颜色，绿色区域为你的可选颜色区域。<br><img src="http://pic.kniost.top/uPic/IMG_D8ACD9FD23D1-1.jpeg-blog" alt="调色板示意图"></p>
</li>
<li><p><strong>如果修改了图中已有的颜色，将会导致使用该色板的像素全部被替换成新颜色</strong>。在扫码或者使用照片生成后，调色板将全部变化，可以优先使用后面的色板。</p>
</li>
<li><p>使用图片时，尽量选择对比度大，颜色较少的图案。现实的照片转换成32*32的像素画后效果不好（不过远看的话能有个形状）。</p>
</li>
</ul>
<p>下面是一个较好的示例：<br><img src="http://pic.kniost.top/uPic/IMG_6028.JPEG-blog" alt="一个较好的图片示例"></p>
]]></content>
      <categories>
        <category>动物森友会</category>
      </categories>
      <tags>
        <tag>动物森友会</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>动物森友会圈圈介绍</title>
    <url>/%E5%8A%A8%E7%89%A9%E6%A3%AE%E5%8F%8B%E4%BC%9A%E5%9C%88%E5%9C%88/%E5%8A%A8%E7%89%A9%E6%A3%AE%E5%8F%8B%E4%BC%9A%E5%9C%88%E5%9C%88%E4%BB%8B%E7%BB%8D-20200326.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>动物森友会圈圈（以下简称动森圈圈）是集<del>攻略</del>，<del>新闻</del>，<del>交友</del>和绘图于一身的小程序！<br><img src="http://pic.kniost.top/uPic/rYIPO3.jpg-blog" alt="小程序码"></p>
<p>添加微信 <code>loshenfish</code>， 拉你进测试和攻略群哦！</p>
<h1 id="已有功能介绍"><a href="#已有功能介绍" class="headerlink" title="已有功能介绍"></a>已有功能介绍</h1><h2 id="※绘制我的设计"><a href="#※绘制我的设计" class="headerlink" title="※绘制我的设计"></a>※绘制我的设计</h2><p>在绘制我的设计中，你可以在白板上创作属于你自己的动森设计：</p>
<ul>
<li>白板创作，可以生成二维码，并使用Nintendo Switch Online的APP扫码直接传到游戏中</li>
<li>可以扫描已有的二维码，获取别人的设计</li>
<li>可以在别人的设计上直接进行修改</li>
<li><strong>可以使用图片直接生成图案</strong></li>
<li>可以自由选择颜色</li>
</ul>
<h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ul>
<li><p>由于动森的数据设计问题，一幅图中只能最多存在15种色板，且颜色种类只有100多种。<strong>选择颜色时需要先选择调色板，并且在下方选择你需要的颜色</strong>；</p>
</li>
<li><p>调色板如下图所示，蓝色区域为你的调色板颜色，绿色区域为你的可选颜色区域。<br><img src="http://pic.kniost.top/uPic/IMG_D8ACD9FD23D1-1.jpeg-blog" alt="调色板示意图"></p>
</li>
<li><p><strong>如果修改了图中已有的颜色，将会导致使用该色板的像素全部被替换成新颜色</strong>。在扫码或者使用照片生成后，调色板将全部变化，可以优先使用后面的色板。</p>
</li>
<li><p>使用图片时，尽量选择对比度大，颜色较少的图案。现实的照片转换成32*32的像素画后效果不好（不过远看的话能有个形状）。</p>
</li>
</ul>
<p>下面是一个较好的示例：<br><img src="http://pic.kniost.top/uPic/IMG_6028.JPEG-blog" alt="一个较好的图片示例"></p>
<h1 id="计划功能"><a href="#计划功能" class="headerlink" title="计划功能"></a>计划功能</h1><ol>
<li><del>加入颜色选择</del></li>
<li><del>加入照片处理成为图案</del></li>
<li><del>分享功能</del></li>
<li>加入切图功能</li>
<li>加入信息编辑</li>
<li>扫别人的图案，保存在自己的设计中，并且可以同步</li>
<li>专业设计：加入多种图案设计（如裙子、长袖等）</li>
</ol>
<h1 id="初心与历程"><a href="#初心与历程" class="headerlink" title="初心与历程"></a>初心与历程</h1><p>动森圈圈是在开始玩（肝）Switch的《集合啦！动物森友会》的时候，突然发现大家有很多不懂的东西，所以想做一个攻略形式的小程序，结果动森没肝肝了小程序……</p>
<p>攻略形式的小程序需要数据源，而现在这款新游戏很多只有英文的数据或者老数据，所以存在大量的数据收集工作。也因此动森圈圈一开始转移了方向，想更好地服务大家，就需要有更特色的功能，这个《绘制我的设计》功能立意就在于此。</p>
<p>前端不咋好，写canvas写多了感觉头都秃了。</p>
<p>当然攻略这一块也是之后要做的，想来贡献力量或者测试的可以加群共商大事！</p>
]]></content>
      <categories>
        <category>动物森友会</category>
      </categories>
      <tags>
        <tag>动物森友会</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 157. Read N Characters Given Read4</title>
    <url>/LeetCode/LeetCode%20157.%20Read%20N%20Characters%20Given%20Read4-20190711.html</url>
    <content><![CDATA[<h2 id="157-Read-N-Characters-Given-Read4"><a href="#157-Read-N-Characters-Given-Read4" class="headerlink" title="157. Read N Characters Given Read4"></a><a href="https://leetcode.com/problems/read-n-characters-given-read4/" target="_blank" rel="noopener">157. Read N Characters Given Read4</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a file and assume that you can only read the file using a given method <code>read4</code>, implement a method to read <em>n</em> characters.</p>
<p><strong>Method read4:</strong></p>
<p>The API <code>read4</code> reads 4 consecutive characters from the file, then writes those characters into the buffer array <code>buf</code>.</p>
<p>The return value is the number of actual characters read.</p>
<p>Note that <code>read4()</code> has its own file pointer, much like <code>FILE *fp</code> in C.</p>
<p><strong>Definition of read4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Parameter:  char[] buf</span><br><span class="line">    Returns:    int</span><br><span class="line"></span><br><span class="line">Note: buf[] is destination not source, the results from read4 will be copied to buf[]</span><br></pre></td></tr></table></figure>

<p>Below is a high level example of how <code>read4</code> works:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file(&quot;abcdefghijk&quot;); &#x2F;&#x2F; File is &quot;abcdefghijk&quot;, initially file pointer (fp) points to &#39;a&#39;</span><br><span class="line">char[] buf &#x3D; new char[4]; &#x2F;&#x2F; Create buffer with enough space to store characters</span><br><span class="line">read4(buf); &#x2F;&#x2F; read4 returns 4\. Now buf &#x3D; &quot;abcd&quot;, fp points to &#39;e&#39;</span><br><span class="line">read4(buf); &#x2F;&#x2F; read4 returns 4\. Now buf &#x3D; &quot;efgh&quot;, fp points to &#39;i&#39;</span><br><span class="line">read4(buf); &#x2F;&#x2F; read4 returns 3\. Now buf &#x3D; &quot;ijk&quot;, fp points to end of file</span><br></pre></td></tr></table></figure>

<p><strong>Method read:</strong></p>
<p>By using the <code>read4</code> method, implement the method <code>read</code> that reads <em>n</em> characters from the file and store it in the buffer array <code>buf</code>. Consider that you <strong>cannot</strong> manipulate the file directly.</p>
<p>The return value is the number of actual characters read.</p>
<p><strong>Definition of read:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Parameters:	char[] buf, int n</span><br><span class="line">    Returns:	int</span><br><span class="line"></span><br><span class="line">Note: buf[] is destination not source, you will need to write the results to buf[]</span><br></pre></td></tr></table></figure>

<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: file &#x3D; &quot;abc&quot;, n &#x3D; 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3\. Note that &quot;abc&quot; is the file&#39;s content, not buf. buf is the destination buffer that you will have to write the results to.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: file &#x3D; &quot;abcde&quot;, n &#x3D; 5</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: After calling your read method, buf should contain &quot;abcde&quot;. We read a total of 5 characters from the file, so return 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: file &#x3D; &quot;abcdABCD1234&quot;, n &#x3D; 12</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: After calling your read method, buf should contain &quot;abcdABCD1234&quot;. We read a total of 12 characters from the file, so return 12.</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: file &#x3D; &quot;leetcode&quot;, n &#x3D; 5</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: After calling your read method, buf should contain &quot;leetc&quot;. We read a total of 5 characters from the file, so return 5.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ol>
<li>Consider that you <strong>cannot</strong> manipulate the file directly, the file is only accesible for <code>read4</code> but <strong>not</strong> for <code>read</code>.</li>
<li>The <code>read</code> function will only be called once for each test case.</li>
<li>You may assume the destination buffer array, <code>buf</code>, is guaranteed to have enough space for storing <em>n</em> characters.</li>
</ol>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The read4 API is defined in the parent class Reader4.</span></span><br><span class="line"><span class="comment"> *     int read4(char[] buf);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">Reader4</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf Destination buffer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n   Number of characters to read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    The number of actual characters read</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] buf, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> eof = <span class="keyword">false</span>;      <span class="comment">// end of file flag</span></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;            <span class="comment">// total bytes have read</span></span><br><span class="line">        <span class="keyword">char</span>[] tmp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>]; <span class="comment">// temp buffer</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!eof &amp;&amp; total &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = read4(tmp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// check if it's the end of the file</span></span><br><span class="line">            eof = count &lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get the actual count</span></span><br><span class="line">            count = Math.min(count, n - total);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// copy from temp buffer to buf</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) </span><br><span class="line">                buf[total++] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 156. Binary Tree Upside Down</title>
    <url>/LeetCode/LeetCode%20156.%20Binary%20Tree%20Upside%20Down%20copy%202-20190711.html</url>
    <content><![CDATA[<h2 id="156-Binary-Tree-Upside-Down"><a href="#156-Binary-Tree-Upside-Down" class="headerlink" title="156. Binary Tree Upside Down"></a><a href="https://leetcode.com/problems/binary-tree-upside-down/" target="_blank" rel="noopener">156. Binary Tree Upside Down</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \</span><br><span class="line">4   5</span><br><span class="line"></span><br><span class="line">Output: return the root of the binary tree [4,5,2,#,#,3,1]</span><br><span class="line"></span><br><span class="line">   4</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 5   2</span><br><span class="line">    &#x2F; \</span><br><span class="line">   3   1</span><br></pre></td></tr></table></figure>

<p><strong>Clarification:</strong></p>
<p>Confused what <code>[4,5,2,#,#,3,1]</code> means? Read more below on how binary tree is serialized on OJ.</p>
<p>The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.</p>
<p>Here’s an example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   3</span><br><span class="line">   &#x2F;</span><br><span class="line">  4</span><br><span class="line">   \</span><br><span class="line">    5</span><br></pre></td></tr></table></figure>

<p>The above binary tree is serialized as <code>[1,2,3,#,#,4,#,#,5]</code>.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">upsideDownBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> helper(root.left, root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(TreeNode left, TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode leftRoot;</span><br><span class="line">        <span class="keyword">if</span> (left.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            leftRoot = helper(left.left, left);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            leftRoot = left;</span><br><span class="line">        &#125;</span><br><span class="line">        left.right = root;</span><br><span class="line">        left.left = root.right;</span><br><span class="line">        root.left = <span class="keyword">null</span>;</span><br><span class="line">        root.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> leftRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 155. Min Stack</title>
    <url>/LeetCode/LeetCode%20155.%20Min%20Stack%20copy%202-20190709.html</url>
    <content><![CDATA[<h2 id="155-Min-Stack"><a href="#155-Min-Stack" class="headerlink" title="155. Min Stack"></a><a href="https://leetcode.com/problems/min-stack/description/" target="_blank" rel="noopener">155. Min Stack</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
<p><strong>Example:</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; Returns -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; Returns 0.</span><br><span class="line">minStack.getMin();   --&gt; Returns -2.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    Deque&lt;Integer&gt; s1, s2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s1 = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        s2 = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.push(x);</span><br><span class="line">        <span class="keyword">if</span> (s2.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            s2.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s2.peek() &gt; x) &#123;</span><br><span class="line">                s2.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s2.push(s2.peek());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s1.pop();</span><br><span class="line">        s2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s2.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 154. Find Minimum in Rotated Sorted Array II</title>
    <url>/LeetCode/LeetCode%20154.%20Find%20Minimum%20in%20Rotated%20Sorted%20Array%20II-20190709.html</url>
    <content><![CDATA[<h2 id="154-Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#154-Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="154. Find Minimum in Rotated Sorted Array II"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/description/" target="_blank" rel="noopener">154. Find Minimum in Rotated Sorted Array II</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p>
<p>Find the minimum element.</p>
<p>The array may contain duplicates.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,2,0,1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>This is a follow up problem to .</li>
<li>Would allow duplicates affect the run-time complexity? How and why?</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; min) &#123;</span><br><span class="line">                min = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 153. Find Minimum in Rotated Sorted Array</title>
    <url>/LeetCode/LeetCode%20153.%20Find%20Minimum%20in%20Rotated%20Sorted%20Array-20190709.html</url>
    <content><![CDATA[<h2 id="153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="153. Find Minimum in Rotated Sorted Array"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/" target="_blank" rel="noopener">153. Find Minimum in Rotated Sorted Array</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,4,5,1,2] </span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,5,6,7,0,1,2]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last = end;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= nums[last]) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(nums[end], nums[start]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 152. Maximum Product Subarray</title>
    <url>/LeetCode/LeetCode%20152.%20Maximum%20Product%20Subarray-20190709.html</url>
    <content><![CDATA[<h2 id="152-Maximum-Product-Subarray"><a href="#152-Maximum-Product-Subarray" class="headerlink" title="152. Maximum Product Subarray"></a><a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">152. Maximum Product Subarray</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an integer array <code>nums</code>, find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,3,-2,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [2,3] has the largest product 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-2,0,-1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">    <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">    f[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    g[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> res = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        f[i] = Math.max(Math.max(f[i - <span class="number">1</span>] * A[i], g[i - <span class="number">1</span>] * A[i]), A[i]);</span><br><span class="line">        g[i] = Math.min(Math.min(f[i - <span class="number">1</span>] * A[i], g[i - <span class="number">1</span>] * A[i]), A[i]);</span><br><span class="line">        res = Math.max(res, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 151. Reverse Words in a String</title>
    <url>/LeetCode/LeetCode%20151.%20Reverse%20Words%20in%20a%20String-20190707.html</url>
    <content><![CDATA[<h2 id="151-Reverse-Words-in-a-String"><a href="#151-Reverse-Words-in-a-String" class="headerlink" title="151. Reverse Words in a String"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string/" target="_blank" rel="noopener">151. Reverse Words in a String</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an input string, reverse the string word by word.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;the sky is blue&quot;</span><br><span class="line">Output: &quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;  hello world!  &quot;</span><br><span class="line">Output: &quot;world! hello&quot;</span><br><span class="line">Explanation: Your reversed string should not contain leading or trailing spaces.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;a good   example&quot;</span><br><span class="line">Output: &quot;example good a&quot;</span><br><span class="line">Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>A word is defined as a sequence of non-space characters.</li>
<li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>
<li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>
</ul>
<p><strong>Follow up:</strong></p>
<p>For C programmers, try to solve it <em>in-place</em> in <em>O</em>(1) extra space.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; s.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            start = i;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; s.charAt(i) != <span class="string">' '</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start &lt; s.length()) &#123;</span><br><span class="line">                list.addFirst(s.substring(start, i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">" "</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 150. Evaluate Reverse Polish Notation</title>
    <url>/LeetCode/LeetCode%20150.%20Evaluate%20Reverse%20Polish%20Notation-20190707.html</url>
    <content><![CDATA[<h2 id="150-Evaluate-Reverse-Polish-Notation"><a href="#150-Evaluate-Reverse-Polish-Notation" class="headerlink" title="150. Evaluate Reverse Polish Notation"></a><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">150. Evaluate Reverse Polish Notation</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Evaluate the value of an arithmetic expression in .</p>
<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Division between two integers should truncate toward zero.</li>
<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won’t be any divide by zero operation.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: ((2 + 1) * 3) &#x3D; 9</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;&#x2F;&quot;, &quot;+&quot;]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: (4 + (13 &#x2F; 5)) &#x3D; 6</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;&#x2F;&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]</span><br><span class="line">Output: 22</span><br><span class="line">Explanation: </span><br><span class="line">  ((10 * (6 &#x2F; ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">&#x3D; ((10 * (6 &#x2F; (12 * -11))) + 17) + 5</span><br><span class="line">&#x3D; ((10 * (6 &#x2F; -132)) + 17) + 5</span><br><span class="line">&#x3D; ((10 * 0) + 17) + 5</span><br><span class="line">&#x3D; (0 + 17) + 5</span><br><span class="line">&#x3D; 17 + 5</span><br><span class="line">&#x3D; 22</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tokens == <span class="keyword">null</span> || tokens.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Object&gt; s = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tokens.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            pushStack(s, tokens[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Integer)s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushStack</span><span class="params">(Deque&lt;Object&gt; s, String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token.equals(<span class="string">"+"</span>) || token.equals(<span class="string">"-"</span>) || token.equals(<span class="string">"*"</span>) || token.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">            s.push(token);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Integer val = Integer.parseInt(token);</span><br><span class="line">        <span class="keyword">if</span> (s.peek() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            s.push(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.isEmpty() &amp;&amp; s.peek() <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            Integer n = (Integer) s.pop();</span><br><span class="line">            String operator = (String) s.pop();</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    res = val + n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    res = val - n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                    res = val * n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                    res = val / n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = res;</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 149. Max Points on a Line</title>
    <url>/LeetCode/LeetCode%20149.%20Max%20Points%20on%20a%20Line-20190707.html</url>
    <content><![CDATA[<h2 id="149-Max-Points-on-a-Line"><a href="#149-Max-Points-on-a-Line" class="headerlink" title="149. Max Points on a Line"></a><a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="noopener">149. Max Points on a Line</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given <em>n</em> points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,1],[2,2],[3,3]]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">^</span><br><span class="line">|</span><br><span class="line">|        o</span><br><span class="line">|     o</span><br><span class="line">|  o  </span><br><span class="line">+-------------&gt;</span><br><span class="line">0  1  2  3  4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">^</span><br><span class="line">|</span><br><span class="line">|  o</span><br><span class="line">|     o        o</span><br><span class="line">|        o</span><br><span class="line">|  o        o</span><br><span class="line">+-------------------&gt;</span><br><span class="line">0  1  2  3  4  5  6</span><br></pre></td></tr></table></figure>

<p><strong>NOTE:</strong> input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 148. Sort List</title>
    <url>/LeetCode/LeetCode%20148.%20Sort%20List-20190707.html</url>
    <content><![CDATA[<h2 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a><a href="https://leetcode.com/problems/sort-list/" target="_blank" rel="noopener">148. Sort List</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sort(head);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">sort</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        head = sort(head);</span><br><span class="line">        fast = sort(fast);</span><br><span class="line">        <span class="keyword">return</span> merge(head, fast);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        ListNode head;</span><br><span class="line">        <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">            head = head1;</span><br><span class="line">            head1 = head1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = head2;</span><br><span class="line">            head2 = head2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="keyword">null</span> || head2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = head2;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = head1;</span><br><span class="line">                head1 = head1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">                cur.next = head1;</span><br><span class="line">                head1 = head1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = head2;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            cur.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 147. Insertion Sort List</title>
    <url>/LeetCode/LeetCode%20147.%20Insertion%20Sort%20List-20190707.html</url>
    <content><![CDATA[<h2 id="147-Insertion-Sort-List"><a href="#147-Insertion-Sort-List" class="headerlink" title="147. Insertion Sort List"></a><a href="https://leetcode.com/problems/insertion-sort-list/" target="_blank" rel="noopener">147. Insertion Sort List</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Sort a linked list using insertion sort.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif" alt=""><br><small style="display: inline;">A graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.<br>With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list</small>  </p>
<p><strong>Algorithm of Insertion Sort:</strong></p>
<ol>
<li>Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.</li>
<li>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.</li>
<li>It repeats until no input elements remain.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(Integer.MIN_VALUE);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode n = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            n.next = <span class="keyword">null</span>;</span><br><span class="line">            ListNode cur = dummy;</span><br><span class="line">            <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (n.val &lt; cur.next.val) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            insertNext(cur, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNext</span><span class="params">(ListNode cur, ListNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur.next = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.next = cur.next;</span><br><span class="line">            cur.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 146. LRU Cache</title>
    <url>/LeetCode/LeetCode%20146.%20LRU%20Cache-20190707.html</url>
    <content><![CDATA[<h2 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">146. LRU Cache</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Design and implement a data structure for . It should support the following operations: <code>get</code> and <code>put</code>.</p>
<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p>The cache is initialized with a <strong>positive</strong> capacity.</p>
<p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LRUCache cache = <span class="keyword">new</span> LRUCache( <span class="number">2</span> <span class="comment">/* capacity */</span> );</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// returns 1</span></span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// evicts key 2</span></span><br><span class="line">cache.get(<span class="number">2</span>);       <span class="comment">// returns -1 (not found)</span></span><br><span class="line">cache.put(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// evicts key 1</span></span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// returns -1 (not found)</span></span><br><span class="line">cache.get(<span class="number">3</span>);       <span class="comment">// returns 3</span></span><br><span class="line">cache.get(<span class="number">4</span>);       <span class="comment">// returns 4</span></span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        Node next;</span><br><span class="line">        Node prev;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNext</span><span class="params">(Node n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                next = n;</span><br><span class="line">                n.prev = <span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n.next = next;</span><br><span class="line">                next.prev = n;</span><br><span class="line">                next = n;</span><br><span class="line">                n.prev = <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                next.prev = <span class="keyword">null</span>;</span><br><span class="line">                next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node nn = next.next;</span><br><span class="line">            next.prev = <span class="keyword">null</span>;</span><br><span class="line">            next.next = <span class="keyword">null</span>;</span><br><span class="line">            next = nn;</span><br><span class="line">            nn.prev = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Node dummy;</span><br><span class="line">    Node tail;</span><br><span class="line">    Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        cap = capacity;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        dummy = <span class="keyword">new</span> Node(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> Node(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        tail.prev = dummy;</span><br><span class="line">        dummy.next = tail;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> val = map.get(key).val;</span><br><span class="line">            put(key, val);</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            Node n = map.get(key);</span><br><span class="line">            n.val = value;</span><br><span class="line">            n.prev.removeNext();</span><br><span class="line">            dummy.insertNext(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &gt;= cap) &#123;</span><br><span class="line">                Node n = tail.prev;</span><br><span class="line">                map.remove(n.key);</span><br><span class="line">                tail.prev.prev.removeNext();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                size++;</span><br><span class="line">            &#125;</span><br><span class="line">            dummy.insertNext(<span class="keyword">new</span> Node(key, value));</span><br><span class="line">            map.put(key, dummy.next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 145. Binary Tree Postorder Traversal</title>
    <url>/LeetCode/LeetCode%20145.%20Binary%20Tree%20Postorder%20Traversal-20190707.html</url>
    <content><![CDATA[<h2 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="noopener">145. Binary Tree Postorder Traversal</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a binary tree, return the <em>postorder</em> traversal of its nodes’ values.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        traverse(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归版本</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traverse(root.left, result);</span><br><span class="line">        traverse(root.right, result);</span><br><span class="line">        result.add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非递归版本，和Preorder差不多，不过先右后左，最后翻转</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverseIterative</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; s = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span> (!s.isEmpty() || cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                result.add(cur.val);</span><br><span class="line">                s.push(cur);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = s.pop();</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 144. Binary Tree Preorder Traversal</title>
    <url>/LeetCode/LeetCode%20144.%20Binary%20Tree%20Preorder%20Traversal-20190707.html</url>
    <content><![CDATA[<h2 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="noopener">144. Binary Tree Preorder Traversal</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a binary tree, return the <em>preorder</em> traversal of its nodes’ values.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        traverse(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        traverse(root.left, result);</span><br><span class="line">        traverse(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非递归写法1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverseIterative</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; s = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        s.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">            TreeNode tmp = s.pop();</span><br><span class="line">            result.add(tmp.val);</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                s.push(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                s.push(tmp.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非递归写法2</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverseIterative</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; s = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span> (!s.isEmpty() || cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                s.push(cur);</span><br><span class="line">                result.add(cur.val);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = s.pop();</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 143. Reorder List</title>
    <url>/LeetCode/LeetCode%20143.%20Reorder%20List-20190707.html</url>
    <content><![CDATA[<h2 id="143-Reorder-List"><a href="#143-Reorder-List" class="headerlink" title="143. Reorder List"></a><a href="https://leetcode.com/problems/reorder-list/" target="_blank" rel="noopener">143. Reorder List</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a singly linked list <em>L</em>: <em>L</em>0→<em>L</em>1→…→<em>L__n</em>-1→<em>L</em>n,<br>reorder it to: <em>L</em>0→<em>L__n_→<em>L</em>1→_L__n</em>-1→<em>L</em>2→<em>L__n</em>-2→…</p>
<p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, reorder it to 1-&gt;4-&gt;2-&gt;3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>T(n) O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;ListNode&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode start = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (start != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(start);</span><br><span class="line">            start = start.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            ListNode n = stack.pop();</span><br><span class="line">            n.next = slow.next;</span><br><span class="line">            slow.next = n;</span><br><span class="line">            slow = n.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 142. Linked List Cycle II</title>
    <url>/LeetCode/LeetCode%20142.%20Linked%20List%20Cycle%20II-20190707.html</url>
    <content><![CDATA[<h2 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">142. Linked List Cycle II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p>
<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>
<p><strong>Note:</strong> Do not modify the linked list.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">Output: tail connects to node index 1</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""></p>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">Output: tail connects to node index 0</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></p>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">Output: no cycle</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></p>
<p><strong>Follow-up</strong>:<br>Can you solve it without using extra space?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="keyword">while</span> (head != slow) &#123;</span><br><span class="line">                    head = head.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
        <tag>Fast and Slow Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 141. Linked List Cycle</title>
    <url>/LeetCode/LeetCode%20141.%20Linked%20List%20Cycle-20190707.html</url>
    <content><![CDATA[<h2 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a><a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. Linked List Cycle</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a linked list, determine if it has a cycle in it.</p>
<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure>


<p><span style="display: inline;"><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""></span></p>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure>


<p><span style="display: inline;"><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></span></p>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure>


<p><span style="display: inline;"><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></span></p>
<p><strong>Follow up:</strong></p>
<p>Can you solve it using <em>O(1)</em> (i.e. constant) memory?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>LinkedList</tag>
        <tag>Fast and Slow Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 140. Word Break II</title>
    <url>/LeetCode/LeetCode%20140.%20Word%20Break%20II-20190706.html</url>
    <content><![CDATA[<h2 id="140-Word-Break-II"><a href="#140-Word-Break-II" class="headerlink" title="140. Word Break II"></a><a href="https://leetcode.com/problems/word-break-ii/description/" target="_blank" rel="noopener">140. Word Break II</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, add spaces in <em>s</em> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>
<li>You may assume the dictionary does not contain duplicate words.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;catsanddog&quot;</span><br><span class="line">wordDict &#x3D; [&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;cats and dog&quot;,</span><br><span class="line">  &quot;cat sand dog&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;pineapplepenapple&quot;</span><br><span class="line">wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;pine apple pen apple&quot;,</span><br><span class="line">  &quot;pineapple pen apple&quot;,</span><br><span class="line">  &quot;pine applepen apple&quot;</span><br><span class="line">]</span><br><span class="line">Explanation: Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;catsandog&quot;</span><br><span class="line">wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output:</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || wordDict == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || wordDict.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordDict);</span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> dfsHelper(s, <span class="number">0</span>, wordSet, map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">dfsHelper</span><span class="params">(String s, <span class="keyword">int</span> start, Set&lt;String&gt; wordSet, Map&lt;Integer, List&lt;String&gt;&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(start)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(start);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= s.length()) &#123;</span><br><span class="line">            res.add(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordSet.contains((cur = s.substring(start, i + <span class="number">1</span>)))) &#123;</span><br><span class="line">                List&lt;String&gt; following = dfsHelper(s, i + <span class="number">1</span>, wordSet, map);</span><br><span class="line">                <span class="keyword">for</span> (String f : following) &#123;</span><br><span class="line">                    res.add(cur + (f.length() == <span class="number">0</span> ? <span class="string">""</span> : <span class="string">" "</span>) + f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(start, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 139. Word Break</title>
    <url>/LeetCode/LeetCode%20139.%20Word%20Break-20190706.html</url>
    <content><![CDATA[<h2 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139. Word Break"></a><a href="https://leetcode.com/problems/word-break/description/" target="_blank" rel="noopener">139. Word Break</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>
<li>You may assume the dictionary does not contain duplicate words.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.</span><br><span class="line">             Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="DFS解法"><a href="#DFS解法" class="headerlink" title="DFS解法"></a>DFS解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfsHelper(s, <span class="keyword">new</span> HashSet(wordDict), <span class="number">0</span>, <span class="keyword">new</span> Boolean[s.length()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfsHelper</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> start, Boolean[] memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memo[start] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[start];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end = start + <span class="number">1</span>; end &lt;= s.length(); end++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordDict.contains(s.substring(start, end)) &amp;&amp; dfsHelper(s, wordDict, end, memo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> memo[start] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[start] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DP解法"><a href="#DP解法" class="headerlink" title="DP解法"></a>DP解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; wordDictSet=<span class="keyword">new</span> HashSet(wordDict);</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j] &amp;&amp; wordDictSet.contains(s.substring(j, i))) &#123;</span><br><span class="line">                    dp[i] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>55%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || wordDict == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordDict);</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i] &amp;&amp; wordDict.contains(s.substring(i, j))) &#123;</span><br><span class="line">                    dp[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 138. Copy List with Random Pointer</title>
    <url>/LeetCode/LeetCode%20138.%20Copy%20List%20with%20Random%20Pointer-20190706.html</url>
    <content><![CDATA[<h2 id="138-Copy-List-with-Random-Pointer"><a href="#138-Copy-List-with-Random-Pointer" class="headerlink" title="138. Copy List with Random Pointer"></a><a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">138. Copy List with Random Pointer</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a of the list.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img src="https://discuss.leetcode.com/uploads/files/1470150906153-2yxeznm.png" alt=""></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;&quot;$id&quot;:&quot;1&quot;,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;next&quot;:null,&quot;random&quot;:&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&quot;val&quot;:2&#125;,&quot;random&quot;:&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Node 1&#39;s value is 1, both of its next and random pointer points to Node 2.</span><br><span class="line">Node 2&#39;s value is 2, its next pointer points to null and its random pointer points to itself.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ol>
<li>You must return the <strong>copy of the given head</strong> as a reference to the cloned list.</li>
</ol>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">    public Node random;</span></span><br><span class="line"><span class="comment">​</span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">​</span></span><br><span class="line"><span class="comment">    public Node(int _val,Node _next,Node _random) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">        random = _random;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(cur)) &#123;</span><br><span class="line">                Node copy = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">                map.put(cur, copy);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.get(cur).next = map.get(cur.next);</span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用next指针当做映射-100"><a href="#使用next指针当做映射-100" class="headerlink" title="使用next指针当做映射 100%"></a>使用next指针当做映射 <code>100%</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">            newNode.next = cur.next;</span><br><span class="line">            cur.next = newNode;</span><br><span class="line">            cur = newNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        Node newHead = head.next;</span><br><span class="line">        Node newCur = newHead;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.random != <span class="keyword">null</span>) &#123;</span><br><span class="line">                newCur.random = cur.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = newCur.next;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                newCur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        newCur = newHead;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur.next = newCur.next;</span><br><span class="line">            <span class="keyword">if</span> (cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                newCur.next = cur.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            newCur = newCur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 137. Single Number II</title>
    <url>/LeetCode/LeetCode%20137.%20Single%20Number%20II-20190706.html</url>
    <content><![CDATA[<h2 id="137-Single-Number-II"><a href="#137-Single-Number-II" class="headerlink" title="137. Single Number II"></a><a href="https://leetcode.com/problems/single-number-ii/" target="_blank" rel="noopener">137. Single Number II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a <strong>non-empty</strong> array of integers, every element appears <em>three</em> times except for one, which appears exactly once. Find that single one.</p>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,3,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,1,0,1,99]</span><br><span class="line">Output: 99</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="数bit"><a href="#数bit" class="headerlink" title="数bit"></a>数bit</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] bits = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> bit = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((bit &amp; n) != <span class="number">0</span>) &#123;</span><br><span class="line">                    bits[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">                bit &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bit = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bits.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bits[i] % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                res += bit;</span><br><span class="line">            &#125;</span><br><span class="line">            bit &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="位运算法"><a href="#位运算法" class="headerlink" title="位运算法"></a>位运算法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">        ones = (ones ^ A[i]) &amp; ~twos;</span><br><span class="line">        twos = (twos ^ A[i]) &amp; ~ones;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ones;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code seems tricky and hard to understand at first glance.<br>However, if you consider the problem in Boolean algebra form, everything becomes clear.</p>
<p>What we need to do is to store the number of ‘1’s of every bit. Since each of the 32 bits follow the same rules, we just need to consider 1 bit. We know a number appears 3 times at most, so we need 2 bits to store that. Now we have 4 state, 00, 01, 10 and 11, but we only need 3 of them.</p>
<p>In this solution, 00, 01 and 10 are chosen. Let ‘ones’ represents the first bit, ‘twos’ represents the second bit. Then we need to set rules for ‘ones’ and ‘twos’ so that they act as we hopes. The complete loop is 00-&gt;10-&gt;01-&gt;00(0-&gt;1-&gt;2-&gt;3/0).</p>
<ul>
<li><p>For ‘ones’, we can get ‘ones = ones ^ A[i]; if (twos == 1) then ones = 0’, that can be tansformed to ‘ones = (ones ^ A[i]) &amp; ~twos’.</p>
</li>
<li><p>Similarly, for ‘twos’, we can get ‘twos = twos ^ A[i]; if (ones* == 1) then twos = 0’ and ‘twos = (twos ^ A[i]) &amp; ~ones’. Notice that ‘ones*’ is the value of ‘ones’ after calculation, that is why twos is<br>calculated later.</p>
</li>
</ul>
<hr>
<p>Here is another example. If a number appears 5 times at most, we can write a program using the same method. Now we need 3 bits and the loop is 000-&gt;100-&gt;010-&gt;110-&gt;001. The code looks like this:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> na = <span class="number">0</span>, nb = <span class="number">0</span>, nc = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		nb = nb ^ (A[i] &amp; na);</span><br><span class="line">		na = (na ^ A[i]) &amp; ~nc;</span><br><span class="line">		nc = nc ^ (A[i] &amp; ~na &amp; ~nb);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> na &amp; ~nb &amp; ~nc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or even like this:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> twos = <span class="number">0xffffffff</span>, threes = <span class="number">0xffffffff</span>, ones = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		threes = threes ^ (A[i] &amp; twos);</span><br><span class="line">		twos = (twos ^ A[i]) &amp; ~ones;</span><br><span class="line">		ones = ones ^ (A[i] &amp; ~twos &amp; ~threes);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ones;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I hope all these above can help you have a better understand of this problem.</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Bits</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 136. Single Number</title>
    <url>/LeetCode/LeetCode%20136.%20Single%20Number-20190705.html</url>
    <content><![CDATA[<h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">136. Single Number</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            result ^= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 135. Candy</title>
    <url>/LeetCode/LeetCode%20135.%20Candy-20190705.html</url>
    <content><![CDATA[<h2 id="135-Candy"><a href="#135-Candy" class="headerlink" title="135. Candy"></a><a href="https://leetcode.com/problems/candy/" target="_blank" rel="noopener">135. Candy</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>There are <em>N</em> children standing in a line. Each child is assigned a rating value.</p>
<p>You are giving candies to these children subjected to the following requirements:</p>
<ul>
<li>Each child must have at least one candy.</li>
<li>Children with a higher rating get more candies than their neighbors.</li>
</ul>
<p>What is the minimum candies you must give?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,0,2]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.</span><br><span class="line">             The third child gets 1 candy because it satisfies the above two conditions.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ratings == <span class="keyword">null</span> || ratings.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = ratings.length;</span><br><span class="line">        <span class="keyword">int</span>[] increaseLR = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                increaseLR[i] = increaseLR[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] increaseRL = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                increaseRL[i] = increaseRL[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> total = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            total += Math.max(increaseLR[i], increaseRL[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 134. Gas Station</title>
    <url>/LeetCode/LeetCode%20134.%20Gas%20Station-20190703.html</url>
    <content><![CDATA[<h2 id="134-Gas-Station"><a href="#134-Gas-Station" class="headerlink" title="134. Gas Station"></a><a href="https://leetcode.com/problems/gas-station/" target="_blank" rel="noopener">134. Gas Station</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>There are <em>N</em> gas stations along a circular route, where the amount of gas at station <em>i</em> is <code>gas[i]</code>.</p>
<p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from station <em>i</em> to its next station (<em>i</em>+1). You begin the journey with an empty tank at one of the gas stations.</p>
<p>Return the starting gas station’s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</p>
<p><strong>Note:</strong></p>
<ul>
<li>If there exists a solution, it is guaranteed to be unique.</li>
<li>Both input arrays are non-empty and have the same length.</li>
<li>Each element in the input arrays is a non-negative integer.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">gas  &#x3D; [1,2,3,4,5]</span><br><span class="line">cost &#x3D; [3,4,5,1,2]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank &#x3D; 0 + 4 &#x3D; 4</span><br><span class="line">Travel to station 4\. Your tank &#x3D; 4 - 1 + 5 &#x3D; 8</span><br><span class="line">Travel to station 0\. Your tank &#x3D; 8 - 2 + 1 &#x3D; 7</span><br><span class="line">Travel to station 1\. Your tank &#x3D; 7 - 3 + 2 &#x3D; 6</span><br><span class="line">Travel to station 2\. Your tank &#x3D; 6 - 4 + 3 &#x3D; 5</span><br><span class="line">Travel to station 3\. The cost is 5\. Your gas is just enough to travel back to station 3.</span><br><span class="line">Therefore, return 3 as the starting index.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">gas  &#x3D; [2,3,4]</span><br><span class="line">cost &#x3D; [3,4,3]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">You can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.</span><br><span class="line">Let&#39;s start at station 2 and fill up with 4 unit of gas. Your tank &#x3D; 0 + 4 &#x3D; 4</span><br><span class="line">Travel to station 0\. Your tank &#x3D; 4 - 3 + 2 &#x3D; 3</span><br><span class="line">Travel to station 1\. Your tank &#x3D; 3 - 3 + 3 &#x3D; 3</span><br><span class="line">You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.</span><br><span class="line">Therefore, you can&#39;t travel around the circuit once no matter where you start.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gas == <span class="keyword">null</span> || cost == <span class="keyword">null</span> || gas.length == <span class="number">0</span> || gas.length != cost.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (canTravel(gas, cost, i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canTravel</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cost[start] &gt; gas[start]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; gas.length; i++) &#123;</span><br><span class="line">            cur += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; start; i++) &#123;</span><br><span class="line">            cur += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = gas.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> total_tank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> curr_tank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> starting_station = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      total_tank += gas[i] - cost[i];</span><br><span class="line">      curr_tank += gas[i] - cost[i];</span><br><span class="line">      <span class="comment">// If one couldn't get here,</span></span><br><span class="line">      <span class="keyword">if</span> (curr_tank &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Pick up the next station as the starting one.</span></span><br><span class="line">        starting_station = i + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// Start with an empty tank.</span></span><br><span class="line">        curr_tank = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total_tank &gt;= <span class="number">0</span> ? starting_station : -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 133. Clone Graph</title>
    <url>/LeetCode/LeetCode%20133.%20Clone%20Graph-20190629.html</url>
    <content><![CDATA[<h2 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133. Clone Graph"></a><a href="https://leetcode.com/problems/clone-graph/" target="_blank" rel="noopener">133. Clone Graph</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a reference of a node in a  undirected graph, return a (clone) of the graph. Each node in the graph contains a val (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>
<p><strong>Example:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/19/113_sample.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[&#123;&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[&#123;&quot;$ref&quot;:&quot;1&quot;&#125;,&#123;&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&#123;&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[&#123;&quot;$ref&quot;:&quot;3&quot;&#125;,&#123;&quot;$ref&quot;:&quot;1&quot;&#125;],&quot;val&quot;:4&#125;],&quot;val&quot;:3&#125;],&quot;val&quot;:2&#125;,&#123;&quot;$ref&quot;:&quot;4&quot;&#125;],&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Node 1&#39;s value is 1, and it has two neighbors: Node 2 and 4.</span><br><span class="line">Node 2&#39;s value is 2, and it has two neighbors: Node 1 and 3.</span><br><span class="line">Node 3&#39;s value is 3, and it has two neighbors: Node 2 and 4.</span><br><span class="line">Node 4&#39;s value is 4, and it has two neighbors: Node 1 and 3.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ol>
<li>The number of nodes will be between 1 and 100.</li>
<li>The undirected graph is a , which means no repeated edges and no self-loops in the graph.</li>
<li>Since the graph is undirected, if node <em>p</em> has node <em>q</em> as neighbor, then node <em>q</em> must have node <em>p</em> as neighbor too.</li>
<li>You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3></li>
</ol>
<p>Language: <strong>Java</strong></p>
<h4 id="一边遍历点和边，一边克隆，BFS"><a href="#一边遍历点和边，一边克隆，BFS" class="headerlink" title="一边遍历点和边，一边克隆，BFS"></a>一边遍历点和边，一边克隆，BFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; neighbors;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(node);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node tmp = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(tmp)) &#123;</span><br><span class="line">                Node newNode = <span class="keyword">new</span> Node(tmp.val, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                map.put(tmp, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">            Node newNode = map.get(tmp);</span><br><span class="line">            <span class="keyword">for</span> (Node nei : tmp.neighbors) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(nei)) &#123;</span><br><span class="line">                    q.offer(nei);</span><br><span class="line">                    Node n = <span class="keyword">new</span> Node(nei.val, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                    map.put(nei, n);</span><br><span class="line">                &#125;</span><br><span class="line">                newNode.neighbors.add(map.get(nei));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="先复制点再遍历添加边，BFS"><a href="#先复制点再遍历添加边，BFS" class="headerlink" title="先复制点再遍历添加边，BFS"></a>先复制点再遍历添加边，BFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(node);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node tmp = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(tmp)) &#123;</span><br><span class="line">                Node newNode = <span class="keyword">new</span> Node(tmp.val, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                map.put(tmp, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Node nei : tmp.neighbors) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(nei)) &#123;</span><br><span class="line">                    q.offer(nei);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node origin : map.keySet()) &#123;</span><br><span class="line">            Node nn = map.get(origin);</span><br><span class="line">            <span class="keyword">for</span> (Node neighbor : origin.neighbors) &#123;</span><br><span class="line">                nn.neighbors.add(map.get(neighbor));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dfsHelper(node, map);</span><br><span class="line">        <span class="keyword">return</span> map.get(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(Node node, Map&lt;Node, Node&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(node)) &#123;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(node.val, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            map.put(node, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">        Node newNode = map.get(node);</span><br><span class="line">        <span class="keyword">for</span> (Node neighbor : node.neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(neighbor)) &#123;</span><br><span class="line">                dfsHelper(neighbor, map);</span><br><span class="line">            &#125;</span><br><span class="line">            newNode.neighbors.add(map.get(neighbor));</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 132. Palindrome Partitioning II</title>
    <url>/LeetCode/LeetCode%20132.%20Palindrome%20Partitioning%20II-20190629.html</url>
    <content><![CDATA[<h2 id="132-Palindrome-Partitioning-II"><a href="#132-Palindrome-Partitioning-II" class="headerlink" title="132. Palindrome Partitioning II"></a><a href="https://leetcode.com/problems/palindrome-partitioning-ii/" target="_blank" rel="noopener">132. Palindrome Partitioning II</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given a string <em>s</em>, partition <em>s</em> such that every substring of the partition is a palindrome.</p>
<p>Return the minimum cuts needed for a palindrome partitioning of <em>s</em>.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  &quot;aab&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h5 id="20-解法"><a href="#20-解法" class="headerlink" title="20%解法"></a>20%解法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCut</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || isPalindrome(s, <span class="number">0</span>, s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(s, <span class="number">0</span>, i)) &#123;</span><br><span class="line">                min = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isPalindrome(s, j, i)) &#123;</span><br><span class="line">                        min = Math.min(min, dp[j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(start) != s.charAt(end)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="85"><a href="#85" class="headerlink" title="85%"></a>85%</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCut</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] pal = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == s.charAt(i) &amp;&amp; (j + <span class="number">1</span> &gt; i - <span class="number">1</span> || pal[j + <span class="number">1</span>][i - <span class="number">1</span>])) &#123;</span><br><span class="line">                    pal[j][i] = <span class="keyword">true</span>;</span><br><span class="line">                    min = j == <span class="number">0</span> ? <span class="number">0</span> : Math.min(min, dp[j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 131. Palindrome Partitioning</title>
    <url>/LeetCode/LeetCode%20131.%20Palindrome%20Partitioning-20190629.html</url>
    <content><![CDATA[<h2 id="131-Palindrome-Partitioning"><a href="#131-Palindrome-Partitioning" class="headerlink" title="131. Palindrome Partitioning"></a><a href="https://leetcode.com/problems/palindrome-partitioning/description/" target="_blank" rel="noopener">131. Palindrome Partitioning</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a string <em>s</em>, partition <em>s</em> such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of <em>s</em>.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  &quot;aab&quot;</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;aa&quot;,&quot;b&quot;],</span><br><span class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            dfsHelper(s, <span class="number">0</span>, result, <span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(String s, <span class="keyword">int</span> start, </span></span></span><br><span class="line"><span class="function"><span class="params">                                        List&lt;List&lt;String&gt;&gt; result, List&lt;String&gt; partition)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start == s.length()) &#123;</span><br><span class="line">                  result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(partition));</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (isPalindrome(s, start, i)) &#123;</span><br><span class="line">                        partition.add(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">                        dfsHelper(s, i + <span class="number">1</span>, result, partition);</span><br><span class="line">                        partition.remove(partition.size() - <span class="number">1</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// [start, end]</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (s.charAt(start++) != s.charAt(end--)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 130. Surrounded Regions</title>
    <url>/LeetCode/LeetCode%20130.%20Surrounded%20Regions-20190623.html</url>
    <content><![CDATA[<h2 id="130-Surrounded-Regions"><a href="#130-Surrounded-Regions" class="headerlink" title="130. Surrounded Regions"></a><a href="https://leetcode.com/problems/surrounded-regions/" target="_blank" rel="noopener">130. Surrounded Regions</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a 2D board containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> (<strong>the letter O</strong>), capture all regions surrounded by <code>&#39;X&#39;</code>.</p>
<p>A region is captured by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X O O X</span><br><span class="line">X X O X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure>

<p>After running your function, the board should be:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure>

<p><strong>Explanation:</strong></p>
<p>Surrounded regions shouldn’t be on the border, which means that any <code>&#39;O&#39;</code>  on the border of the board are not flipped to <code>&#39;X&#39;</code>. Any <code>&#39;O&#39;</code>  that is not on the border and it is not connected to an <code>&#39;O&#39;</code>  on the border will be flipped to <code>&#39;X&#39;</code>. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            markFromBorder(board);</span><br><span class="line">            flip(board);</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">markFromBorder</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">                  dfsMark(board, i, <span class="number">0</span>);</span><br><span class="line">                  dfsMark(board, i, board[<span class="number">0</span>].length - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; board[<span class="number">0</span>].length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                  dfsMark(board, <span class="number">0</span>, i);</span><br><span class="line">                  dfsMark(board, board.length - <span class="number">1</span>, i);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">      <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsMark</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">'X'</span> || board[i][j] == <span class="string">'Y'</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                  board[i][j] = <span class="string">'Y'</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                  <span class="keyword">int</span> newX = i + dx[k];</span><br><span class="line">                  <span class="keyword">int</span> newY = j + dy[k];</span><br><span class="line">                  <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; board.length &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; board[<span class="number">0</span>].length &amp;&amp; board[newX][newY] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                        dfsMark(board, newX, newY);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                              board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'Y'</span>) &#123;</span><br><span class="line">                              board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 129. Sum Root to Leaf Numbers</title>
    <url>/LeetCode/LeetCode%20129.%20Sum%20Root%20to%20Leaf%20Numbers-20190623.html</url>
    <content><![CDATA[<h2 id="129-Sum-Root-to-Leaf-Numbers"><a href="#129-Sum-Root-to-Leaf-Numbers" class="headerlink" title="129. Sum Root to Leaf Numbers"></a><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/" target="_blank" rel="noopener">129. Sum Root to Leaf Numbers</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>
<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>
<p>Find the total sum of all root-to-leaf numbers.</p>
<p><strong>Note:</strong>  A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line">Output: 25</span><br><span class="line">Explanation:</span><br><span class="line">The root-to-leaf path 1-&gt;2 represents the number 12.</span><br><span class="line">The root-to-leaf path 1-&gt;3 represents the number 13.</span><br><span class="line">Therefore, sum &#x3D; 12 + 13 &#x3D; 25.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,9,0,5,1]</span><br><span class="line">    4</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9   0</span><br><span class="line">  &#x2F; \</span><br><span class="line">5   1</span><br><span class="line">Output: 1026</span><br><span class="line">Explanation:</span><br><span class="line">The root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.</span><br><span class="line">The root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.</span><br><span class="line">The root-to-leaf path 4-&gt;0 represents the number 40.</span><br><span class="line">Therefore, sum &#x3D; 495 + 491 + 40 &#x3D; 1026.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfsHelper(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(TreeNode root, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur * <span class="number">10</span> + root.val;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span> || root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dfsHelper(root.left, cur);</span><br><span class="line">            dfsHelper(root.right, cur);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 128. Longest Consecutive Sequence</title>
    <url>/LeetCode/LeetCode%20128.%20Longest%20Consecutive%20Sequence-20190623.html</url>
    <content><![CDATA[<h2 id="128-Longest-Consecutive-Sequence"><a href="#128-Longest-Consecutive-Sequence" class="headerlink" title="128. Longest Consecutive Sequence"></a><a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener">128. Longest Consecutive Sequence</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>
<p>Your algorithm should run in O(<em>n</em>) complexity.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  [100, 4, 200, 1, 3, 2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="UnionFind"><a href="#UnionFind" class="headerlink" title="UnionFind"></a>UnionFind</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map;</span><br><span class="line">        <span class="keyword">int</span>[] nums;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.nums = nums;</span><br><span class="line">            <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">                add(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ancestor = map.getOrDefault(num, num);</span><br><span class="line">            <span class="keyword">if</span> (ancestor != num) &#123;</span><br><span class="line">                ancestor = find(ancestor);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(num, ancestor);</span><br><span class="line">            <span class="keyword">return</span> ancestor;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">            find(num);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num - <span class="number">1</span>)) &#123;</span><br><span class="line">                union(num, num - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num + <span class="number">1</span>)) &#123;</span><br><span class="line">                union(num, num + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ancestorA = find(a);</span><br><span class="line">            <span class="keyword">int</span> ancestorB = find(b);</span><br><span class="line">            map.put(ancestorA, ancestorB);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">            Map&lt;Integer, Integer&gt; countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> val : map.values()) &#123;</span><br><span class="line">                <span class="keyword">int</span> ancestor = find(val);</span><br><span class="line">                <span class="keyword">int</span> newLen = countMap.getOrDefault(ancestor, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                countMap.put(ancestor, newLen);</span><br><span class="line">                <span class="keyword">if</span> (newLen &gt; longest) &#123;</span><br><span class="line">                    longest = newLen;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> longest;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(nums);</span><br><span class="line">        <span class="keyword">return</span> uf.longestConsecutive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; num_set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            num_set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> longestStreak = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : num_set) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!num_set.contains(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> currentNum = num;</span><br><span class="line">                <span class="keyword">int</span> currentStreak = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (num_set.contains(currentNum+<span class="number">1</span>)) &#123;</span><br><span class="line">                    currentNum += <span class="number">1</span>;</span><br><span class="line">                    currentStreak += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                longestStreak = Math.max(longestStreak, currentStreak);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longestStreak;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>UnionFind</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 126. Word Ladder II</title>
    <url>/LeetCode/LeetCode%20126.%20Word%20Ladder%20II-20190623.html</url>
    <content><![CDATA[<h2 id="126-Word-Ladder-II"><a href="#126-Word-Ladder-II" class="headerlink" title="126. Word Ladder II"></a><a href="https://leetcode.com/problems/word-ladder-ii/description/" target="_blank" rel="noopener">126. Word Ladder II</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p><strong>Note:</strong></p>
<ul>
<li>Return an empty list if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;,</span><br><span class="line">endWord &#x3D; &quot;cog&quot;,</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],</span><br><span class="line">   [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;</span><br><span class="line">endWord &#x3D; &quot;cog&quot;</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line"></span><br><span class="line">Output: []</span><br><span class="line"></span><br><span class="line">Explanation:  The endWord &quot;cog&quot; is not in wordList, therefore no possible  transformation.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String beginWord, String endWord, List&lt;String&gt; wordList) &#123;</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (beginWord == <span class="keyword">null</span> || endWord == <span class="keyword">null</span> || beginWord.length() != endWord.length() ||</span><br><span class="line">                  wordList == <span class="keyword">null</span> || wordList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125; </span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;String, Integer&gt; dMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">            wordSet.add(beginWord);</span><br><span class="line">            <span class="keyword">if</span> (!wordSet.contains(endWord)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            bfs(beginWord, endWord, wordSet, dMap, graph);</span><br><span class="line">            dfs(beginWord, endWord, dMap, graph, result, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(String beginWord, String endWord, Set&lt;String&gt; wordSet, Map&lt;String, Integer&gt; dMap, Map&lt;String, List&lt;String&gt;&gt; graph)</span> </span>&#123;</span><br><span class="line">            Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            q.offer(endWord);</span><br><span class="line">            dMap.put(endWord, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> paces = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (String s : wordSet) &#123;</span><br><span class="line">                  graph.put(s, <span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">                  paces++;</span><br><span class="line">                  <span class="keyword">int</span> size = q.size();</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                        String w = q.poll();</span><br><span class="line">                        List&lt;String&gt; nextWords = nextWords(w, wordSet);</span><br><span class="line">                        graph.get(w).addAll(nextWords);</span><br><span class="line">                        <span class="keyword">for</span> (String next : nextWords) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (!dMap.containsKey(next)) &#123;</span><br><span class="line">                                    q.offer(next);</span><br><span class="line">                                    dMap.put(next, paces);</span><br><span class="line">                             &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">nextWords</span><span class="params">(String word, Set&lt;String&gt; wordSet)</span> </span>&#123;</span><br><span class="line">            List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">char</span> cur = chars[i];</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (c == cur) &#123;</span><br><span class="line">                              <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                        chars[i] = c;</span><br><span class="line">                        String newString = <span class="keyword">new</span> String(chars);</span><br><span class="line">                        <span class="keyword">if</span> (wordSet.contains(newString)) &#123;</span><br><span class="line">                              result.add(newString);</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                  chars[i] = cur;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String currentWord, String endWord, Map&lt;String, Integer&gt; dMap, Map&lt;String, List&lt;String&gt;&gt; graph,</span></span></span><br><span class="line"><span class="function"><span class="params">                              List&lt;List&lt;String&gt;&gt; result, List&lt;String&gt; path)</span> </span>&#123;</span><br><span class="line">            path.add(currentWord);</span><br><span class="line">            <span class="keyword">if</span> (currentWord.equals(endWord)) &#123;</span><br><span class="line">                  result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">for</span> (String s : graph.get(currentWord)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (dMap.get(currentWord) == dMap.get(s) + <span class="number">1</span>) &#123;</span><br><span class="line">                              dfs(s, endWord, dMap, graph, result, path);</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 127. Word Ladder</title>
    <url>/LeetCode/LeetCode%20127.%20Word%20Ladder-20190623.html</url>
    <content><![CDATA[<h2 id="127-Word-Ladder"><a href="#127-Word-Ladder" class="headerlink" title="127. Word Ladder"></a><a href="https://leetcode.com/problems/word-ladder/description/" target="_blank" rel="noopener">127. Word Ladder</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time.</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p><strong>Note:</strong></p>
<ul>
<li>Return 0 if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;,</span><br><span class="line">endWord &#x3D; &quot;cog&quot;,</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">return its length 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;</span><br><span class="line">endWord &#x3D; &quot;cog&quot;</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line"></span><br><span class="line">Output:  0</span><br><span class="line"></span><br><span class="line">Explanation:  The endWord &quot;cog&quot; is not in wordList, therefore no possible  transformation.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="通过修改word中的字母生成-78"><a href="#通过修改word中的字母生成-78" class="headerlink" title="通过修改word中的字母生成 78%"></a>通过修改word中的字母生成 78%</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beginWord == <span class="keyword">null</span> || endWord == <span class="keyword">null</span> || wordList == <span class="keyword">null</span> || wordList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">        <span class="keyword">if</span> (!wordSet.contains(endWord)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(beginWord);</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                String curWord = q.poll();</span><br><span class="line">                <span class="keyword">for</span> (String next : nextWords(curWord, wordSet)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (next.equals(endWord)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> length + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.offer(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">nextWords</span><span class="params">(String word, Set&lt;String&gt; wordSet)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; nextWords = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> origin = chars[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == origin) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                chars[i] = c;</span><br><span class="line">                String newStr = <span class="keyword">new</span> String(chars);</span><br><span class="line">                <span class="keyword">if</span> (wordSet.contains(newStr)) &#123;</span><br><span class="line">                    nextWords.add(newStr);</span><br><span class="line">                    wordSet.remove(newStr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[i] = origin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextWords;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 125. Valid Palindrome</title>
    <url>/LeetCode/LeetCode%20125.%20Valid%20Palindrome-20190623.html</url>
    <content><![CDATA[<h2 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a><a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="noopener">125. Valid Palindrome</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p><strong>Note:</strong>  For the purpose of this problem, we define empty string as valid palindrome.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;race a car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = s.length() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                  <span class="keyword">while</span> (left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(left))) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">while</span> (left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(right))) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Character.toUpperCase(s.charAt(left)) != Character.toUpperCase(s.charAt(right))) &#123;</span><br><span class="line">                              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              left++;</span><br><span class="line">                              right--;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 124. Binary Tree Maximum Path Sum</title>
    <url>/LeetCode/LeetCode%20124.%20Binary%20Tree%20Maximum%20Path%20Sum-20190623.html</url>
    <content><![CDATA[<h2 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/" target="_blank" rel="noopener">124. Binary Tree Maximum Path Sum</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a <strong>non-empty</strong> binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      &#x2F; \</span><br><span class="line">     2   3</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-10,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    -10</span><br><span class="line">     &#x2F; \</span><br><span class="line">   9   20</span><br><span class="line">      &#x2F;   \</span><br><span class="line">     15    7</span><br><span class="line"></span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       TreeNode left;</span></span><br><span class="line"><span class="comment"> *       TreeNode right;</span></span><br><span class="line"><span class="comment"> *       TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> max;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">            max = Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            helper(root);</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// return max</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> leftMax = Math.max(helper(root.left), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> rightMax = Math.max(helper(root.right), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> totalMax = leftMax + rightMax + root.val;</span><br><span class="line">            max = Math.max(totalMax, max);</span><br><span class="line">            <span class="keyword">return</span> root.val + Math.max(leftMax, rightMax);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 123. Best Time to Buy and Sell Stock III</title>
    <url>/LeetCode/LeetCode%20123.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20III-20190623.html</url>
    <content><![CDATA[<h2 id="123-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="123. Best Time to Buy and Sell Stock III"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">123. Best Time to Buy and Sell Stock III</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most <em>two</em> transactions.</p>
<p>*<em>Note:  *</em>You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,3,5,0,0,3,1,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Buy on day 4 (price &#x3D; 0) and sell on day 6 (price &#x3D; 3), profit &#x3D; 3-0 &#x3D; 3.</span><br><span class="line">              Then buy on day 7 (price &#x3D; 1) and sell on day 8 (price &#x3D; 4), profit &#x3D; 4-1 &#x3D; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">              Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">              engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>分段DP，以i为分界线</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[] preProfit = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] postProfit = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> curMin = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            curMin = Math.min(curMin, prices[i]);</span><br><span class="line">            preProfit[i] = Math.max(preProfit[i - <span class="number">1</span>], prices[i] - curMin);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> curMax = prices[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            curMax = Math.max(curMax, prices[i]);</span><br><span class="line">            postProfit[i] = Math.max(postProfit[i + <span class="number">1</span>], curMax - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            maxProfit = Math.max(maxProfit, preProfit[i] + postProfit[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>简化DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hold1 = Integer.MIN_VALUE, hold2 = Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">int</span> release1 = <span class="number">0</span>, release2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i:prices)&#123;                                             <span class="comment">// Assume we only have 0 money at first</span></span><br><span class="line">                  hold1      = Math.max(hold1,      -i);               <span class="comment">// The maximum if we've just buy  1st stock so far. </span></span><br><span class="line">                  release1 = Math.max(release1, hold1+i);       <span class="comment">// The maximum if we've just sold 1nd stock so far.</span></span><br><span class="line">                  hold2      = Math.max(hold2,      release1-i);   <span class="comment">// The maximum if we've just buy  2nd stock so far.</span></span><br><span class="line">                  release2 = Math.max(release2, hold2+i);       <span class="comment">// The maximum if we've just sold 2nd stock so far.</span></span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> release2; <span class="comment">///Since release1 is initiated as 0, so release2 will always higher than release1.</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 122. Best Time to Buy and Sell Stock II</title>
    <url>/LeetCode/LeetCode%20122.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II-20190604.html</url>
    <content><![CDATA[<h2 id="122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="122. Best Time to Buy and Sell Stock II"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122. Best Time to Buy and Sell Stock II</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">              Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">              Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">              engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (prices[i + <span class="number">1</span>] &gt; prices[i]) &#123;</span><br><span class="line">                        maxProfit += prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> maxProfit;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
    <url>/LeetCode/LeetCode%20121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock-20190604.html</url>
    <content><![CDATA[<h2 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. Best Time to Buy and Sell Stock</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>
<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Note that you cannot sell a stock before you buy one.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-1 &#x3D; 5.</span><br><span class="line">              Not 7-1 &#x3D; 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> minPrice = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (prices[i] &lt; minPrice) &#123;</span><br><span class="line">                        minPrice = prices[i];</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - minPrice &gt; maxProfit) &#123;</span><br><span class="line">                        maxProfit = prices[i] - minPrice;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> maxProfit;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 120. Triangle</title>
    <url>/LeetCode/LeetCode%20120.%20Pascal&#39;s%20Triangle%20II-20190529.html</url>
    <content><![CDATA[<h2 id="120-Triangle"><a href="#120-Triangle" class="headerlink" title="120. Triangle"></a><a href="https://leetcode.com/problems/triangle/description/" target="_blank" rel="noopener">120. Triangle</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>
<p>For example, given the following triangle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">     [2],</span><br><span class="line">    [3,4],</span><br><span class="line">   [6,5,7],</span><br><span class="line">  [4,1,8,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong> + <strong>1</strong> = 11).</p>
<p><strong>Note:</strong></p>
<p>Bonus point if you are able to do this using only <em>O</em>(<em>n</em>) extra space, where <em>n</em> is the total number of rows in the triangle.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (triangle == <span class="keyword">null</span> || triangle.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> m = triangle.size();</span><br><span class="line">            <span class="keyword">int</span> n = triangle.get(m - <span class="number">1</span>).size();</span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  Arrays.fill(dp[i], Integer.MAX_VALUE);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> divideConquer(triangle, dp, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divideConquer</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle, <span class="keyword">int</span>[][] dp, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= dp.length || y &gt;= dp[x].length) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[x][y] != Integer.MAX_VALUE) &#123;</span><br><span class="line">                  <span class="keyword">return</span> dp[x][y];</span><br><span class="line">           &#125;</span><br><span class="line">            dp[x][y] = triangle.get(x).get(y) + </span><br><span class="line">                  Math.min(divideConquer(triangle, dp, x + <span class="number">1</span>, y),</span><br><span class="line">                               divideConquer(triangle, dp, x + <span class="number">1</span>, y + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> dp[x][y];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接使用DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (triangle == <span class="keyword">null</span> || triangle.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> m = triangle.size();</span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][m];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  dp[m - <span class="number">1</span>][i] = triangle.get(m - <span class="number">1</span>).get(i);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                        dp[i][j] = triangle.get(i).get(j) + Math.min(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DP O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (triangle == <span class="keyword">null</span> || triangle.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][triangle.size()];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; triangle.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triangle.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j] + triangle.get(i).get(j);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == triangle.get(i).size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>] + triangle.get(i).get(j);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = triangle.get(i).get(j) + Math.min(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j], dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] leaf = dp[(triangle.size() - <span class="number">1</span>) % <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : leaf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt; min) &#123;</span><br><span class="line">                min = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 119. Pascal&#39;s Triangle II</title>
    <url>/LeetCode/LeetCode%20119.%20Pascal&#39;s%20Triangle%20II-20190529.html</url>
    <content><![CDATA[<h2 id="119-Pascal’s-Triangle-II"><a href="#119-Pascal’s-Triangle-II" class="headerlink" title="119. Pascal’s Triangle II"></a><a href="https://leetcode.com/problems/pascals-triangle-ii/" target="_blank" rel="noopener">119. Pascal’s Triangle II</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a non-negative  index <em>k</em>  where <em>k</em> ≤  33, return the <em>k</em><sup>th</sup>  index row of the Pascal’s triangle.</p>
<p>Note that the row index starts from  0.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br><small style="display: inline;">In Pascal’s triangle, each number is the sum of the two numbers directly above it.</small></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: [1,3,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<p>Could you optimize your algorithm to use only <em>O</em>(<em>k</em>) extra space?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][rowIndex + <span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                        dp[i % <span class="number">2</span>][j] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>] + dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j];</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n : dp[rowIndex % <span class="number">2</span>]) &#123;</span><br><span class="line">                  result.add(n);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 118. Pascal&#39;s Triangle</title>
    <url>/LeetCode/LeetCode%20118.%20Pascal&#39;s%20Triangle-20190526.html</url>
    <content><![CDATA[<h2 id="118-Pascal’s-Triangle"><a href="#118-Pascal’s-Triangle" class="headerlink" title="118. Pascal’s Triangle"></a><a href="https://leetcode.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. Pascal’s Triangle</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a non-negative integer  <em>numRows</em>, generate the first <em>numRows</em> of Pascal’s triangle.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br><small style="display: inline;">In Pascal’s triangle, each number is the sum of the two numbers directly above it.</small></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (numRows &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">                  List&lt;Integer&gt; line = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">                              line.add(<span class="number">1</span>);</span><br><span class="line">                              <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                        line.add(result.get(i - <span class="number">1</span>).get(j - <span class="number">1</span>) + result.get(i - <span class="number">1</span>).get(j));</span><br><span class="line">                 &#125;</span><br><span class="line">                  result.add(line);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 117. Populating Next Right Pointers in Each Node II</title>
    <url>/LeetCode/LeetCode%20117.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node%20II-20190526.html</url>
    <content><![CDATA[<h2 id="117-Populating-Next-Right-Pointers-in-Each-Node-II"><a href="#117-Populating-Next-Right-Pointers-in-Each-Node-II" class="headerlink" title="117. Populating Next Right Pointers in Each Node II"></a><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="noopener">117. Populating Next Right Pointers in Each Node II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a binary tree</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &#123;&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5&#125;,&quot;val&quot;:2&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7&#125;,&quot;val&quot;:3&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Output: &#123;&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7&#125;,&quot;right&quot;:null,&quot;val&quot;:5&#125;,&quot;right&quot;:null,&quot;val&quot;:4&#125;,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$ref&quot;:&quot;5&quot;&#125;,&quot;val&quot;:3&#125;,&quot;right&quot;:&#123;&quot;$ref&quot;:&quot;4&quot;&#125;,&quot;val&quot;:2&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$ref&quot;:&quot;6&quot;&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">      public int val;</span></span><br><span class="line"><span class="comment">      public Node left;</span></span><br><span class="line"><span class="comment">      public Node right;</span></span><br><span class="line"><span class="comment">      public Node next;</span></span><br><span class="line"><span class="comment">​</span></span><br><span class="line"><span class="comment">      public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">​</span></span><br><span class="line"><span class="comment">      public Node(int _val,Node _left,Node _right,Node _next) &#123;</span></span><br><span class="line"><span class="comment">            val = _val;</span></span><br><span class="line"><span class="comment">            left = _left;</span></span><br><span class="line"><span class="comment">            right = _right;</span></span><br><span class="line"><span class="comment">            next = _next;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> root;</span><br><span class="line">           &#125;</span><br><span class="line">            Node nextRoot = connectLine(root);</span><br><span class="line">            connect(nextRoot);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> Node <span class="title">connectLine</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            Node cur = root;</span><br><span class="line">            Node dummy = <span class="keyword">new</span> Node();</span><br><span class="line">            Node nextCur = dummy;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        nextCur.next = cur.left;</span><br><span class="line">                        nextCur = nextCur.next;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        nextCur.next = cur.right;</span><br><span class="line">                        nextCur = nextCur.next;</span><br><span class="line">                 &#125;</span><br><span class="line">                  cur = cur.next;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dummy.next;</span><br><span class="line">            </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 116. Populating Next Right Pointers in Each Node</title>
    <url>/LeetCode/LeetCode%20116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node-20190525.html</url>
    <content><![CDATA[<h2 id="116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="116. Populating Next Right Pointers in Each Node"></a><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="noopener">116. Populating Next Right Pointers in Each Node</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &#123;&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5&#125;,&quot;val&quot;:2&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:6&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7&#125;,&quot;val&quot;:3&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Output: &#123;&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:&#123;&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7&#125;,&quot;right&quot;:null,&quot;val&quot;:6&#125;,&quot;right&quot;:null,&quot;val&quot;:5&#125;,&quot;right&quot;:null,&quot;val&quot;:4&#125;,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:&#123;&quot;$ref&quot;:&quot;5&quot;&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$ref&quot;:&quot;6&quot;&#125;,&quot;val&quot;:3&#125;,&quot;right&quot;:&#123;&quot;$ref&quot;:&quot;4&quot;&#125;,&quot;val&quot;:2&#125;,&quot;next&quot;:null,&quot;right&quot;:&#123;&quot;$ref&quot;:&quot;7&quot;&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">​</span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">​</span></span><br><span class="line"><span class="comment">    public Node(int _val,Node _left,Node _right,Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            root.left.next = root.right;</span><br><span class="line">            <span class="keyword">if</span> (root.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                root.right.next = root.next.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        connect(root.left);</span><br><span class="line">        connect(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 115. Distinct Subsequences</title>
    <url>/LeetCode/LeetCode%20115.%20Distinct%20Subsequences-20190525.html</url>
    <content><![CDATA[<h2 id="115-Distinct-Subsequences"><a href="#115-Distinct-Subsequences" class="headerlink" title="115. Distinct Subsequences"></a><a href="https://leetcode.com/problems/distinct-subsequences/" target="_blank" rel="noopener">115. Distinct Subsequences</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given a string <strong>S</strong> and a string <strong>T</strong>, count the number of distinct subsequences of <strong>S</strong> which equals <strong>T</strong>.</p>
<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>&quot;ACE&quot;</code> is a subsequence of <code>&quot;ABCDE&quot;</code> while <code>&quot;AEC&quot;</code> is not).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;rabbbit&quot;, T &#x3D; &quot;rabbit&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">As shown below, there are 3 ways you can generate &quot;rabbit&quot; from S.</span><br><span class="line">(The caret symbol ^ means the chosen letters)</span><br><span class="line"></span><br><span class="line">rabbbit</span><br><span class="line">^^^^ ^^</span><br><span class="line">rabbbit</span><br><span class="line">^^ ^^^^</span><br><span class="line">rabbbit</span><br><span class="line">^^^ ^^^</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;babgbag&quot;, T &#x3D; &quot;bag&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">As shown below, there are 5 ways you can generate &quot;bag&quot; from S.</span><br><span class="line">(The caret symbol ^ means the chosen letters)</span><br><span class="line"></span><br><span class="line">babgbag</span><br><span class="line">^^ ^</span><br><span class="line">babgbag</span><br><span class="line">^^    ^</span><br><span class="line">babgbag</span><br><span class="line">^    ^^</span><br><span class="line">babgbag</span><br><span class="line">  ^  ^^</span><br><span class="line">babgbag</span><br><span class="line">    ^^^</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>典型的字符串匹配类动态规划</p>
<p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>][t.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= t.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()][t.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 114. Flatten Binary Tree to Linked List</title>
    <url>/LeetCode/LeetCode%20114.%20Flatten%20Binary%20Tree%20to%20Linked%20List-20190525.html</url>
    <content><![CDATA[<h2 id="114-Flatten-Binary-Tree-to-Linked-List"><a href="#114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="114. Flatten Binary Tree to Linked List"></a><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/" target="_blank" rel="noopener">114. Flatten Binary Tree to Linked List</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a binary tree, flatten it to a linked list in-place.</p>
<p>For example, given the following tree:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   5</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure>

<p>The flattened tree should look like:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        helper(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode[] helper(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeNode[]&#123;root, root&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode[] leftRes = helper(root.left);</span><br><span class="line">        TreeNode[] rightRes = helper(root.right);</span><br><span class="line">        root.left = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode right = root;</span><br><span class="line">        <span class="keyword">if</span> (leftRes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            right.right = leftRes[<span class="number">0</span>];</span><br><span class="line">            right = leftRes[<span class="number">1</span>];</span><br><span class="line">            right.right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightRes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            right.right = rightRes[<span class="number">0</span>];</span><br><span class="line">            right = rightRes[<span class="number">1</span>];</span><br><span class="line">            right.right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode[] &#123;root, right&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 113. Path Sum II</title>
    <url>/LeetCode/LeetCode%20113.%20Path%20Sum%20II-20190525.html</url>
    <content><![CDATA[<h2 id="113-Path-Sum-II"><a href="#113-Path-Sum-II" class="headerlink" title="113. Path Sum II"></a><a href="https://leetcode.com/problems/path-sum-ii/description/" target="_blank" rel="noopener">113. Path Sum II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<p>Given the below binary tree and <code>sum = 22</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \    &#x2F; \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure>

<p>Return:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        path.add(root.val);</span><br><span class="line">        pathHelper(root, sum - root.val, path, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pathHelper</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            path.add(root.left.val);</span><br><span class="line">            pathHelper(root.left, sum - root.left.val, path, result);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            path.add(root.right.val);</span><br><span class="line">            pathHelper(root.right, sum - root.right.val, path, result);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfsHelper(root, sum, result, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; one)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        one.add(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum == root.val) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(one));</span><br><span class="line">            one.remove(one.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfsHelper(root.left, sum - root.val, result, one);</span><br><span class="line">        dfsHelper(root.right, sum - root.val, result, one);</span><br><span class="line">        one.remove(one.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 112. Path Sum</title>
    <url>/LeetCode/LeetCode%20112.%20Path%20Sum-20190525.html</url>
    <content><![CDATA[<h3 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a><a href="https://leetcode.com/problems/path-sum/description/" target="_blank" rel="noopener">112. Path Sum</a></h3><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<p>Given the below binary tree and <code>sum = 22</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \      \</span><br><span class="line">7    2      1</span><br></pre></td></tr></table></figure>

<p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum == root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Language: <strong>Go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.Val == sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.Left, sum - root.Val) || hasPathSum(root.Right, sum - root.Val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Divide Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 111. Minimum Depth of Binary Tree</title>
    <url>/LeetCode/LeetCode%20111.%20Minimum%20Depth%20of%20Binary%20Tree-20190525.html</url>
    <content><![CDATA[<h2 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/" target="_blank" rel="noopener">111. Minimum Depth of Binary Tree</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<p><strong>Note:</strong>  A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>return its minimum  depth = 2.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       TreeNode left;</span></span><br><span class="line"><span class="comment"> *       TreeNode right;</span></span><br><span class="line"><span class="comment"> *       TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> minDepth(root.right) + <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> minDepth(root.left) + <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> Math.min(minDepth(root.left), minDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Divide Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 110. Balanced Binary Tree</title>
    <url>/LeetCode/LeetCode%20110.%20Balanced%20Binary%20Tree-20190522.html</url>
    <content><![CDATA[<h2 id="110-Balanced-Binary-Tree"><a href="#110-Balanced-Binary-Tree" class="headerlink" title="110. Balanced Binary Tree"></a><a href="https://leetcode.com/problems/balanced-binary-tree/description/" target="_blank" rel="noopener">110. Balanced Binary Tree</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as:</p>
<blockquote>
<p>a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>
</blockquote>
<p><strong>Example 1:</strong></p>
<p>Given the following tree <code>[3,9,20,null,null,15,7]</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>Return true.  </p>
<p><strong>Example 2:</strong></p>
<p>Given the following tree <code>[1,2,2,3,3,null,null,4,4]</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      1</span><br><span class="line">     &#x2F; \</span><br><span class="line">    2   2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  3   3</span><br><span class="line"> &#x2F; \</span><br><span class="line">4   4</span><br></pre></td></tr></table></figure>

<p>Return false.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> depth;</span><br><span class="line">        <span class="keyword">boolean</span> isBalanced;</span><br><span class="line">        Result(<span class="keyword">int</span> depth, <span class="keyword">boolean</span> isBalanced) &#123;</span><br><span class="line">            <span class="keyword">this</span>.depth = depth;</span><br><span class="line">            <span class="keyword">this</span>.isBalanced = isBalanced;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Result r = helper(root);</span><br><span class="line">        <span class="keyword">return</span> r.isBalanced;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">helper</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Result leftResult = helper(root.left);</span><br><span class="line">        Result rightResult = helper(root.right);</span><br><span class="line">        <span class="keyword">if</span> (leftResult.isBalanced &amp;&amp; rightResult.isBalanced </span><br><span class="line">            &amp;&amp; Math.abs(leftResult.depth - rightResult.depth) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(Math.max(leftResult.depth, rightResult.depth) + <span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = helper(root);</span><br><span class="line">        <span class="keyword">return</span> r != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = helper(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = helper(root.right);</span><br><span class="line">        <span class="keyword">if</span> (left == -<span class="number">1</span> || right == -<span class="number">1</span> || Math.abs(left - right) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Divide Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 109. Convert Sorted List to Binary Search Tree</title>
    <url>/LeetCode/LeetCode%20109.%20Convert%20Sorted%20List%20to%20Binary%20Search%20Tree-20190522.html</url>
    <content><![CDATA[<h2 id="109-Convert-Sorted-List-to-Binary-Search-Tree"><a href="#109-Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="109. Convert Sorted List to Binary Search Tree"></a><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/" target="_blank" rel="noopener">109. Convert Sorted List to Binary Search Tree</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the sorted linked list: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong><br>分治法，不使用dummyNode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(head.val);</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode center = <span class="keyword">new</span> TreeNode(slow.val);</span><br><span class="line">        <span class="comment">// 需要注意slow和head重合的情况</span></span><br><span class="line">        <span class="keyword">if</span> (slow != head) &#123;</span><br><span class="line">            center.left = sortedListToBST(head);</span><br><span class="line">        &#125;</span><br><span class="line">        center.right = sortedListToBST(slow.next);</span><br><span class="line">        <span class="keyword">return</span> center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
        <tag>Fast Slow Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 108. Convert Sorted Array to Binary Search Tree</title>
    <url>/LeetCode/LeetCode%20108.%20Convert%20Sorted%20Array%20to%20Binary%20Search%20Tree-20190522.html</url>
    <content><![CDATA[<h2 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/" target="_blank" rel="noopener">108. Convert Sorted Array to Binary Search Tree</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the sorted array: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        TreeNode r = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        r.left = helper(nums, start, mid - <span class="number">1</span>);</span><br><span class="line">        r.right = helper(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Divide Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 107. Binary Tree Level Order Traversal II</title>
    <url>/LeetCode/LeetCode%20107.%20Binary%20Tree%20Level%20Order%20Traversal%20II-20190522.html</url>
    <content><![CDATA[<h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">107. Binary Tree Level Order Traversal II</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>return its bottom-up level order traversal as:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode tmp = q.poll();</span><br><span class="line">                level.add(tmp.val);</span><br><span class="line">                <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.offer(tmp.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.offer(tmp.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(level);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 106. Construct Binary Tree from Inorder and Postorder Traversal</title>
    <url>/LeetCode/LeetCode%20106.%20Construct%20Binary%20Tree%20from%20Inorder%20and%20Postorder%20Traversal-20190522.html</url>
    <content><![CDATA[<h2 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="106. Construct Binary Tree from Inorder and Postorder Traversal"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/" target="_blank" rel="noopener">106. Construct Binary Tree from Inorder and Postorder Traversal</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given inorder and postorder traversal of a tree, construct the binary tree.</p>
<p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p>
<p>For example, given</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br><span class="line">postorder &#x3D; [9,15,7,20,3]</span><br></pre></td></tr></table></figure>

<p>Return the following binary tree:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder == <span class="keyword">null</span> || postorder == <span class="keyword">null</span> || inorder.length == <span class="number">0</span> || postorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = postorder.length;</span><br><span class="line">        <span class="keyword">return</span> helper(inorder, postorder, <span class="number">0</span>, len - <span class="number">1</span>, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> iStart, <span class="keyword">int</span> iEnd, <span class="keyword">int</span> pStart, <span class="keyword">int</span> pEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iStart &gt; iEnd || pStart &gt; pEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pivot = postorder[pEnd];</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pivot);</span><br><span class="line">        <span class="keyword">int</span> pivotIndex = index(inorder, iStart, iEnd, pivot);</span><br><span class="line">        <span class="keyword">int</span> leftLen = pivotIndex - iStart;</span><br><span class="line">        root.left = helper(inorder, postorder, iStart, pivotIndex - <span class="number">1</span>, pStart, pStart + leftLen - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(inorder, postorder,pivotIndex + <span class="number">1</span>, iEnd, pStart + leftLen, pEnd - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">index</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Map加速寻找index的过程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder == <span class="keyword">null</span> || postorder == <span class="keyword">null</span> || inorder.length == <span class="number">0</span> || postorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = postorder.length;</span><br><span class="line">        Map&lt;Integer, Integer&gt; indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            indexMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(inorder, postorder, <span class="number">0</span>, len - <span class="number">1</span>, <span class="number">0</span>, len - <span class="number">1</span>, indexMap);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> iStart, <span class="keyword">int</span> iEnd, <span class="keyword">int</span> pStart, <span class="keyword">int</span> pEnd, Map&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iStart &gt; iEnd || pStart &gt; pEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pivot = postorder[pEnd];</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pivot);</span><br><span class="line">        <span class="keyword">int</span> pivotIndex = map.get(pivot);</span><br><span class="line">        <span class="keyword">int</span> leftLen = pivotIndex - iStart;</span><br><span class="line">        root.left = helper(inorder, postorder, iStart, pivotIndex - <span class="number">1</span>, pStart, pStart + leftLen - <span class="number">1</span>, map);</span><br><span class="line">        root.right = helper(inorder, postorder,pivotIndex + <span class="number">1</span>, iEnd, pStart + leftLen, pEnd - <span class="number">1</span>, map);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <url>/LeetCode/LeetCode%20105.%20Construct%20Binary%20Tree%20from%20Preorder%20and%20Inorder%20Traversal-20190522.html</url>
    <content><![CDATA[<h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/" target="_blank" rel="noopener">105. Construct Binary Tree from Preorder and Inorder Traversal</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p>
<p>For example, given</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br></pre></td></tr></table></figure>

<p>Return the following binary tree:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>和第106题基本一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder == <span class="keyword">null</span> || preorder == <span class="keyword">null</span> || inorder.length == <span class="number">0</span> || preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = preorder.length;</span><br><span class="line">        Map&lt;Integer, Integer&gt; indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            indexMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(inorder, preorder, <span class="number">0</span>, len - <span class="number">1</span>, <span class="number">0</span>, len - <span class="number">1</span>, indexMap);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span> iStart, <span class="keyword">int</span> iEnd, <span class="keyword">int</span> pStart, <span class="keyword">int</span> pEnd, Map&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iStart &gt; iEnd || pStart &gt; pEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pivot = preorder[pStart];</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pivot);</span><br><span class="line">        <span class="keyword">int</span> pivotIndex = map.get(pivot);</span><br><span class="line">        <span class="keyword">int</span> leftLen = pivotIndex - iStart;</span><br><span class="line">        root.left = helper(inorder, preorder, iStart, pivotIndex - <span class="number">1</span>, pStart + <span class="number">1</span>, pStart + leftLen, map);</span><br><span class="line">        root.right = helper(inorder, preorder, pivotIndex + <span class="number">1</span>, iEnd, pStart + leftLen + <span class="number">1</span>, pEnd, map);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 104. Maximum Depth of Binary Tree</title>
    <url>/LeetCode/LeetCode%20104.%20Maximum%20Depth%20of%20Binary%20Tree-20190522.html</url>
    <content><![CDATA[<h2 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">104. Maximum Depth of Binary Tree</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>return its depth = 3.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Divide Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 103. Binary Tree Zigzag Level Order Traversal</title>
    <url>/LeetCode/LeetCode%20103.%20Binary%20Tree%20Zigzag%20Level%20Order%20Traversal-20190522.html</url>
    <content><![CDATA[<h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">103. Binary Tree Zigzag Level Order Traversal</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a binary tree, return the <em>zigzag level order</em> traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>return its zigzag level order traversal as:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       TreeNode left;</span></span><br><span class="line"><span class="comment"> *       TreeNode right;</span></span><br><span class="line"><span class="comment"> *       TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            q.offer(root);</span><br><span class="line">            <span class="keyword">boolean</span> leftToRight = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">                  <span class="keyword">int</span> size = q.size();</span><br><span class="line">                  List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                        TreeNode tmp = q.poll();</span><br><span class="line">                        level.add(tmp.val);</span><br><span class="line">                        <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                              q.offer(tmp.left);</span><br><span class="line">                       &#125;</span><br><span class="line">                        <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                              q.offer(tmp.right);</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (leftToRight) &#123;</span><br><span class="line">                        result.add(level);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Collections.reverse(level);</span><br><span class="line">                        result.add(level);</span><br><span class="line">                 &#125;</span><br><span class="line">                  leftToRight = !leftToRight;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 102. Binary Tree Level Order Traversal</title>
    <url>/LeetCode/LeetCode%20102.%20Binary%20Tree%20Level%20Order%20Traversal-20190522.html</url>
    <content><![CDATA[<h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/" target="_blank" rel="noopener">102. Binary Tree Level Order Traversal</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>return its level order traversal as:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode tmp = q.poll();</span><br><span class="line">                level.add(tmp.val);</span><br><span class="line">                <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.offer(tmp.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.offer(tmp.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 101. Symmetric Tree</title>
    <url>/LeetCode/LeetCode%20101.%20Symmetric%20Tree-20190522.html</url>
    <content><![CDATA[<h2 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a><a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. Symmetric Tree</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   2</span><br><span class="line"> &#x2F; \ &#x2F; \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure>

<p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong><br>Bonus points if you could solve it both recursively and iteratively.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> || right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.val == right.val &amp;&amp; helper(left.left, right.right) &amp;&amp; helper(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 100. Same Tree</title>
    <url>/LeetCode/LeetCode%20100.%20Same%20Tree-20190519.html</url>
    <content><![CDATA[<h2 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a><a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="noopener">100. Same Tree</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given two binary trees, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F;           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       TreeNode left;</span></span><br><span class="line"><span class="comment"> *       TreeNode right;</span></span><br><span class="line"><span class="comment"> *       TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span> || p.val != q.val) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Divide Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 99. Recover Binary Search Tree</title>
    <url>/LeetCode/LeetCode%2099.%20Recover%20Binary%20Search%20Tree-20190519.html</url>
    <content><![CDATA[<h2 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99. Recover Binary Search Tree"></a><a href="https://leetcode.com/problems/recover-binary-search-tree/" target="_blank" rel="noopener">99. Recover Binary Search Tree</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Two elements of a binary search tree (BST) are swapped by mistake.</p>
<p>Recover the tree without changing its structure.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,null,null,2]</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">  &#x2F;</span><br><span class="line"> 3</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">Output: [3,1,null,null,2]</span><br><span class="line"></span><br><span class="line">   3</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,1,4,null,null,2]</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">Output: [2,1,4,null,null,3]</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  3</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<ul>
<li>A solution using O(<em>n</em>) space is pretty straight forward.</li>
<li>Could you devise a constant space solution?</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode first, second, prev;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = <span class="keyword">new</span> TreeNode(Integer.MIN_VALUE);</span><br><span class="line">        inorder(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> tmp = first.val;</span><br><span class="line">        first.val = second.val;</span><br><span class="line">        second.val = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span> &amp;&amp; root.val &lt;= prev.val) &#123;</span><br><span class="line">            first = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (first != <span class="keyword">null</span> &amp;&amp; root.val &lt;= prev.val) &#123;</span><br><span class="line">            second = root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        prev = root;</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 98. Validate Binary Search Tree</title>
    <url>/LeetCode/LeetCode%2098.%20Validate%20Binary%20Search%20Tree-20190519.html</url>
    <content><![CDATA[<h2 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/description/" target="_blank" rel="noopener">98. Validate Binary Search Tree</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>
<p>Assume a BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The input is: [5,1,4,null,null,3,6]. The root node&#39;s value</span><br><span class="line">              is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p><strong>递归法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       TreeNode left;</span></span><br><span class="line"><span class="comment"> *       TreeNode right;</span></span><br><span class="line"><span class="comment"> *       TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> validHelper(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validHelper</span><span class="params">(TreeNode root, <span class="keyword">long</span> minVal, <span class="keyword">long</span> maxVal)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.val &gt;= maxVal || root.val &lt;= minVal) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> validHelper(root.left, minVal, root.val) &amp;&amp; validHelper(root.right, root.val, maxVal);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>中序遍历法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> prev = Long.MIN_VALUE;</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty() || cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dq.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = dq.pop();</span><br><span class="line">                <span class="keyword">if</span> (cur.val &lt;= prev) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev = cur.val;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 97. Interleaving String</title>
    <url>/LeetCode/LeetCode%2097.%20Interleaving%20String-20190519.html</url>
    <content><![CDATA[<h2 id="97-Interleaving-String"><a href="#97-Interleaving-String" class="headerlink" title="97. Interleaving String"></a><a href="https://leetcode.com/problems/interleaving-string/" target="_blank" rel="noopener">97. Interleaving String</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given <em>s1</em>, <em>s2</em>, <em>s3</em>, find whether <em>s3</em> is formed by the interleaving of <em>s1</em> and <em>s2</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;aabcc&quot;, s2 &#x3D; &quot;dbbca&quot;, s3 &#x3D; &quot;aadbbcbcac&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;aabcc&quot;, s2 &#x3D; &quot;dbbca&quot;, s3 &#x3D; &quot;aadbbbaccc&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="keyword">null</span> || s2 == <span class="keyword">null</span> || s3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s2.equals(s3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.equals(s3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(s1, <span class="number">0</span>, s2, <span class="number">0</span>, s3, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(String s1, <span class="keyword">int</span> i1, String s2, <span class="keyword">int</span> i2, String s3, <span class="keyword">int</span> i3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i3 &gt;= s3.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (i1 &lt; s1.length() &amp;&amp; s1.charAt(i1) == s3.charAt(i3)) &#123;</span><br><span class="line">            result = result || helper(s1, i1 + <span class="number">1</span>, s2, i2, s3, i3 + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i2 &lt; s2.length() &amp;&amp; s2.charAt(i2) == s3.charAt(i3)) &#123;</span><br><span class="line">            result = result || helper(s1, i1, s2, i2 + <span class="number">1</span>, s3, i3 + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s3.length() != s1.length() + s2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> dp[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[s1.length() + <span class="number">1</span>][s2.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= s2.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] &amp;&amp; s2.charAt(j - <span class="number">1</span>) == s3.charAt(i + j - <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] &amp;&amp; s1.charAt(i - <span class="number">1</span>) == s3.charAt(i + j - <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = (dp[i - <span class="number">1</span>][j] &amp;&amp; s1.charAt(i - <span class="number">1</span>) == s3.charAt(i + j - <span class="number">1</span>)) || (dp[i][j - <span class="number">1</span>] &amp;&amp; s2.charAt(j - <span class="number">1</span>) == s3.charAt(i + j - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s1.length()][s2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 96. Unique Binary Search Trees</title>
    <url>/LeetCode/LeetCode%2096.%20Unique%20Binary%20Search%20Trees-20190519.html</url>
    <content><![CDATA[<h2 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a><a href="https://leetcode.com/problems/unique-binary-search-trees/description/" target="_blank" rel="noopener">96. Unique Binary Search Trees</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given <em>n</em>, how many structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n &#x3D; 3, there are a total of 5 unique BST&#39;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       &#x2F;     &#x2F;      &#x2F; \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    &#x2F;     &#x2F;       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i] += dp[j - <span class="number">1</span>] * dp[i - j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 95. Unique Binary Search Trees II</title>
    <url>/LeetCode/LeetCode%2095.%20Unique%20Binary%20Search%20Trees%20II-20190519.html</url>
    <content><![CDATA[<h2 id="95-Unique-Binary-Search-Trees-II"><a href="#95-Unique-Binary-Search-Trees-II" class="headerlink" title="95. Unique Binary Search Trees II"></a><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="noopener">95. Unique Binary Search Trees II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an integer <em>n</em>, generate all structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&#39;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       &#x2F;     &#x2F;      &#x2F; \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    &#x2F;     &#x2F;       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> generate(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">generate</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            nodes.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> nodes;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            nodes.add(<span class="keyword">new</span> TreeNode(start));</span><br><span class="line">            <span class="keyword">return</span> nodes;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; left = generate(start, i - <span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; right = generate(i + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">for</span> (TreeNode l : left) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode r : right) &#123;</span><br><span class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    root.left = l;</span><br><span class="line">                    root.right = r;</span><br><span class="line">                    nodes.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 94. Binary Tree Inorder Traversal</title>
    <url>/LeetCode/LeetCode%2094.%20Binary%20Tree%20Inorder%20Traversal-20190519.html</url>
    <content><![CDATA[<h2 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="noopener">94. Binary Tree Inorder Traversal</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       TreeNode left;</span></span><br><span class="line"><span class="comment"> *       TreeNode right;</span></span><br><span class="line"><span class="comment"> *       TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            traverse(root, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 递归版本</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            traverse(root.left, result);</span><br><span class="line">            result.add(root.val);</span><br><span class="line">            traverse(root.right, result);</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非递归版本</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traverseIterative</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                result.add(root.val);</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 93. Restore IP Addresses</title>
    <url>/LeetCode/LeetCode%2093.%20Restore%20IP%20Addresses-20190519.html</url>
    <content><![CDATA[<h2 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93. Restore IP Addresses"></a><a href="https://leetcode.com/problems/restore-ip-addresses/" target="_blank" rel="noopener">93. Restore IP Addresses</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;25525511135&quot;</span><br><span class="line">Output: [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || s.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            dfsHelper(s, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;(), result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(String s, <span class="keyword">int</span> index, List&lt;String&gt; ip, List&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ip.size() == <span class="number">4</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (index == s.length()) &#123;</span><br><span class="line">                        result.add(String.join(<span class="string">"."</span>, ip));</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; Math.min(index + <span class="number">3</span>, s.length()); i++) &#123;</span><br><span class="line">                  cur = cur * <span class="number">10</span> + (s.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">                  <span class="keyword">if</span> (cur &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  ip.add(String.valueOf(cur));</span><br><span class="line">                  dfsHelper(s, i + <span class="number">1</span>, ip, result);</span><br><span class="line">                  ip.remove(ip.size() - <span class="number">1</span>);</span><br><span class="line">                  </span><br><span class="line">                  <span class="keyword">if</span> (i == index &amp;&amp; s.charAt(i) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 92. Reverse Linked List II</title>
    <url>/LeetCode/LeetCode%2092.%20Reverse%20Linked%20List%20II-20190516.html</url>
    <content><![CDATA[<h2 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a><a href="https://leetcode.com/problems/reverse-linked-list-ii/description/" target="_blank" rel="noopener">92. Reverse Linked List II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Reverse a linked list from position <em>m</em> to <em>n</em>. Do it in one-pass.</p>
<p>*<em>Note: *</em>1 ≤ <em>m</em> ≤ <em>n</em> ≤ length of list.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m &#x3D; 2, n &#x3D; 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || m &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span> || m &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode prev = dummy;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode start = prev;</span><br><span class="line">        ListNode end = cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n - m + <span class="number">1</span>); i++) &#123;</span><br><span class="line">            ListNode next = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        start.next = prev;</span><br><span class="line">        end.next = cur;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 91. Decode Ways</title>
    <url>/LeetCode/LeetCode%2091.%20Decode%20Ways-20190516.html</url>
    <content><![CDATA[<h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a><a href="https://leetcode.com/problems/decode-ways/description/" target="_blank" rel="noopener">91. Decode Ways</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>A message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;A&#39; -&gt; 1</span><br><span class="line">&#39;B&#39; -&gt; 2</span><br><span class="line">...</span><br><span class="line">&#39;Z&#39; -&gt; 26</span><br></pre></td></tr></table></figure>

<p>Given a <strong>non-empty</strong> string containing only digits, determine the total number of ways to decode it.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:  It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;226&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:  It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>从后往前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> n = s.length();</span><br><span class="line">            <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">2</span>];</span><br><span class="line">            dp[n] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (s.charAt(i) != <span class="string">'0'</span>) &#123;</span><br><span class="line">                        dp[i] = dp[i + <span class="number">1</span>];</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> d = (s.charAt(i) - <span class="string">'0'</span>) * <span class="number">10</span> + s.charAt(i + <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">                        <span class="keyword">if</span> (d &gt;= <span class="number">10</span> &amp;&amp; d &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">                              dp[i] += dp[i + <span class="number">2</span>];</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">            </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从前往后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || s.equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        count[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) != <span class="string">'1'</span> &amp;&amp; s.charAt(i - <span class="number">1</span>) != <span class="string">'2'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count[i + <span class="number">1</span>] = count[i - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == <span class="string">'1'</span> || (s.charAt(i - <span class="number">1</span>) == <span class="string">'2'</span> &amp;&amp; s.charAt(i) &gt;= <span class="string">'0'</span> &amp;&amp; s.charAt(i) &lt;= <span class="string">'6'</span>)) &#123;</span><br><span class="line">                count[i + <span class="number">1</span>] = count[i] + count[i - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count[i + <span class="number">1</span>] = count[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 90. Subsets II</title>
    <url>/LeetCode/LeetCode%2090.%20Subsets%20II-20190513.html</url>
    <content><![CDATA[<h2 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a><a href="https://leetcode.com/problems/subsets-ii/description/" target="_blank" rel="noopener">90. Subsets II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a collection of integers that might contain duplicates, <strong><em>nums</em></strong>, return all possible subsets (the power set).</p>
<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            dfsHelper(nums, result, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; subset, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(subset));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (i != index &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  subset.add(nums[i]);</span><br><span class="line">                  dfsHelper(nums, result, subset, i + <span class="number">1</span>);</span><br><span class="line">                  subset.remove(subset.size() - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 89. Gray Code</title>
    <url>/LeetCode/LeetCode%2089.%20Gray%20Code-20190513.html</url>
    <content><![CDATA[<h2 id="89-Gray-Code"><a href="#89-Gray-Code" class="headerlink" title="89. Gray Code"></a><a href="https://leetcode.com/problems/gray-code/" target="_blank" rel="noopener">89. Gray Code</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>
<p>Given a non-negative integer <em>n</em> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: [0,1,3,2]</span><br><span class="line">Explanation:</span><br><span class="line">00 - 0</span><br><span class="line">01 - 1</span><br><span class="line">11 - 3</span><br><span class="line">10 - 2</span><br><span class="line"></span><br><span class="line">For a given n, a gray code sequence may not be uniquely defined.</span><br><span class="line">For example, [0,2,3,1] is also a valid gray code sequence.</span><br><span class="line"></span><br><span class="line">00 - 0</span><br><span class="line">10 - 2</span><br><span class="line">11 - 3</span><br><span class="line">01 - 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 0</span><br><span class="line">Output: [0]</span><br><span class="line">Explanation: We define the gray code sequence to begin with 0.</span><br><span class="line">             A gray code sequence of n has size &#x3D; 2n, which for n &#x3D; 0 the size is 20 &#x3D; 1.</span><br><span class="line">             Therefore, for n &#x3D; 0 the gray code sequence is [0].</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">grayCode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1</span> &lt;&lt; n];</span><br><span class="line">        visited[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        dfsHelper(result, visited, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfsHelper</span><span class="params">(List&lt;Integer&gt; result, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.size() == (<span class="number">1</span> &lt;&lt; n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> last = result.get(result.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cur = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cur = last ^ (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">if</span> (!visited[cur]) &#123;</span><br><span class="line">                result.add(cur);</span><br><span class="line">                visited[cur] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (dfsHelper(result, visited, n)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[cur] = <span class="keyword">false</span>;</span><br><span class="line">                result.remove(result.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 88. Merge Sorted Array</title>
    <url>/LeetCode/LeetCode%2088.%20Merge%20Sorted%20Array-20190513.html</url>
    <content><![CDATA[<h2 id="88-Merge-Sorted-Array"><a href="#88-Merge-Sorted-Array" class="headerlink" title="88. Merge Sorted Array"></a><a href="https://leetcode.com/problems/merge-sorted-array/description/" target="_blank" rel="noopener">88. Merge Sorted Array</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li>
<li>You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>
</ul>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1 == <span class="keyword">null</span> || nums2 == <span class="keyword">null</span> || nums1.length == <span class="number">0</span> || nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = m + n - <span class="number">1</span>;</span><br><span class="line">        m--;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">while</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m &gt;= <span class="number">0</span> &amp;&amp; nums1[m] &gt;= nums2[n]) &#123;</span><br><span class="line">                nums1[index--] = nums1[m--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[index--] = nums2[n--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 86. Partition List</title>
    <url>/LeetCode/LeetCode%2086.%20Partition%20List-20190513.html</url>
    <content><![CDATA[<h2 id="86-Partition-List"><a href="#86-Partition-List" class="headerlink" title="86. Partition List"></a><a href="https://leetcode.com/problems/partition-list/description/" target="_blank" rel="noopener">86. Partition List</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a linked list and a value <em>x</em>, partition it such that all nodes less than <em>x</em> come before nodes greater than or equal to <em>x</em>.</p>
<p>You should preserve the original relative order of the nodes in each of the two partitions.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x &#x3D; 3</span><br><span class="line">Output: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       ListNode next;</span></span><br><span class="line"><span class="comment"> *       ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            ListNode less = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            ListNode lessEnd = less;</span><br><span class="line">            ListNode large = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            ListNode largeEnd = large;</span><br><span class="line">            <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                        lessEnd.next = head;</span><br><span class="line">                        lessEnd = head;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        largeEnd.next = head;</span><br><span class="line">                        largeEnd = head;</span><br><span class="line">                 &#125;</span><br><span class="line">                  head = head.next;</span><br><span class="line">           &#125;</span><br><span class="line">            lessEnd.next = large.next;</span><br><span class="line">            largeEnd.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> less.next;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 85. Maximal Rectangle</title>
    <url>/LeetCode/LeetCode%2085.%20Maximal%20Rectangle-20190513.html</url>
    <content><![CDATA[<h2 id="85-Maximal-Rectangle"><a href="#85-Maximal-Rectangle" class="headerlink" title="85. Maximal Rectangle"></a><a href="https://leetcode.com/problems/maximal-rectangle/description/" target="_blank" rel="noopener">85. Maximal Rectangle</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">            <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">int</span>[][] dpLeft = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">            <span class="keyword">int</span>[][] dpUp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                  dpLeft[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                  dpUp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                  max = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (matrix[<span class="number">0</span>][i] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        dpLeft[<span class="number">0</span>][i] = dpLeft[<span class="number">0</span>][i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                        dpUp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">                        max = Math.max(dpLeft[<span class="number">0</span>][i], max);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                        dpLeft[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                        dpUp[i][<span class="number">0</span>] = dpUp[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                        max = Math.max(dpUp[i][<span class="number">0</span>], max);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (matrix[i][j] != <span class="string">'1'</span>) &#123;</span><br><span class="line">                              <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                        dpLeft[i][j] = dpLeft[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                        dpUp[i][j] = dpUp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">int</span> len = dpLeft[i][j];</span><br><span class="line">                        <span class="keyword">int</span> minHeight = dpUp[i][j];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; k++) &#123;</span><br><span class="line">                              minHeight = Math.min(minHeight, dpUp[i][j - k]);</span><br><span class="line">                              max = Math.max(minHeight * (k + <span class="number">1</span>), max);</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单调栈解法"><a href="#单调栈解法" class="headerlink" title="单调栈解法"></a>单调栈解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[] heights = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    heights[j] += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    heights[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(maxRectangle(heights), max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">maxRectangle</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.peek() != -<span class="number">1</span> &amp;&amp; heights[i] &lt; heights[stack.peek()]) &#123;</span><br><span class="line">                max = Math.max(max, heights[stack.pop()] * (i - stack.peek() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (stack.peek() != -<span class="number">1</span>) &#123;</span><br><span class="line">            max = Math.max(max, heights[stack.pop()] * (heights.length - stack.peek() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
        <tag>Monotonous Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 84. Largest Rectangle in Histogram</title>
    <url>/LeetCode/LeetCode%2084.%20Largest%20Rectangle%20in%20Histogram-20190513.html</url>
    <content><![CDATA[<h2 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/" target="_blank" rel="noopener">84. Largest Rectangle in Histogram</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given <em>n</em> non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/histogram.png" alt=""><br><small style="display: inline;">Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</small></p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png" alt=""><br><small style="display: inline;">The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</small></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,1,5,6,2,3]</span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (heights == <span class="keyword">null</span> || heights.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> largestArea = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">int</span> minHeight = Integer.MAX_VALUE;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; heights.length; j++) &#123;</span><br><span class="line">                        minHeight = Math.min(heights[j], minHeight);</span><br><span class="line">                        largestArea = Math.max(largestArea, minHeight * (j - i + <span class="number">1</span>));</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> largestArea;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateArea</span><span class="params">(<span class="keyword">int</span>[] heights, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minIndex = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heights[i] &lt; heights[minIndex]) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(heights[minIndex] * (end - start + <span class="number">1</span>), Math.max(calculateArea(heights, start, minIndex - <span class="number">1</span>),</span><br><span class="line">                                                                       calculateArea(heights, minIndex + <span class="number">1</span>, end)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculateArea(heights, <span class="number">0</span>, heights.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>维护一个单调递增栈，逐个将元素 push 到栈里。push 进去之前先把 &gt;= 自己的元素 pop 出来。<br>每次从栈中 pop 出一个数的时候，就找到了往左数比它小的第一个数（当前栈顶）和往右数比它小的第一个数（即将入栈的数），<br>从而可以计算出这两个数中间的部分宽度 * 被pop出的数，就是以这个被pop出来的数为最低的那个直方向两边展开的最大矩阵面积。<br>因为要计算两个数中间的宽度，因此放在 stack 里的是每个数的下标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heights == <span class="keyword">null</span> || heights.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = i == heights.length ? -<span class="number">1</span> : heights[i];</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[stack.peek()] &gt; cur) &#123;</span><br><span class="line">                <span class="keyword">int</span> h = heights[stack.pop()];</span><br><span class="line">                <span class="keyword">int</span> w = stack.isEmpty() ? i : i - stack.peek() - <span class="number">1</span>;</span><br><span class="line">                max = Math.max(max, h * w);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">## [84\. Largest Rectangle in Histogram](https://leetcode.com/problems/largest-rectangle-in-histogram/description/)</span><br><span class="line"></span><br><span class="line">Difficulty:: **Hard**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Given _n_ non-negative integers representing the histogram<span class="string">'s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://assets.leetcode.com/uploads/2018/10/12/histogram.png)  </span></span><br><span class="line"><span class="string">&lt;small style="display: inline;"&gt;Above is a histogram where width of each bar is 1, given height = `[2,1,5,6,2,3]`.&lt;/small&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png)  </span></span><br><span class="line"><span class="string">&lt;small style="display: inline;"&gt;The largest rectangle is shown in the shaded area, which has area = `10` unit.&lt;/small&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Example:**</span></span><br></pre></td></tr></table></figure>
<p>Input: [2,1,5,6,2,3]<br>Output: 10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### Solution</span><br><span class="line"></span><br><span class="line">Language: **Java**</span><br><span class="line"></span><br><span class="line">#### 暴力法</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">class Solution &#123;</span><br><span class="line">      public int largestRectangleArea(int[] heights) &#123;</span><br><span class="line">            if (heights &#x3D;&#x3D; null || heights.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                  return 0;</span><br><span class="line">           &#125;</span><br><span class="line">            int largestArea &#x3D; 0;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; heights.length; i++) &#123;</span><br><span class="line">                  int minHeight &#x3D; Integer.MAX_VALUE;</span><br><span class="line">                  for (int j &#x3D; i; j &lt; heights.length; j++) &#123;</span><br><span class="line">                        minHeight &#x3D; Math.min(heights[j], minHeight);</span><br><span class="line">                        largestArea &#x3D; Math.max(largestArea, minHeight * (j - i + 1));</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            return largestArea;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分治法-1"><a href="#分治法-1" class="headerlink" title="分治法"></a>分治法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateArea</span><span class="params">(<span class="keyword">int</span>[] heights, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minIndex = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heights[i] &lt; heights[minIndex]) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(heights[minIndex] * (end - start + <span class="number">1</span>), Math.max(calculateArea(heights, start, minIndex - <span class="number">1</span>),</span><br><span class="line">                                                                       calculateArea(heights, minIndex + <span class="number">1</span>, end)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculateArea(heights, <span class="number">0</span>, heights.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单调栈-1"><a href="#单调栈-1" class="headerlink" title="单调栈"></a>单调栈</h3><p>维护一个单调递增栈，逐个将元素 push 到栈里。push 进去之前先把 &gt;= 自己的元素 pop 出来。<br>每次从栈中 pop 出一个数的时候，就找到了往左数比它小的第一个数（当前栈顶）和往右数比它小的第一个数（即将入栈的数），<br>从而可以计算出这两个数中间的部分宽度 * 被pop出的数，就是以这个被pop出来的数为最低的那个直方向两边展开的最大矩阵面积。<br>因为要计算两个数中间的宽度，因此放在 stack 里的是每个数的下标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heights == <span class="keyword">null</span> || heights.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = i == heights.length ? -<span class="number">1</span> : heights[i];</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[stack.peek()] &gt; cur) &#123;</span><br><span class="line">                <span class="keyword">int</span> h = heights[stack.pop()];</span><br><span class="line">                <span class="keyword">int</span> w = stack.isEmpty() ? i : i - stack.peek() - <span class="number">1</span>;</span><br><span class="line">                max = Math.max(max, h * w);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heights == <span class="keyword">null</span> || heights.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.peek() != -<span class="number">1</span> &amp;&amp; heights[i] &lt; heights[stack.peek()]) &#123;</span><br><span class="line">                max = Math.max(max, heights[stack.pop()] * (i - stack.peek() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (stack.peek() != -<span class="number">1</span>) &#123;</span><br><span class="line">            max = Math.max(max, heights[stack.pop()] * (heights.length - stack.peek() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>```</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Hard</tag>
        <tag>Monotonous Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 83. Remove Duplicates from Sorted List</title>
    <url>/LeetCode/LeetCode%2083.%20Remove%20Duplicates%20from%20Sorted%20List-20190513.html</url>
    <content><![CDATA[<h2 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. Remove Duplicates from Sorted List</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a sorted linked list, delete all duplicates such that each element appear only <em>once</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2</span><br><span class="line">Output: 1-&gt;2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next.val == cur.val) &#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 82. Remove Duplicates from Sorted List II</title>
    <url>/LeetCode/LeetCode%2082.%20Remove%20Duplicates%20from%20Sorted%20List%20II-20190513.html</url>
    <content><![CDATA[<h2 id="82-Remove-Duplicates-from-Sorted-List-II"><a href="#82-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="82. Remove Duplicates from Sorted List II"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">82. Remove Duplicates from Sorted List II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <em>distinct</em> numbers from the original list.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">Output: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">Output: 2-&gt;3</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode prev = dummy;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.next != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val) &#123;</span><br><span class="line">                cur = head.val;</span><br><span class="line">                <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; head.val == cur) &#123;</span><br><span class="line">                    head = head.next;</span><br><span class="line">                &#125;</span><br><span class="line">                prev.next = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = head;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 81. Search in Rotated Sorted Array II</title>
    <url>/LeetCode/LeetCode%2081.%20Search%20in%20Rotated%20Sorted%20Array%20II-20190513.html</url>
    <content><![CDATA[<h2 id="81-Search-in-Rotated-Sorted-Array-II"><a href="#81-Search-in-Rotated-Sorted-Array-II" class="headerlink" title="81. Search in Rotated Sorted Array II"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/" target="_blank" rel="noopener">81. Search in Rotated Sorted Array II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>[0,0,1,2,2,5,6]</code> might become <code>[2,5,6,0,0,1,2]</code>).</p>
<p>You are given a target value to search. If found in the array return <code>true</code>, otherwise return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 0</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 3</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<ul>
<li>This is a follow up problem to , where <code>nums</code> may contain duplicates.</li>
<li>Would this affect the run-time complexity? How and why?</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>这个问题在面试中不会让实现完整程序<br>只需要举出能够最坏情况的数据是 [1,1,1,1… 1] 里有一个0即可。<br>在这种情况下是无法使用二分法的，复杂度是O(n)<br>因此写个for循环最坏也是O(n)，那就写个for循环就好了<br>如果你觉得，不是每个情况都是最坏情况，你想用二分法解决不是最坏情况的情况，那你就写一个二分吧。<br>反正面试考的不是你在这个题上会不会用二分法。这个题的考点是你想不想得到最坏情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 81. Search in Rotated Sorted Array II</title>
    <url>/LeetCode/LeetCode%2087.%20Search%20in%20Rotated%20Sorted%20Array%20II-20190513.html</url>
    <content><![CDATA[<h2 id="81-Search-in-Rotated-Sorted-Array-II"><a href="#81-Search-in-Rotated-Sorted-Array-II" class="headerlink" title="81. Search in Rotated Sorted Array II"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/" target="_blank" rel="noopener">81. Search in Rotated Sorted Array II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>[0,0,1,2,2,5,6]</code> might become <code>[2,5,6,0,0,1,2]</code>).</p>
<p>You are given a target value to search. If found in the array return <code>true</code>, otherwise return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 0</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 3</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<ul>
<li>This is a follow up problem to  , where <code>nums</code> may contain duplicates.</li>
<li>Would this affect the run-time complexity? How and why?</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>这个问题在面试中不会让实现完整程序<br>只需要举出能够最坏情况的数据是 [1,1,1,1… 1] 里有一个0即可。<br>在这种情况下是无法使用二分法的，复杂度是O(n)<br>因此写个for循环最坏也是O(n)，那就写个for循环就好了<br>如果你觉得，不是每个情况都是最坏情况，你想用二分法解决不是最坏情况的情况，那你就写一个二分吧。<br>反正面试考的不是你在这个题上会不会用二分法。这个题的考点是你想不想得到最坏情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (i == target) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 80. Remove Duplicates from Sorted Array II</title>
    <url>/LeetCode/LeetCode%2080.%20Remove%20Duplicates%20from%20Sorted%20Array%20II-20190512.html</url>
    <content><![CDATA[<h2 id="80-Remove-Duplicates-from-Sorted-Array-II"><a href="#80-Remove-Duplicates-from-Sorted-Array-II" class="headerlink" title="80. Remove Duplicates from Sorted Array II"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="noopener">80. Remove Duplicates from Sorted Array II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a sorted array <em>nums</em>, remove the duplicates such that duplicates appeared at most  <em>twice</em> and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> with O(1) extra memory.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1,1,1,2,2,3],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,0,1,1,1,1,2,3,3],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 7, with the first seven elements of nums being modified to  0, 0, 1, 1, 2, 3 and  3 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what values are set beyond  the returned length.</span><br></pre></td></tr></table></figure>

<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span><br><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">      print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        count = <span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (count &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        nums[cur++] = nums[i];</span><br><span class="line">                 &#125;</span><br><span class="line">                  </span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 79. Word Search</title>
    <url>/LeetCode/LeetCode%2079.%20Word%20Search-20190512.html</url>
    <content><![CDATA[<h2 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79. Word Search"></a><a href="https://leetcode.com/problems/word-search/" target="_blank" rel="noopener">79. Word Search</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a 2D board and a word, find if the word exists in the grid.</p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">board &#x3D;</span><br><span class="line">[</span><br><span class="line">  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],</span><br><span class="line">  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],</span><br><span class="line">  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Given word &#x3D; &quot;ABCCED&quot;, return true.</span><br><span class="line">Given word &#x3D; &quot;SEE&quot;, return true.</span><br><span class="line">Given word &#x3D; &quot;ABCB&quot;, return false.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || word == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> word.length() == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (search(board, i, j, word, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] dx = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] dy = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j, String word, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != word.charAt(cur)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur == word.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> tmp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = i + dx[k];</span><br><span class="line">            <span class="keyword">int</span> newY = j + dy[k];</span><br><span class="line">            <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; board.length &amp;&amp; </span><br><span class="line">                newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; board[<span class="number">0</span>].length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (search(board, newX, newY, word, cur + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j] = tmp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 78. Subsets</title>
    <url>/LeetCode/LeetCode%2078.%20Subsets-20190512.html</url>
    <content><![CDATA[<h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a><a href="https://leetcode.com/problems/subsets/description/" target="_blank" rel="noopener">78. Subsets</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p>
<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        dfsHelper(nums, result, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; subset, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(subset));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">            subset.add(nums[i]);</span><br><span class="line">            dfsHelper(nums, result, subset, i + <span class="number">1</span>);</span><br><span class="line">            subset.remove(subset.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用位运算</strong><br>一共有$2^n$种可能性，如果用一个32进制数来确定一个数是否存在，就直接遍历0到n位全1的数即可。这种情况建立在nums不会超过31个的基础上，因为数字个数多了的话子集数太大，所以一般不会超过这个数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            max = (max &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; subset = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tmp &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    subset.add(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                tmp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(subset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 77. Combinations</title>
    <url>/LeetCode/LeetCode%2077.%20Combinations-20190512.html</url>
    <content><![CDATA[<h2 id="77-Combinations"><a href="#77-Combinations" class="headerlink" title="77. Combinations"></a><a href="https://leetcode.com/problems/combinations/" target="_blank" rel="noopener">77. Combinations</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of <em>k</em> numbers out of 1 … <em>n</em>.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4, k &#x3D; 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        helper(<span class="number">1</span>, n, k, result, <span class="keyword">new</span> ArrayList&lt;&gt;(k));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> n, <span class="keyword">int</span> k, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; one)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(one));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur; i &lt;= n; i++) &#123;</span><br><span class="line">            one.add(i);</span><br><span class="line">            helper(i + <span class="number">1</span>, n, k - <span class="number">1</span>, result, one);</span><br><span class="line">            one.remove(one.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        helper(<span class="number">1</span>, n, k, result, <span class="keyword">new</span> <span class="keyword">int</span>[k], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> n, <span class="keyword">int</span> k, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span>[] one, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;(k);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> a : one) &#123;</span><br><span class="line">                tmp.add(a);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur; i &lt;= n; i++) &#123;</span><br><span class="line">            one[index++] = i;</span><br><span class="line">            helper(i + <span class="number">1</span>, n, k - <span class="number">1</span>, result, one, index);</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 76. Minimum Window Substring</title>
    <url>/LeetCode/LeetCode%2076.%20Minimum%20Window%20Substring-20190512.html</url>
    <content><![CDATA[<h2 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a><a href="https://leetcode.com/problems/minimum-window-substring/description/" target="_blank" rel="noopener">76. Minimum Window Substring</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;ADOBECODEBANC&quot;, T &#x3D; &quot;ABC&quot;</span><br><span class="line">Output: &quot;BANC&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>If there is no such window in S that covers all characters in T, return the empty string <code>&quot;&quot;</code>.</li>
<li>If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || t == <span class="keyword">null</span> || t.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] targetMap = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span>[] sourceMap = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            targetMap[t.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        String minString = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; s.length() &amp;&amp; !isValid(sourceMap, targetMap)) &#123;</span><br><span class="line">                sourceMap[s.charAt(j)]++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; j - i &amp;&amp; isValid(sourceMap, targetMap)) &#123;</span><br><span class="line">                minString = s.substring(i, j);</span><br><span class="line">                min = j - i;</span><br><span class="line">            &#125;</span><br><span class="line">            sourceMap[s.charAt(i)]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minString;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span>[] source, <span class="keyword">int</span>[] target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; target.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target[i] &gt; source[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 75. Sort Colors</title>
    <url>/LeetCode/LeetCode%2075.%20Sort%20Colors-20190512.html</url>
    <content><![CDATA[<h2 id="75-Sort-Colors"><a href="#75-Sort-Colors" class="headerlink" title="75. Sort Colors"></a><a href="https://leetcode.com/problems/sort-colors/description/" target="_blank" rel="noopener">75. Sort Colors</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given an array with <em>n</em> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p><strong>Note:</strong>  You are not suppose to use the library’s sort function for this problem.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<ul>
<li>A rather straight forward solution is a two-pass algorithm using counting sort.<br>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.</li>
<li>Could you come up with a  one-pass algorithm using only constant space?</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[cur] == <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums, cur++, start++);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[cur] == <span class="number">2</span>) &#123;</span><br><span class="line">                swap(nums, cur, end--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 74. Search a 2D Matrix</title>
    <url>/LeetCode/LeetCode%2074.%20Search%20a%202D%20Matrix-20190512.html</url>
    <content><![CDATA[<h2 id="74-Search-a-2D-Matrix"><a href="#74-Search-a-2D-Matrix" class="headerlink" title="74. Search a 2D Matrix"></a><a href="https://leetcode.com/problems/search-a-2d-matrix/description/" target="_blank" rel="noopener">74. Search a 2D Matrix</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted from left to right.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">matrix &#x3D; [</span><br><span class="line">  [1,   3,  5,  7],</span><br><span class="line">  [10, 11, 16, 20],</span><br><span class="line">  [23, 30, 34, 50]</span><br><span class="line">]</span><br><span class="line">target &#x3D; 3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">matrix &#x3D; [</span><br><span class="line">  [1,   3,  5,  7],</span><br><span class="line">  [10, 11, 16, 20],</span><br><span class="line">  [23, 30, 34, 50]</span><br><span class="line">]</span><br><span class="line">target &#x3D; 13</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong><br><strong>两次二分法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &gt; target) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (matrix[end][<span class="number">0</span>] &lt;= target) &#123;</span><br><span class="line">            row = end;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            row = start;</span><br><span class="line">        &#125;</span><br><span class="line">        start = <span class="number">0</span>;</span><br><span class="line">        end = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[row][mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[row][mid] &gt; target) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix[row][start] == target || matrix[row][end] == target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>不使用二分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> c = matrix[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="number">0</span> &amp;&amp; r &lt; matrix.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[r][c] &gt; target) &#123;</span><br><span class="line">                c--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[r][c] &lt; target) &#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 73. Set Matrix Zeroes</title>
    <url>/LeetCode/LeetCode%2073.%20Set%20Matrix%20Zeroes-20190512.html</url>
    <content><![CDATA[<h2 id="73-Set-Matrix-Zeroes"><a href="#73-Set-Matrix-Zeroes" class="headerlink" title="73. Set Matrix Zeroes"></a><a href="https://leetcode.com/problems/set-matrix-zeroes/" target="_blank" rel="noopener">73. Set Matrix Zeroes</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [1,0,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [0,1,2,0],</span><br><span class="line">  [3,4,5,2],</span><br><span class="line">  [1,3,1,5]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [0,0,0,0],</span><br><span class="line">  [0,4,5,0],</span><br><span class="line">  [0,3,1,0]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<ul>
<li>A straight forward solution using O(<em>m__n</em>) space is probably a bad idea.</li>
<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>
<li>Could you devise a constant space solution?</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>Time Complexity: O(mn)<br>Space Complexity: O(m + n) 优化方法是用行和列的第一个元素存储变零状态<br>Beats 15%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; columnSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; rowSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    rowSet.add(i);</span><br><span class="line">                    columnSet.add(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row : rowSet) &#123;</span><br><span class="line">            Arrays.fill(matrix[row], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col : columnSet) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">                matrix[i][col] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 72. Edit Distance</title>
    <url>/LeetCode/LeetCode%2072.%20Edit%20Distance-20190512.html</url>
    <content><![CDATA[<h2 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a><a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="noopener">72. Edit Distance</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p>
<p>You have the following 3 operations permitted on a word:</p>
<ol>
<li>Insert a character</li>
<li>Delete a character</li>
<li>Replace a character</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: word1 &#x3D; &quot;horse&quot;, word2 &#x3D; &quot;ros&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)</span><br><span class="line">rorse -&gt; rose (remove &#39;r&#39;)</span><br><span class="line">rose -&gt; ros (remove &#39;e&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: word1 &#x3D; &quot;intention&quot;, word2 &#x3D; &quot;execution&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line">intention -&gt; inention (remove &#39;t&#39;)</span><br><span class="line">inention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)</span><br><span class="line">enention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)</span><br><span class="line">exention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)</span><br><span class="line">exection -&gt; execution (insert &#39;u&#39;)</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word1 == <span class="keyword">null</span> || word2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = word1.length();</span><br><span class="line">        <span class="keyword">int</span> n = word2.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            dp[j][<span class="number">0</span>] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 71. Simplify Path</title>
    <url>/LeetCode/LeetCode%2071.%20Simplify%20Path-20190511.html</url>
    <content><![CDATA[<h2 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a><a href="https://leetcode.com/problems/simplify-path/" target="_blank" rel="noopener">71. Simplify Path</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>
<p>In a UNIX-style file system, a period <code>.</code> refers to the current directory. Furthermore, a double period <code>..</code> moves the directory up a level. For more information, see: </p>
<p>Note that the returned canonical path must always begin with a slash <code>/</code>, and there must be only a single slash <code>/</code> between two directory names. The last directory name (if it exists) <strong>must not</strong> end with a trailing <code>/</code>. Also, the canonical path must be the <strong>shortest</strong> string representing the absolute path.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;home&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;home&quot;</span><br><span class="line">Explanation: Note that there is no trailing slash after the last directory name.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;..&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;&quot;</span><br><span class="line">Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;home&#x2F;&#x2F;foo&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;home&#x2F;foo&quot;</span><br><span class="line">Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;a&#x2F;.&#x2F;b&#x2F;..&#x2F;..&#x2F;c&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;c&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;a&#x2F;..&#x2F;..&#x2F;b&#x2F;..&#x2F;c&#x2F;&#x2F;.&#x2F;&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;c&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 6:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;a&#x2F;&#x2F;b&#x2F;&#x2F;&#x2F;&#x2F;c&#x2F;d&#x2F;&#x2F;.&#x2F;.&#x2F;&#x2F;..&quot;</span><br><span class="line">Output: &quot;&#x2F;a&#x2F;b&#x2F;c&quot;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path == <span class="keyword">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; dirs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        dirs.add(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur &lt; path.length()) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = path.charAt(cur);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'/'</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (cur + <span class="number">1</span> &lt; path.length() &amp;&amp; path.charAt(cur + <span class="number">1</span>) == <span class="string">'/'</span>) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                &#125;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'.'</span> &amp;&amp; ((cur + <span class="number">1</span> &gt;= path.length() || path.charAt(cur + <span class="number">1</span>) == <span class="string">'/'</span>) || (cur + <span class="number">1</span> &lt; path.length() &amp;&amp; path.charAt(cur + <span class="number">1</span>) == <span class="string">'.'</span> &amp;&amp; (cur + <span class="number">2</span> &gt;= path.length() || path.charAt(cur + <span class="number">2</span>) == <span class="string">'/'</span>)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur + <span class="number">1</span> &lt; path.length() &amp;&amp; path.charAt(cur + <span class="number">1</span>) == <span class="string">'.'</span>) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    <span class="keyword">if</span> (dirs.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        dirs.remove(dirs.size() - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = cur;</span><br><span class="line">                cur++;</span><br><span class="line">                <span class="keyword">while</span> (cur &lt; path.length() &amp;&amp; path.charAt(cur) != <span class="string">'/'</span>) &#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                &#125;</span><br><span class="line">                dirs.add(path.substring(start, cur));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dirs.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"/"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">"/"</span>, dirs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 70. Climbing Stairs</title>
    <url>/LeetCode/LeetCode%2070.%20Climbing%20Stairs-20190511.html</url>
    <content><![CDATA[<h2 id="70-Climbing-Stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70. Climbing Stairs"></a><a href="https://leetcode.com/problems/climbing-stairs/description/" target="_blank" rel="noopener">70. Climbing Stairs</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1\. 1 step + 1 step</span><br><span class="line">2\. 2 steps</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1\. 1 step + 1 step + 1 step</span><br><span class="line">2\. 1 step + 2 steps</span><br><span class="line">3\. 2 steps + 1 step</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 69. Sqrt(x)</title>
    <url>/LeetCode/LeetCode%2069.%20Sqrt(x)-20190511.html</url>
    <content><![CDATA[<h2 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a><a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="noopener">69. Sqrt(x)</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Implement <code>int sqrt(int x)</code>.</p>
<p>Compute and return the square root of <em>x</em>, where  <em>x</em>  is guaranteed to be a non-negative integer.</p>
<p>Since the return type  is an integer, the decimal digits are truncated and only the integer part of the result  is returned.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 8</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The square root of 8 is 2.82842..., and since </span><br><span class="line">              the decimal part is truncated, 2 is returned.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> x;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> start = <span class="number">1</span>, end = x;</span><br><span class="line">            <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">                  <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">                  <span class="keyword">if</span> (x / mid == mid) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x % mid == <span class="number">0</span>) &#123;</span><br><span class="line">                              <span class="keyword">return</span> mid;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              end = mid;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / mid &gt; mid) &#123;</span><br><span class="line">                        start = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        end = mid;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (x / end &gt; end || x / end == end &amp;&amp; x % end &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> end;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 68. Text Justification</title>
    <url>/LeetCode/LeetCode%2068.%20Text%20Justification-20190511.html</url>
    <content><![CDATA[<h2 id="68-Text-Justification"><a href="#68-Text-Justification" class="headerlink" title="68. Text Justification"></a><a href="https://leetcode.com/problems/text-justification/" target="_blank" rel="noopener">68. Text Justification</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given an array of words and a width  <em>maxWidth</em>, format the text such that each line has exactly <em>maxWidth</em> characters and is fully (left and right) justified.</p>
<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <em>maxWidth</em> characters.</p>
<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>
<p>For the last line of text, it should be left justified and no <strong>extra</strong> space is inserted between words.</p>
<p><strong>Note:</strong></p>
<ul>
<li>A word is defined as a character sequence consisting  of non-space characters only.</li>
<li>Each word’s length is  guaranteed to be greater than 0 and not exceed <em>maxWidth</em>.</li>
<li>The input array <code>words</code>  contains at least one word.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">words &#x3D; [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]</span><br><span class="line">maxWidth &#x3D; 16</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">     &quot;This      is      an&quot;,</span><br><span class="line">     &quot;example   of text&quot;,</span><br><span class="line">     &quot;justification.   &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">words &#x3D; [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]</span><br><span class="line">maxWidth &#x3D; 16</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">   &quot;What    must    be&quot;,</span><br><span class="line">   &quot;acknowledgment   &quot;,</span><br><span class="line">   &quot;shall be            &quot;</span><br><span class="line">]</span><br><span class="line">Explanation: Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;,</span><br><span class="line">              because the last line must be left-justified instead of fully-justified.</span><br><span class="line">             Note that the second line is also left-justified becase it contains only one word.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">words &#x3D; [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,</span><br><span class="line">          &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]</span><br><span class="line">maxWidth &#x3D; 20</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">   &quot;Science   is   what we&quot;,</span><br><span class="line">  &quot;understand         well&quot;,</span><br><span class="line">   &quot;enough to explain to&quot;,</span><br><span class="line">   &quot;a   computer.   Art is&quot;,</span><br><span class="line">   &quot;everything   else   we&quot;,</span><br><span class="line">   &quot;do                           &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">char</span>[] spaceChar;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fullJustify</span><span class="params">(String[] words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">            List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (words == <span class="keyword">null</span> || maxWidth &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            spaceChar = <span class="keyword">new</span> <span class="keyword">char</span>[maxWidth];</span><br><span class="line">            Arrays.fill(spaceChar, <span class="string">' '</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; words.length) &#123;</span><br><span class="line">                  cur = justify(words, cur, maxWidth, result);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">            </span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">justify</span><span class="params">(String[] words, <span class="keyword">int</span> cur, <span class="keyword">int</span> maxWidth, List&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> oriCur = cur;</span><br><span class="line">            <span class="keyword">int</span> wordLength = words[cur++].length();</span><br><span class="line">            <span class="keyword">int</span> lenWithSpace = wordLength;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; words.length &amp;&amp; maxWidth - lenWithSpace - <span class="number">1</span> &gt;= words[cur].length()) &#123;</span><br><span class="line">                  wordLength += words[cur].length();</span><br><span class="line">                  lenWithSpace += words[cur].length() + <span class="number">1</span>;</span><br><span class="line">                  cur++;</span><br><span class="line">           &#125;</span><br><span class="line">            result.add(buildString(words, oriCur, cur, maxWidth, wordLength));</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> String <span class="title">buildString</span><span class="params">(String[] words, <span class="keyword">int</span> ori, <span class="keyword">int</span> cur, <span class="keyword">int</span> maxWidth, <span class="keyword">int</span> wordLength)</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">if</span> (cur == words.length) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = ori; i &lt; cur; i++) &#123;</span><br><span class="line">                        sb.append(words[i]);</span><br><span class="line">                        <span class="keyword">if</span> (i == cur - <span class="number">1</span>) &#123;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                        sb.append(words[i]);</span><br><span class="line">                        sb.append(<span class="string">' '</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                  sb.append(spaceChar, <span class="number">0</span>, maxWidth - sb.length());</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur - ori == <span class="number">1</span>) &#123;</span><br><span class="line">                  sb.append(words[ori]);</span><br><span class="line">                  sb.append(spaceChar, <span class="number">0</span>, maxWidth - sb.length());</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">int</span> spaces = maxWidth - wordLength;</span><br><span class="line">                  <span class="keyword">int</span> baseSpace = spaces / (cur - ori - <span class="number">1</span>);</span><br><span class="line">                  <span class="keyword">int</span> extraSpaceIndex = spaces % (cur - ori - <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = ori; i &lt; cur; i++) &#123;</span><br><span class="line">                        sb.append(words[i]);</span><br><span class="line">                        <span class="keyword">if</span> (i == cur - <span class="number">1</span>) &#123;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                        sb.append(spaceChar, <span class="number">0</span>, baseSpace);</span><br><span class="line">                        <span class="keyword">if</span> (i &lt;= ori + extraSpaceIndex) &#123;</span><br><span class="line">                              sb.append(<span class="string">' '</span>);</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 67. Add Binary</title>
    <url>/LeetCode/LeetCode%2067.%20Add%20Binary-20190511.html</url>
    <content><![CDATA[<h2 id="67-Add-Binary"><a href="#67-Add-Binary" class="headerlink" title="67. Add Binary"></a><a href="https://leetcode.com/problems/add-binary/" target="_blank" rel="noopener">67. Add Binary</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given two binary strings, return their sum (also a binary string).</p>
<p>The input strings are both <strong>non-empty</strong> and contains only characters <code>1</code> or  <code>0</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a &#x3D; &quot;11&quot;, b &#x3D; &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a &#x3D; &quot;1010&quot;, b &#x3D; &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (a.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> b;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (b.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> a;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> i = a.length() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> j = b.length() - <span class="number">1</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  cur = (i &lt; <span class="number">0</span> ? <span class="number">0</span> : (a.charAt(i--) - <span class="string">'0'</span>)) + </span><br><span class="line">                       (j &lt; <span class="number">0</span> ? <span class="number">0</span> : (b.charAt(j--) - <span class="string">'0'</span>)) +</span><br><span class="line">                        carry;</span><br><span class="line">                  sb.append(cur % <span class="number">2</span>);</span><br><span class="line">                  carry = cur / <span class="number">2</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  sb.append(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">            sb.reverse();</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 66. Plus One</title>
    <url>/LeetCode/LeetCode%2066.%20Plus%20One-20190511.html</url>
    <content><![CDATA[<h2 id="66-Plus-One"><a href="#66-Plus-One" class="headerlink" title="66. Plus One"></a><a href="https://leetcode.com/problems/plus-one/description/" target="_blank" rel="noopener">66. Plus One</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a <strong>non-empty</strong> array of digits  representing a non-negative integer, plus one to the integer.</p>
<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>
<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits == <span class="keyword">null</span> || digits.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> digits;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> len = digits.length;</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> index = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (carry != <span class="number">0</span> &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">int</span> tmp = digits[index] + carry;</span><br><span class="line">                  digits[index] = tmp % <span class="number">10</span>;</span><br><span class="line">                  carry = tmp / <span class="number">10</span>;</span><br><span class="line">                  index--;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; carry == <span class="number">1</span>) &#123;</span><br><span class="line">                  <span class="keyword">int</span>[] tmp = digits;</span><br><span class="line">                  digits = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">                  digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                  System.arraycopy(tmp, <span class="number">0</span>, digits, <span class="number">1</span>, len);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 65. Valid Number</title>
    <url>/LeetCode/LeetCode%2065.%20Valid%20Number-20190511.html</url>
    <content><![CDATA[<h2 id="65-Valid-Number"><a href="#65-Valid-Number" class="headerlink" title="65. Valid Number"></a><a href="https://leetcode.com/problems/valid-number/" target="_blank" rel="noopener">65. Valid Number</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Validate if a given string can be interpreted as a decimal number.</p>
<p>Some examples:<br><code>&quot;0&quot;</code> =&gt; <code>true</code><br><code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br><code>&quot;abc&quot;</code> =&gt; <code>false</code><br><code>&quot;1 a&quot;</code> =&gt; <code>false</code><br><code>&quot;2e10&quot;</code> =&gt; <code>true</code><br><code>&quot; -90e3   &quot;</code> =&gt; <code>true</code><br><code>&quot; 1e&quot;</code> =&gt; <code>false</code><br><code>&quot;e3&quot;</code> =&gt; <code>false</code><br><code>&quot; 6e-1&quot;</code> =&gt; <code>true</code><br><code>&quot; 99e2.5 &quot;</code> =&gt; <code>false</code><br><code>&quot;53.5e93&quot;</code> =&gt; <code>true</code><br><code>&quot; --6 &quot;</code> =&gt; <code>false</code><br><code>&quot;-+3&quot;</code> =&gt; <code>false</code><br><code>&quot;95a54e53&quot;</code> =&gt; <code>false</code></p>
<p><strong>Note:</strong> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:</p>
<ul>
<li>Numbers 0-9</li>
<li>Exponent - “e”</li>
<li>Positive/negative sign - “+”/“-“</li>
<li>Decimal point - “.”</li>
</ul>
<p>Of course, the context of these characters also matters in the input.</p>
<p><strong>Update (2015-02-10):</strong><br>The signature of the <code>C++</code> function had been updated. If you still see your function signature accepts a <code>const char *</code> argument, please click the reload button to reset your code definition.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="keyword">boolean</span> pointSeen = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> eSeen = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> numberSeen = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> numberAfterE = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'0'</span> &lt;= s.charAt(i) &amp;&amp; s.charAt(i) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                numberSeen = <span class="keyword">true</span>;</span><br><span class="line">                numberAfterE = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'.'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(eSeen || pointSeen) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pointSeen = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'e'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(eSeen || !numberSeen) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                numberAfterE = <span class="keyword">false</span>;</span><br><span class="line">                eSeen = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'-'</span> || s.charAt(i) == <span class="string">'+'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; s.charAt(i-<span class="number">1</span>) != <span class="string">'e'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numberSeen &amp;&amp; numberAfterE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 64. Minimum Path Sum</title>
    <url>/LeetCode/LeetCode%2064.%20Minimum%20Path%20Sum-20190510.html</url>
    <content><![CDATA[<h2 id="64-Minimum-Path-Sum"><a href="#64-Minimum-Path-Sum" class="headerlink" title="64. Minimum Path Sum"></a><a href="https://leetcode.com/problems/minimum-path-sum/description/" target="_blank" rel="noopener">64. Minimum Path Sum</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p>
<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1→3→1→1→1 minimizes the sum.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            grid[i][<span class="number">0</span>] += grid[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid[i][j] += Math.min(grid[i - <span class="number">1</span>][j], grid[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j] + grid[i][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = Math.min(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j], dp[i % <span class="number">2</span>][j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(m - <span class="number">1</span>) % <span class="number">2</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 63. Unique Paths II</title>
    <url>/LeetCode/LeetCode%2063.%20Unique%20Paths%20II-20190510.html</url>
    <content><![CDATA[<h2 id="63-Unique-Paths-II"><a href="#63-Unique-Paths-II" class="headerlink" title="63. Unique Paths II"></a><a href="https://leetcode.com/problems/unique-paths-ii/description/" target="_blank" rel="noopener">63. Unique Paths II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" alt=""></p>
<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>
<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">   [0,0,0],</span><br><span class="line">   [0,1,0],</span><br><span class="line">   [0,0,0]</span><br><span class="line">]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">There is one obstacle in the middle of the 3x3 grid above.</span><br><span class="line">There are two ways to reach the bottom-right corner:</span><br><span class="line">1\. Right -&gt; Right -&gt; Down -&gt; Down</span><br><span class="line">2\. Down -&gt; Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid == <span class="keyword">null</span> || obstacleGrid.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">            <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                              dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>滚动数组优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[<span class="number">0</span>][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                        dp[i % <span class="number">2</span>][<span class="number">0</span>] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i % <span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i % <span class="number">2</span>][j] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j] + dp[i % <span class="number">2</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(m - <span class="number">1</span>) % <span class="number">2</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 62. Unique Paths</title>
    <url>/LeetCode/LeetCode%2062.%20Unique%20Paths-20190510.html</url>
    <content><![CDATA[<h2 id="62-Unique-Paths"><a href="#62-Unique-Paths" class="headerlink" title="62. Unique Paths"></a><a href="https://leetcode.com/problems/unique-paths/description/" target="_blank" rel="noopener">62. Unique Paths</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" alt=""><br><small style="display: inline;">Above is a 7 x 3 grid. How many possible unique paths are there?</small></p>
<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: m &#x3D; 3, n &#x3D; 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1\. Right -&gt; Right -&gt; Down</span><br><span class="line">2\. Right -&gt; Down -&gt; Right</span><br><span class="line">3\. Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: m &#x3D; 7, n &#x3D; 3</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">            Arrays.fill(dp[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                        dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>滚动数组优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= <span class="number">1</span> || n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][n];</span><br><span class="line">        Arrays.fill(dp[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i % <span class="number">2</span>][j] = dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j] + dp[i % <span class="number">2</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(m - <span class="number">1</span>) % <span class="number">2</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 61. Rotate List</title>
    <url>/LeetCode/LeetCode%2061.%20Rotate%20List-20190509.html</url>
    <content><![CDATA[<h2 id="61-Rotate-List"><a href="#61-Rotate-List" class="headerlink" title="61. Rotate List"></a><a href="https://leetcode.com/problems/rotate-list/" target="_blank" rel="noopener">61. Rotate List</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a linked list, rotate the list to the right by <em>k</em> places, where <em>k</em> is non-negative.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k &#x3D; 2</span><br><span class="line">Output: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 0-&gt;1-&gt;2-&gt;NULL, k &#x3D; 4</span><br><span class="line">Output: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = head;</span><br><span class="line">        k %= count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (count - k - <span class="number">1</span>); i++) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode next = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 60. Permutation Sequence</title>
    <url>/LeetCode/LeetCode%2060.%20Permutation%20Sequence-20190509.html</url>
    <content><![CDATA[<h2 id="60-Permutation-Sequence"><a href="#60-Permutation-Sequence" class="headerlink" title="60. Permutation Sequence"></a><a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="noopener">60. Permutation Sequence</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>The set <code>[1,2,3,...,_n_]</code> contains a total of <em>n</em>! unique permutations.</p>
<p>By listing and labeling all of the permutations in order, we get the following sequence for <em>n</em> = 3:</p>
<ol>
<li><code>&quot;123&quot;</code></li>
<li><code>&quot;132&quot;</code></li>
<li><code>&quot;213&quot;</code></li>
<li><code>&quot;231&quot;</code></li>
<li><code>&quot;312&quot;</code></li>
<li><code>&quot;321&quot;</code></li>
</ol>
<p>Given <em>n</em> and <em>k</em>, return the <em>k</em><sup>th</sup> permutation sequence.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Given <em>n</em> will be between 1 and 9 inclusive.</li>
<li>Given <em>k</em> will be between 1 and <em>n</em>! inclusive.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 3, k &#x3D; 3</span><br><span class="line">Output: &quot;213&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4, k &#x3D; 9</span><br><span class="line">Output: &quot;2314&quot;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fact = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            fact *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">while</span> (sb.length() != n) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = k / fact;</span><br><span class="line">            sb.append(list.get(index));</span><br><span class="line">            list.remove(index);</span><br><span class="line">            k %= fact;</span><br><span class="line">            <span class="keyword">if</span> (end != <span class="number">0</span>) &#123;</span><br><span class="line">                fact /= end;</span><br><span class="line">            &#125;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 59. Spiral Matrix II</title>
    <url>/LeetCode/LeetCode%2059.%20Spiral%20Matrix%20II-20190509.html</url>
    <content><![CDATA[<h2 id="59-Spiral-Matrix-II"><a href="#59-Spiral-Matrix-II" class="headerlink" title="59. Spiral Matrix II"></a><a href="https://leetcode.com/problems/spiral-matrix-ii/" target="_blank" rel="noopener">59. Spiral Matrix II</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a positive integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em><sup>2</sup> in spiral order.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 8, 9, 4 ],</span><br><span class="line"> [ 7, 6, 5 ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">while</span>(y + <span class="number">1</span> &lt;= end) &#123;</span><br><span class="line">                result[x][++y] = cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(x + <span class="number">1</span> &lt;= end) &#123;</span><br><span class="line">                result[++x][y] = cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(y - <span class="number">1</span> &gt;= start) &#123;</span><br><span class="line">                result[x][--y] = cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">            <span class="keyword">while</span>(x - <span class="number">1</span> &gt;= start) &#123;</span><br><span class="line">                result[--x][y] = cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 58. Length of Last Word</title>
    <url>/LeetCode/LeetCode%2058.%20Length%20of%20Last%20Word-20190508.html</url>
    <content><![CDATA[<h2 id="58-Length-of-Last-Word"><a href="#58-Length-of-Last-Word" class="headerlink" title="58. Length of Last Word"></a><a href="https://leetcode.com/problems/length-of-last-word/" target="_blank" rel="noopener">58. Length of Last Word</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word in the string.</p>
<p>If the last word does not exist, return 0.</p>
<p><strong>Note:</strong> A word is defined as a character sequence consists of non-space characters only.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;Hello World&quot;</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>Beats 80%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s = s.trim();</span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            String[] arr = s.split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">return</span> arr[arr.length - <span class="number">1</span>].length();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Beats 100%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> end = i;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i) != <span class="string">' '</span>) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end - i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 57. Insert Interval</title>
    <url>/LeetCode/LeetCode%2057.%20Insert%20Interval-20190508.html</url>
    <content><![CDATA[<h2 id="57-Insert-Interval"><a href="#57-Insert-Interval" class="headerlink" title="57. Insert Interval"></a><a href="https://leetcode.com/problems/insert-interval/" target="_blank" rel="noopener">57. Insert Interval</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>
<p>You may assume that the intervals were initially sorted according to their start times.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals &#x3D; [[1,3],[6,9]], newInterval &#x3D; [2,5]</span><br><span class="line">Output: [[1,5],[6,9]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals &#x3D; [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval &#x3D; [4,8]</span><br><span class="line">Output: [[1,2],[3,10],[12,16]]</span><br><span class="line">Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].</span><br></pre></td></tr></table></figure>

<p><strong>NOTE:</strong>  input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>This solution is quite straightforward, and it’s based on the non-overlapping feature.</p>
<p>Use a stack to store all items in <code>intervals</code>, make sure the item that has smaller index on top. And the stack concept can be realized using a real Stack or just use the index (because there is no push action).</p>
<p>Here are next steps:</p>
<ol>
<li>Add all non-overlapping item with <code>newInterval</code> to result</li>
<li>While there is overlapping between <code>newInterval</code> and <code>stack top</code>, replace the newInterval with the overlapped result and <code>pop  stack</code>. It ends when the stack is empty or there is no overlapping any more (remember, the origin intervals has no overlapping).</li>
<li>Add <code>newInterval</code> to result;</li>
<li>Add all left items in stack to result.</li>
</ol>
<p>Using stack, beats 86%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span>[][] insert(<span class="keyword">int</span>[][] intervals, <span class="keyword">int</span>[] newInterval) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> intervals;</span><br><span class="line">           &#125;</span><br><span class="line">            Deque&lt;<span class="keyword">int</span>[]&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = intervals.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                  stack.push(intervals[i]);</span><br><span class="line">           &#125;</span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek()[<span class="number">1</span>] &lt; newInterval[<span class="number">0</span>]) &#123;</span><br><span class="line">                  list.add(stack.pop());</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; isOverlapped(newInterval, stack.peek())) &#123;</span><br><span class="line">                  newInterval = overlap(newInterval, stack.pop());</span><br><span class="line">           &#125;</span><br><span class="line">            list.add(newInterval);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                  list.add(stack.pop());</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> parseIntervals(list);</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOverlapped</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !(a[<span class="number">1</span>] &lt; b[<span class="number">0</span>] || b[<span class="number">1</span>] &lt; a[<span class="number">0</span>]);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span>[] overlap(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;Math.min(a[<span class="number">0</span>], b[<span class="number">0</span>]), Math.max(a[<span class="number">1</span>], b[<span class="number">1</span>])&#125;;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span>[][] parseIntervals(List&lt;<span class="keyword">int</span>[]&gt; intervals) &#123;</span><br><span class="line">            <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.size()][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                  result[i] = intervals.get(i);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Using array index, beats 99.98%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] insert(<span class="keyword">int</span>[][] intervals, <span class="keyword">int</span>[] newInterval) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> intervals;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (index &lt; intervals.length &amp;&amp; intervals[index][<span class="number">1</span>] &lt; newInterval[<span class="number">0</span>]) &#123;</span><br><span class="line">            list.add(intervals[index++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; intervals.length &amp;&amp; isOverlapped(newInterval, intervals[index])) &#123;</span><br><span class="line">            newInterval = overlap(newInterval, intervals[index++]);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(newInterval);</span><br><span class="line">        <span class="keyword">while</span> (index &lt; intervals.length) &#123;</span><br><span class="line">            list.add(intervals[index++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseIntervals(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOverlapped</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !(a[<span class="number">1</span>] &lt; b[<span class="number">0</span>] || b[<span class="number">1</span>] &lt; a[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] overlap(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;Math.min(a[<span class="number">0</span>], b[<span class="number">0</span>]), Math.max(a[<span class="number">1</span>], b[<span class="number">1</span>])&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] parseIntervals(List&lt;<span class="keyword">int</span>[]&gt; intervals) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            result[i] = intervals.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 56. Merge Intervals</title>
    <url>/LeetCode/LeetCode%2056.%20Merge%20Intervals-20190504.html</url>
    <content><![CDATA[<h2 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">56. Merge Intervals</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a collection of intervals, merge all overlapping intervals.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure>

<p><strong>NOTE:</strong>  input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span> || intervals[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> intervals;</span><br><span class="line">           &#125;</span><br><span class="line">            List&lt;<span class="keyword">int</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> start = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">int</span>[] interval = intervals[i];</span><br><span class="line">                  <span class="keyword">if</span> (end &gt;= interval[<span class="number">0</span>]) &#123;</span><br><span class="line">                        end = Math.max(end, interval[<span class="number">1</span>]);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start, end&#125;);</span><br><span class="line">                        start = interval[<span class="number">0</span>];</span><br><span class="line">                        end = interval[<span class="number">1</span>];</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start, end&#125;);</span><br><span class="line">            <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                  result[i] = list.get(i);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 55. Jump Game</title>
    <url>/LeetCode/LeetCode%2055.%20Jump%20Game-20190504.html</url>
    <content><![CDATA[<h2 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a><a href="https://leetcode.com/problems/jump-game/description/" target="_blank" rel="noopener">55. Jump Game</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">              jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= Math.min(nums.length - <span class="number">1</span>, i + nums[i]); j++) &#123;</span><br><span class="line">                    dp[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> m = nums.length;</span><br><span class="line">            <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">            Arrays.fill(dp, <span class="number">0</span>);</span><br><span class="line">            dp[m - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                  <span class="keyword">int</span> furthest = Math.min(i + nums[i], m - <span class="number">1</span>);</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= furthest; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (dp[j] == <span class="number">1</span>) &#123;</span><br><span class="line">                              dp[i] = <span class="number">1</span>;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>] == <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>DP</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 54. Spiral Matrix</title>
    <url>/LeetCode/LeetCode%2054.%20Spiral%20Matrix-20190504.html</url>
    <content><![CDATA[<h2 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a><a href="https://leetcode.com/problems/spiral-matrix/description/" target="_blank" rel="noopener">54. Spiral Matrix</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9,10,11,12]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, up = <span class="number">0</span>, right = n - <span class="number">1</span>, down = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; up &lt;= down) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                result.add(matrix[up][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            up++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down; i++) &#123;</span><br><span class="line">                result.add(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">            <span class="keyword">if</span> (up &lt;= down &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left; i--) &#123;</span><br><span class="line">                    result.add(matrix[down][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                down--;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up; i--) &#123;</span><br><span class="line">                    result.add(matrix[i][left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 53. Maximum Subarray</title>
    <url>/LeetCode/LeetCode%2053.%20Maximum%20Subarray-20190504.html</url>
    <content><![CDATA[<h2 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a><a href="https://leetcode.com/problems/maximum-subarray/description/" target="_blank" rel="noopener">53. Maximum Subarray</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given an integer array <code>nums</code>, find the contiguous subarray  (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:  [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            max = Math.max(max, sum - minSum);</span><br><span class="line">            minSum = Math.min(sum, minSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span>[] preSum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">            preSum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                  preSum[i + <span class="number">1</span>] = nums[i] + preSum[i];</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">int</span> s = preSum[i] - min;</span><br><span class="line">                  <span class="keyword">if</span> (s &gt; max) &#123;</span><br><span class="line">                        max = s;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (preSum[i] &lt; min) &#123;</span><br><span class="line">                        min = preSum[i];</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 52. N-Queens II</title>
    <url>/LeetCode/LeetCode%2052.%20N-Queens%20II-20190504.html</url>
    <content><![CDATA[<h2 id="52-N-Queens-II"><a href="#52-N-Queens-II" class="headerlink" title="52. N-Queens II"></a><a href="https://leetcode.com/problems/n-queens-ii/description/" target="_blank" rel="noopener">52. N-Queens II</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" alt=""></p>
<p>Given an integer  <em>n</em>, return the number of  distinct solutions to the  <em>n</em>-queens puzzle.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.</span><br><span class="line">[</span><br><span class="line">  [&quot;.Q..&quot;,   &#x2F;&#x2F; Solution 1</span><br><span class="line">   &quot;...Q&quot;,</span><br><span class="line">   &quot;Q...&quot;,</span><br><span class="line">   &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line">  [&quot;..Q.&quot;,   &#x2F;&#x2F; Solution 2</span><br><span class="line">   &quot;Q...&quot;,</span><br><span class="line">   &quot;...Q&quot;,</span><br><span class="line">   &quot;.Q..&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h3 id="将上一题精简一下"><a href="#将上一题精简一下" class="headerlink" title="将上一题精简一下"></a>将上一题精简一下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">boolean</span>[][] sets = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">3</span>][n * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        dfsHelper(n, <span class="number">0</span>, sets);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> index, <span class="keyword">boolean</span>[][] sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = index - i + n;</span><br><span class="line">            <span class="keyword">int</span> right = index + i;</span><br><span class="line">            <span class="keyword">if</span> (sets[<span class="number">0</span>][i] || sets[<span class="number">1</span>][left] || sets[<span class="number">2</span>][right]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sets[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">            sets[<span class="number">1</span>][left] = <span class="keyword">true</span>;</span><br><span class="line">            sets[<span class="number">2</span>][right] = <span class="keyword">true</span>;</span><br><span class="line">            dfsHelper(n, index + <span class="number">1</span>, sets);</span><br><span class="line">            sets[<span class="number">0</span>][i] = <span class="keyword">false</span>;</span><br><span class="line">            sets[<span class="number">1</span>][left] = <span class="keyword">false</span>;</span><br><span class="line">            sets[<span class="number">2</span>][right] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 51. N-Queens</title>
    <url>/LeetCode/LeetCode%2051.%20N-Queens-20190504.html</url>
    <content><![CDATA[<h2 id="51-N-Queens"><a href="#51-N-Queens" class="headerlink" title="51. N-Queens"></a><a href="https://leetcode.com/problems/n-queens/description/" target="_blank" rel="noopener">51. N-Queens</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" alt=""></p>
<p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the <em>n</em>-queens’ placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: [</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; Solution 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; Solution 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="使用Set存储已有位置-50"><a href="#使用Set存储已有位置-50" class="headerlink" title="使用Set存储已有位置 50%"></a>使用Set存储已有位置 50%</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] boardRow;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        boardRow = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        Arrays.fill(boardRow, <span class="string">'.'</span>);</span><br><span class="line">        <span class="comment">// 0 for row, 1 for diagonal，2 for right lean diagonal</span></span><br><span class="line">        Set&lt;Integer&gt;[] sets = (Set&lt;Integer&gt;[])<span class="keyword">new</span> HashSet[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sets.length; i++) &#123;</span><br><span class="line">            sets[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        dfsHelper(n, sets, <span class="keyword">new</span> <span class="keyword">int</span>[n], <span class="number">0</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span> n, Set&lt;Integer&gt;[] sets, <span class="keyword">int</span>[] cur, <span class="keyword">int</span> row, List&lt;List&lt;String&gt;&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= n) &#123;</span><br><span class="line">            result.add(convert(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!sets[<span class="number">0</span>].contains(col) &amp;&amp; !sets[<span class="number">1</span>].contains(row + col) &amp;&amp; !sets[<span class="number">2</span>].contains(row - col)) &#123;</span><br><span class="line">                sets[<span class="number">0</span>].add(col);</span><br><span class="line">                sets[<span class="number">1</span>].add(row + col);</span><br><span class="line">                sets[<span class="number">2</span>].add(row - col);</span><br><span class="line">                cur[row] = col;</span><br><span class="line">                dfsHelper(n, sets, cur, row + <span class="number">1</span>, result);</span><br><span class="line">                sets[<span class="number">0</span>].remove(col);</span><br><span class="line">                sets[<span class="number">1</span>].remove(row + col);</span><br><span class="line">                sets[<span class="number">2</span>].remove(row - col);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">convert</span><span class="params">(<span class="keyword">int</span>[] cur)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : cur) &#123;</span><br><span class="line">            boardRow[i] = <span class="string">'Q'</span>;</span><br><span class="line">            res.add(<span class="keyword">new</span> String(boardRow));</span><br><span class="line">            boardRow[i] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用数组存储已有位置-96"><a href="#使用数组存储已有位置-96" class="headerlink" title="使用数组存储已有位置 96%"></a>使用数组存储已有位置 96%</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lines = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 因为有 2 * n 个斜行</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] sets = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">3</span>][n * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        dfsHelper(n, lines, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;(), sets);</span><br><span class="line">        parseResult(lines, result, n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span> n, List&lt;List&lt;Integer&gt;&gt; lines, <span class="keyword">int</span> index, List&lt;Integer&gt; line, <span class="keyword">boolean</span>[][] sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == n) &#123;</span><br><span class="line">            lines.add(<span class="keyword">new</span> ArrayList&lt;&gt;(line));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 防止出现负数</span></span><br><span class="line">            <span class="keyword">int</span> left = index - i + n;</span><br><span class="line">            <span class="keyword">int</span> right = index + i;</span><br><span class="line">            <span class="keyword">if</span> (sets[<span class="number">0</span>][i] || sets[<span class="number">1</span>][left] || sets[<span class="number">2</span>][right]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            line.add(i);</span><br><span class="line">            sets[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">            sets[<span class="number">1</span>][left] = <span class="keyword">true</span>;</span><br><span class="line">            sets[<span class="number">2</span>][right] = <span class="keyword">true</span>;</span><br><span class="line">            dfsHelper(n ,lines, index + <span class="number">1</span>, line, sets);</span><br><span class="line">            line.remove(line.size() - <span class="number">1</span>);</span><br><span class="line">            sets[<span class="number">0</span>][i] = <span class="keyword">false</span>;</span><br><span class="line">            sets[<span class="number">1</span>][left] = <span class="keyword">false</span>;</span><br><span class="line">            sets[<span class="number">2</span>][right] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseResult</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; lines, List&lt;List&lt;String&gt;&gt; result, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] lineChars = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        Arrays.fill(lineChars, <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; line : lines) &#123;</span><br><span class="line">            List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col : line) &#123;</span><br><span class="line">                lineChars[prev] = <span class="string">'.'</span>;</span><br><span class="line">                lineChars[col] = <span class="string">'Q'</span>;</span><br><span class="line">                one.add(<span class="keyword">new</span> String(lineChars));</span><br><span class="line">                prev = col;</span><br><span class="line">            &#125;</span><br><span class="line">            lineChars[prev] = <span class="string">'.'</span>;</span><br><span class="line">            result.add(one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 50. Pow(x, n)</title>
    <url>/LeetCode/LeetCode%2050.%20Pow(x,%20n)-20190503.html</url>
    <content><![CDATA[<h2 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a><a href="https://leetcode.com/problems/powx-n/description/" target="_blank" rel="noopener">50. Pow(x, n)</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Implement , which calculates <em>x</em> raised to the power <em>n</em> (x<sup><span style="font-size: 10.8333px; display: inline;">n</span></sup>).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 &#x3D; 1&#x2F;22 &#x3D; 1&#x2F;4 &#x3D; 0.25</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>
<li><em>n</em> is a 32-bit signed integer, within the range [−2<sup>31</sup>, 2<sup>31 </sup>− 1]</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>位运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> c = Math.abs((<span class="keyword">long</span>) n);</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((c &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                result *= x;</span><br><span class="line">            &#125;</span><br><span class="line">            x *= x;</span><br><span class="line">            c &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">0</span> ? <span class="number">1</span> / result : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            n = -n;</span><br><span class="line">            x = <span class="number">1</span>/x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (n%<span class="number">2</span> == <span class="number">0</span>) ? pow(x*x, n/<span class="number">2</span>) : x*pow(x*x, n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归麻烦版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            n = -n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pow(x, n);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> tmp = pow(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> tmp * tmp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tmp * tmp * x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
        <tag>Monotonous Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 49. Group Anagrams</title>
    <url>/LeetCode/LeetCode%2049.%20Group%20Anagrams-20190503.html</url>
    <content><![CDATA[<h2 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a><a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">49. Group Anagrams</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an array of strings, group anagrams together.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>All inputs will be in lowercase.</li>
<li>The order of your output does not  matter.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            Map&lt;String, Integer&gt; indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">                  String key = genKey(s);</span><br><span class="line">                  <span class="keyword">if</span> (!indexMap.containsKey(key)) &#123;</span><br><span class="line">                        indexMap.put(key, result.size());</span><br><span class="line">                        result.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                 &#125;</span><br><span class="line">                  result.get(indexMap.get(key)).add(s);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">            </span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> String <span class="title">genKey</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">char</span>[] a = s.toCharArray();</span><br><span class="line">            Arrays.sort(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(a);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>HashMap</tag>
        <tag>Medium</tag>
        <tag>String</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 48. Rotate Image</title>
    <url>/LeetCode/LeetCode%2048.%20Rotate%20Image-20190503.html</url>
    <content><![CDATA[<h2 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a><a href="https://leetcode.com/problems/rotate-image/" target="_blank" rel="noopener">48. Rotate Image</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p>
<p>Rotate the image by 90 degrees (clockwise).</p>
<p><strong>Note:</strong></p>
<p>You have to rotate the image , which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given input matrix &#x3D; </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given input matrix &#x3D;</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span> + n % <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> row = i;</span><br><span class="line">        <span class="keyword">int</span> col = j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">          tmp[k] = matrix[row][col];</span><br><span class="line">          <span class="keyword">int</span> x = row;</span><br><span class="line">          row = col;</span><br><span class="line">          col = n - <span class="number">1</span> - x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">          matrix[row][col] = tmp[(k + <span class="number">3</span>) % <span class="number">4</span>];</span><br><span class="line">          <span class="keyword">int</span> x = row;</span><br><span class="line">          row = col;</span><br><span class="line">          col = n - <span class="number">1</span> - x;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 47. Permutations II</title>
    <url>/LeetCode/LeetCode%2047.%20Permutations%20II-20190503.html</url>
    <content><![CDATA[<h3 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a><a href="https://leetcode.com/problems/permutations-ii/description/" target="_blank" rel="noopener">47. Permutations II</a></h3><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,1,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        dfsHelper(nums, result, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(nums.length), visited);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; p, <span class="keyword">boolean</span>[] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.size() == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(p));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; visited[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.add(nums[i]);</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfsHelper(nums, result, p, visited);</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            p.remove(p.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 46. Permutations</title>
    <url>/LeetCode/LeetCode%2046.%20Permutations-20190503.html</url>
    <content><![CDATA[<h3 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a><a href="https://leetcode.com/problems/permutations/description/" target="_blank" rel="noopener">46. Permutations</a></h3><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<p>简单做法，66%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            dfsHelper(nums, result, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (p.size() == nums.length) &#123;</span><br><span class="line">                  result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(p));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (p.contains(nums[i])) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  p.add(nums[i]);</span><br><span class="line">                  dfsHelper(nums, result, p);</span><br><span class="line">                  p.remove(p.size() - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>记忆化搜索</strong> 100%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        dfsHelper(nums, result, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), visited);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; p, <span class="keyword">boolean</span>[] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.size() == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(p));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.add(nums[i]);</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfsHelper(nums, result, p, visited);</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            p.remove(p.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 45. Jump Game II</title>
    <url>/LeetCode/LeetCode%2045.%20Jump%20Game%20II-20190503.html</url>
    <content><![CDATA[<h2 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a><a href="https://leetcode.com/problems/jump-game-ii/description/" target="_blank" rel="noopener">45. Jump Game II</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Your goal is to reach the last index in the minimum number of jumps.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2.</span><br><span class="line">    Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>You can assume that you can always reach the last index.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>从前往后 18.7% $O(n^2)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp记录走到此处最小的jump数</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= Math.min(dp.length - <span class="number">1</span>, i + nums[i]); j++) &#123;</span><br><span class="line">                dp[j] = Math.min(dp[j], dp[i] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>贪心算法，每次都走最远的路 $O(n)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> jumps = <span class="number">0</span>, curEnd = <span class="number">0</span>, curFarthest = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		curFarthest = Math.max(curFarthest, i + A[i]);</span><br><span class="line">		<span class="keyword">if</span> (i == curEnd) &#123;</span><br><span class="line">			jumps++;</span><br><span class="line">			curEnd = curFarthest;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> jumps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 44. Wildcard Matching</title>
    <url>/LeetCode/LeetCode%2044.%20Wildcard%20Matching-20190503.html</url>
    <content><![CDATA[<h2 id="44-Wildcard-Matching"><a href="#44-Wildcard-Matching" class="headerlink" title="44. Wildcard Matching"></a><a href="https://leetcode.com/problems/wildcard-matching/" target="_blank" rel="noopener">44. Wildcard Matching</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;?&#39; Matches any single character.</span><br><span class="line">&#39;*&#39; Matches any sequence of characters (including the empty sequence).</span><br></pre></td></tr></table></figure>

<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>
<p><strong>Note:</strong></p>
<ul>
<li><code>s</code>  could be empty and contains only lowercase letters <code>a-z</code>.</li>
<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>?</code>  or  <code>*</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  &#39;*&#39; matches any sequence.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;cb&quot;</span><br><span class="line">p &#x3D; &quot;?a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation:  &#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;adceb&quot;</span><br><span class="line">p &#x3D; &quot;*a*b&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;acdcb&quot;</span><br><span class="line">p &#x3D; &quot;a*c?b&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">0</span> &amp;&amp; p.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (p.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> m = s.length();</span><br><span class="line">            <span class="keyword">int</span> n = p.length();</span><br><span class="line">            <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (p.charAt(i - <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                        dp[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                        <span class="keyword">char</span> cp = p.charAt(j - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span> (cp == <span class="string">'?'</span>) &#123;</span><br><span class="line">                              dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cp == <span class="string">'*'</span>) &#123;</span><br><span class="line">                              dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] || dp[i - <span class="number">1</span>][j] || dp[i][j - <span class="number">1</span>];</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; s.charAt(i - <span class="number">1</span>) == cp;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> dp[m][n];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 43. Multiply Strings</title>
    <url>/LeetCode/LeetCode%2043.%20Multiply%20Strings-20190503.html</url>
    <content><![CDATA[<h2 id="43-Multiply-Strings"><a href="#43-Multiply-Strings" class="headerlink" title="43. Multiply Strings"></a><a href="https://leetcode.com/problems/multiply-strings/" target="_blank" rel="noopener">43. Multiply Strings</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num1 &#x3D; &quot;2&quot;, num2 &#x3D; &quot;3&quot;</span><br><span class="line">Output: &quot;6&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num1 &#x3D; &quot;123&quot;, num2 &#x3D; &quot;456&quot;</span><br><span class="line">Output: &quot;56088&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ol>
<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>
<li>Both <code>num1</code> and <code>num2</code> contain  only digits <code>0-9</code>.</li>
<li>Both <code>num1</code> and <code>num2</code>  do not contain any leading zero, except the number 0 itself.</li>
<li>You <strong>must not use any built-in BigInteger library</strong> or <strong>convert the inputs to integer</strong> directly.</li>
</ol>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>乘法的过程<br><img src="evernotecid://23F95226-C431-4A73-B55D-C88D31015CA7/wwwevernotecom/102568406/ENNote/p306?hash=8ae8c3ba232547bfd1274cd26d829a0b" alt="8ae8c3ba232547bfd1274cd26d829a0b.jpeg"></p>
<blockquote>
<p><code>num1[i] * num2[j]</code> 的结果将会落在 <code>[i + j</code>, <code>i + j + 1]</code> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (num1 == <span class="keyword">null</span> || num2 == <span class="keyword">null</span> || num1.length() == <span class="number">0</span> || num2.length() == <span class="number">0</span></span><br><span class="line">                || num1.equals(<span class="string">"0"</span>) || num2.equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> m = num1.length(), n = num2.length();</span><br><span class="line">            <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[m + n];</span><br><span class="line">​</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                  <span class="keyword">for</span>(<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                        <span class="keyword">int</span> mul = (num1.charAt(i) - <span class="string">'0'</span>) * (num2.charAt(j) - <span class="string">'0'</span>); </span><br><span class="line">                        <span class="keyword">int</span> p1 = i + j, p2 = i + j + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">int</span> sum = mul + pos[p2];</span><br><span class="line">​</span><br><span class="line">                        pos[p1] += sum / <span class="number">10</span>;</span><br><span class="line">                        pos[p2] = (sum) % <span class="number">10</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;   </span><br><span class="line">​</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p : pos) <span class="keyword">if</span>(!(sb.length() == <span class="number">0</span> &amp;&amp; p == <span class="number">0</span>)) sb.append(p);</span><br><span class="line">            <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">"0"</span> : sb.toString();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 42. Trapping Rain Water</title>
    <url>/LeetCode/LeetCode%2042.%20Trapping%20Rain%20Water-20190503.html</url>
    <content><![CDATA[<h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a><a href="https://leetcode.com/problems/trapping-rain-water/description/" target="_blank" rel="noopener">42. Trapping Rain Water</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt=""><br><small style="display: inline;">The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong> for contributing this image!</small></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.com/problems/trapping-rain-water/solution/" target="_blank" rel="noopener">Solution</a></h3><p>Language: <strong>Java</strong></p>
<blockquote>
<p>算法核心是：一个坐标能累积的水等于左右两边的最高值取小的那个，减去本坐标的高度。可以通过记录每个点的左右来加速这一过程（DP)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = height.length;</span><br><span class="line">        <span class="keyword">int</span>[] leftMax = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span>[] rightMax = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        rightMax[size - <span class="number">1</span>] = height[size - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = size - <span class="number">2</span>; i &lt; size; i++, j--) &#123;</span><br><span class="line">            leftMax[i] = Math.max(leftMax[i - <span class="number">1</span>], height[i]);</span><br><span class="line">            rightMax[j] = Math.max(rightMax[j + <span class="number">1</span>], height[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            result += Math.min(leftMax[i], rightMax[i]) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单调栈解法"><a href="#单调栈解法" class="headerlink" title="单调栈解法"></a>单调栈解法</h4><p>单调递减栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.peek() != -<span class="number">1</span> &amp;&amp; height[i] &gt;= height[stack.peek()]) &#123;</span><br><span class="line">                <span class="keyword">int</span> low = height[stack.pop()];</span><br><span class="line">                <span class="keyword">if</span> (stack.peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> minHeight = Math.min(height[i], height[stack.peek()]);</span><br><span class="line">                result += (minHeight - low) * (i - stack.peek() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从小往大灌水解法"><a href="#从小往大灌水解法" class="headerlink" title="从小往大灌水解法"></a>从小往大灌水解法</h4><p>思想是左右指针各当成一根柱子，并记录左右最高的柱子，每次向中间移动小的那一根指针，如果发现新的柱子比原来的柱子矮，那么是可以灌水的，否则是不能灌水的并更新新的高度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> leftHeight = height[left];</span><br><span class="line">        <span class="keyword">int</span> rightHeight = height[right];</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leftHeight &lt; rightHeight) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &lt; leftHeight) &#123;</span><br><span class="line">                    res += leftHeight - height[left];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    leftHeight = height[left];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &lt; rightHeight) &#123;</span><br><span class="line">                    res += rightHeight - height[right];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rightHeight = height[right];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
        <tag>Monotonous Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 41. First Missing Positive</title>
    <url>/LeetCode/LeetCode%2041.%20First%20Missing%20Positive-20190503.html</url>
    <content><![CDATA[<h2 id="41-First-Missing-Positive"><a href="#41-First-Missing-Positive" class="headerlink" title="41. First Missing Positive"></a><a href="https://leetcode.com/problems/first-missing-positive/" target="_blank" rel="noopener">41. First Missing Positive</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given an unsorted integer array, find the smallest missing  positive integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,0]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,4,-1,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,8,9,11,12]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p>一个没有遗漏的数组是从1到n的乱序数组，依照这个思想，把范围内的数字交换到它对应的位置上，也就是数字是<code>1</code>到<code>length</code>的数字交换到<code>0</code>到<code>length-1</code>上，然后从头开始数，哪个不是在原来的位置上哪个就是遗漏的数字。</p>
<p>边界条件：</p>
<ol>
<li>当出现重复数字的时候，也就是发现目前遍历到的数字和本来应该交换的位置相同时（也就是同一个数字已经归位了一次），那么直接跳过</li>
<li>第二次从头遍历时，如果遍历完也没有return，那么说明缺的是最后一个数字，也就是 <code>length + 1</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; nums.length) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (nums[index] &lt;= <span class="number">0</span> || nums[index] &gt; nums.length || nums[index] == index + <span class="number">1</span>) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[index] == nums[nums[index] - <span class="number">1</span>]) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> tmp = nums[index];</span><br><span class="line">                        nums[index] = nums[tmp - <span class="number">1</span>];</span><br><span class="line">                        nums[tmp - <span class="number">1</span>] = tmp;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> nums.length + <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 40. Combination Sum II</title>
    <url>/LeetCode/LeetCode%2040.%20Combination%20Sum%20II-20190430.html</url>
    <content><![CDATA[<h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a><a href="https://leetcode.com/problems/combination-sum-ii/description/" target="_blank" rel="noopener">40. Combination Sum II</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p>
<p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers (including <code>target</code>) will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span> || candidates.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        dfsHelper(candidates, <span class="number">0</span>, target, result, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> index, <span class="keyword">int</span> target, </span></span></span><br><span class="line"><span class="function"><span class="params">                           List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; combination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(combination));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i != index &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            combination.add(candidates[i]);</span><br><span class="line">            dfsHelper(candidates, i + <span class="number">1</span>, target - candidates[i], result, combination);</span><br><span class="line">            combination.remove(combination.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 39. Combination Sum</title>
    <url>/LeetCode/LeetCode%2039.%20Combination%20Sum-20190430.html</url>
    <content><![CDATA[<h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a><a href="https://leetcode.com/problems/combination-sum/description/" target="_blank" rel="noopener">39. Combination Sum</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p>
<p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers (including <code>target</code>) will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,6,7], target &#x3D; 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,5], target &#x3D; 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span> || candidates.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        dfsHelper(candidates, <span class="number">0</span>, target, result, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> startIndex , <span class="keyword">int</span> target, </span></span></span><br><span class="line"><span class="function"><span class="params">                           List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; combination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(combination));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startIndex; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            combination.add(candidates[i]);</span><br><span class="line">            dfsHelper(candidates, i, target - candidates[i], result, combination);</span><br><span class="line">            combination.remove(combination.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 38. Count and Say</title>
    <url>/LeetCode/LeetCode%2038.%20Count%20and%20Say-20190430.html</url>
    <content><![CDATA[<h2 id="38-Count-and-Say"><a href="#38-Count-and-Say" class="headerlink" title="38. Count and Say"></a><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="noopener">38. Count and Say</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1\.     1</span><br><span class="line">2\.     11</span><br><span class="line">3\.     21</span><br><span class="line">4\.     1211</span><br><span class="line">5\.     111221</span><br></pre></td></tr></table></figure>

<p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p>
<p>Given an integer <em>n</em> where 1 ≤ <em>n</em> ≤ 30, generate the <em>n</em><sup>th</sup> term of the count-and-say sequence.</p>
<p>Note: Each term of the sequence of integers will be represented as a string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;1211&quot;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String one = <span class="string">"1"</span>;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            one = helper(one);</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">helper</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span> cur = s.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == cur) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(count);</span><br><span class="line">                sb.append(cur);</span><br><span class="line">                cur = s.charAt(i);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(count);</span><br><span class="line">        sb.append(cur);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 37. Sudoku Solver</title>
    <url>/LeetCode/LeetCode%2037.%20Sudoku%20Solver-20190430.html</url>
    <content><![CDATA[<h2 id="37-Sudoku-Solver"><a href="#37-Sudoku-Solver" class="headerlink" title="37. Sudoku Solver"></a><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener">37. Sudoku Solver</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>
<p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>
<ol>
<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>
<li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>
<li>Each of the the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>
</ol>
<p>Empty cells are indicated by the character <code>&#39;.&#39;</code>.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""><br><small style="display: inline;">A sudoku puzzle…</small></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt=""><br><small style="display: inline;">…and its solution numbers marked in red.</small></p>
<p><strong>Note:</strong></p>
<ul>
<li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>
<li>You may assume that the given Sudoku puzzle will have a single unique solution.</li>
<li>The given board size is always <code>9x9</code>.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length != <span class="number">9</span> || board[<span class="number">0</span>].length != <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt;[] rowSet = (Set&lt;Character&gt;[])<span class="keyword">new</span> HashSet[<span class="number">9</span>];</span><br><span class="line">        Set&lt;Character&gt;[] columnSet = (Set&lt;Character&gt;[])<span class="keyword">new</span> HashSet[<span class="number">9</span>];</span><br><span class="line">        Set&lt;Character&gt;[] boxSet = (Set&lt;Character&gt;[])<span class="keyword">new</span> HashSet[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            rowSet[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            columnSet[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            boxSet[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> (c != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    rowSet[i].add(c);</span><br><span class="line">                    columnSet[j].add(c);</span><br><span class="line">                    boxSet[boxIndex(i, j)].add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        solve(board, rowSet, columnSet, boxSet, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">boxIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board, Set&lt;Character&gt;[] rowSet, Set&lt;Character&gt;[] columnSet, Set&lt;Character&gt;[] boxSet, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">8</span> &amp;&amp; checkValid(rowSet, columnSet, boxSet)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = board[i][j];</span><br><span class="line">                <span class="keyword">int</span> bi = boxIndex(i, j);</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> s = <span class="string">'1'</span>; s &lt;= <span class="string">'9'</span>; s++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!rowSet[i].contains(s) &amp;&amp; !columnSet[j].contains(s)</span><br><span class="line">                           &amp;&amp; !boxSet[bi].contains(s)) &#123;</span><br><span class="line">                            rowSet[i].add(s);</span><br><span class="line">                            columnSet[j].add(s);</span><br><span class="line">                            boxSet[bi].add(s);</span><br><span class="line">                            board[i][j] = s;</span><br><span class="line">                            <span class="keyword">if</span> (solve(board, rowSet, columnSet, boxSet, i)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">                            rowSet[i].remove(s);</span><br><span class="line">                            columnSet[j].remove(s);</span><br><span class="line">                            boxSet[bi].remove(s);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkValid</span><span class="params">(Set&lt;Character&gt;[] rowSet, Set&lt;Character&gt;[] columnSet, Set&lt;Character&gt;[] boxSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rowSet[i].size() != <span class="number">9</span> || columnSet[i].size() != <span class="number">9</span> || boxSet[i].size() != <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 36. Valid Sudoku</title>
    <url>/LeetCode/LeetCode%2036.%20Valid%20Sudoku-20190429.html</url>
    <content><![CDATA[<h2 id="36-Valid-Sudoku"><a href="#36-Valid-Sudoku" class="headerlink" title="36. Valid Sudoku"></a><a href="https://leetcode.com/problems/valid-sudoku/" target="_blank" rel="noopener">36. Valid Sudoku</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p>
<ol>
<li>Each row must contain the digits <code>1-9</code> without repetition.</li>
<li>Each column must contain the digits <code>1-9</code> without repetition.</li>
<li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li>
</ol>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""><br><small style="display: inline;">A partially filled sudoku which is valid.</small></p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Same as Example 1, except with the 5 in the top left corner being </span><br><span class="line">    modified to 8\. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>
<li>Only the filled cells need to be validated according to the mentioned rules.</li>
<li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>
<li>The given board size is always <code>9x9</code>.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length != <span class="number">9</span> || board[<span class="number">0</span>].length != <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            set.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> (c != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (set.contains(c)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    set.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            set.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = board[j][i];</span><br><span class="line">                <span class="keyword">if</span> (c != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (set.contains(c)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    set.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                set.clear();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; i + <span class="number">3</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> m = j; m &lt; j + <span class="number">3</span>; m++) &#123;</span><br><span class="line">                        <span class="keyword">char</span> c = board[k][m];</span><br><span class="line">                        <span class="keyword">if</span> (c != <span class="string">'.'</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (set.contains(c)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            set.add(c);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 35. Search Insert Position</title>
    <url>/LeetCode/LeetCode%2035.%20Search%20Insert%20Position-20190429.html</url>
    <content><![CDATA[<h2 id="35-Search-Insert-Position"><a href="#35-Search-Insert-Position" class="headerlink" title="35. Search Insert Position"></a><a href="https://leetcode.com/problems/search-insert-position/description/" target="_blank" rel="noopener">35. Search Insert Position</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt;= target) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">                  <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">                  <span class="keyword">if</span> (target == nums[mid]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                        end = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        start = mid;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[end] &gt;= target) &#123;</span><br><span class="line">                  <span class="keyword">return</span> end;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> nums.length;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[nums.length - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[start] &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[end] &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 34. Find First and Last Position of Element in Sorted Array</title>
    <url>/LeetCode/LeetCode%2034.%20Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array-20190429.html</url>
    <content><![CDATA[<h2 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. Find First and Last Position of Element in Sorted Array</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>
<p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>
<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> left, right = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">                  <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">                  <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                        start = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                        end = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        start = mid;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">                  right = end;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">                  right = start;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">           &#125;</span><br><span class="line">            start = <span class="number">0</span>;</span><br><span class="line">            end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">                  <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">                  <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                        end = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                        end = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        start = mid;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">                  left = start;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  left = end;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;left, right&#125;;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;search(nums, target, <span class="keyword">true</span>), search(nums, target, <span class="keyword">false</span>)&#125;;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">boolean</span> isLeft)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">                  <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">                  <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isLeft) &#123;</span><br><span class="line">                              end = mid;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              start = mid;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                        start = mid;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        end = mid;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (isLeft) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">                        <span class="keyword">return</span> start;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">                        <span class="keyword">return</span> end;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">                        <span class="keyword">return</span> end;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">                        <span class="keyword">return</span> start;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 33. Search in Rotated Sorted Array</title>
    <url>/LeetCode/LeetCode%2033.%20Search%20in%20Rotated%20Sorted%20Array-20190429.html</url>
    <content><![CDATA[<h2 id="33-Search-in-Rotated-Sorted-Array"><a href="#33-Search-in-Rotated-Sorted-Array" class="headerlink" title="33. Search in Rotated Sorted Array"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. Search in Rotated Sorted Array</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<p><strong>两次二分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> last = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= nums[last]) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rot = end;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= nums[last]) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(nums, target, start, last);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(nums, target, <span class="number">0</span>, rot);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一次二分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[start] &lt; nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[start] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                    end = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    start = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[end]) &#123;</span><br><span class="line">                    start = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    end = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last = nums[end];</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= nums[end]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[end]) &#123;</span><br><span class="line">                    start = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    end = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &lt;= nums[end]) &#123;</span><br><span class="line">                    start = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt;= nums[mid]) &#123;</span><br><span class="line">                    end = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    start = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[start] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 32. Longest Valid Parentheses</title>
    <url>/LeetCode/LeetCode%2032.%20Longest%20Valid%20Parentheses-20190429.html</url>
    <content><![CDATA[<h2 id="32-Longest-Valid-Parentheses"><a href="#32-Longest-Valid-Parentheses" class="headerlink" title="32. Longest Valid Parentheses"></a><a href="https://leetcode.com/problems/longest-valid-parentheses/description/" target="_blank" rel="noopener">32. Longest Valid Parentheses</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(()&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;)()())&quot;</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()()&quot;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">            stack.push(-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                        stack.push(i);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stack.pop();</span><br><span class="line">                        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                              stack.push(i);</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              max = Math.max(max, i - stack.peek());</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(stack.peek()) == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                maxLen = Math.max(maxLen, i - stack.peek());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 31. Next Permutation</title>
    <url>/LeetCode/LeetCode%2031.%20Next%20Permutation-20190429.html</url>
    <content><![CDATA[<h2 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a><a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="noopener">31. Next Permutation</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be and use only constant  extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>
<p><code>1,2,3</code> → <code>1,3,2</code><br><code>3,2,1</code> → <code>1,2,3</code><br><code>1,1,5</code> → <code>1,5,1</code></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意此处是等于</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &lt;= nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i-<span class="number">1</span>, j);</span><br><span class="line">        reverse(nums, i, nums.length - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            swap(nums, i++, j--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 30. Substring with Concatenation of All Words</title>
    <url>/LeetCode/LeetCode%2030.%20Substring%20with%20Concatenation%20of%20All%20Words-20190428.html</url>
    <content><![CDATA[<h2 id="30-Substring-with-Concatenation-of-All-Words"><a href="#30-Substring-with-Concatenation-of-All-Words" class="headerlink" title="30. Substring with Concatenation of All Words"></a><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/" target="_blank" rel="noopener">30. Substring with Concatenation of All Words</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">  s &#x3D; &quot;barfoothefoobarman&quot;,</span><br><span class="line">  words &#x3D; [&quot;foo&quot;,&quot;bar&quot;]</span><br><span class="line">Output: [0,9]</span><br><span class="line">Explanation: Substrings starting at index 0 and 9 are &quot;barfoor&quot; and &quot;foobar&quot; respectively.</span><br><span class="line">The output order does not matter, returning [9,0] is fine too.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">  s &#x3D; &quot;wordgoodgoodgoodbestword&quot;,</span><br><span class="line">  words &#x3D; [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findSubstring</span><span class="params">(String s, String[] words)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || words == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || words.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = words[<span class="number">0</span>].length();</span><br><span class="line">        <span class="keyword">int</span> totalLen = words.length * len;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; totalLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Integer&gt; countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; tmpMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            countMap.put(word, countMap.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - totalLen + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            copyMap(countMap, tmpMap);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + totalLen; j += len) &#123;</span><br><span class="line">                String tmpStr = s.substring(j, j + len);</span><br><span class="line">                <span class="keyword">if</span> (!tmpMap.containsKey(tmpStr)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpMap.get(tmpStr) == <span class="number">1</span>)&#123;</span><br><span class="line">                    tmpMap.remove(tmpStr);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmpMap.put(tmpStr, tmpMap.get(tmpStr) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmpMap.isEmpty()) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyMap</span><span class="params">(Map&lt;String, Integer&gt; countMap, Map&lt;String, Integer&gt; tmpMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : countMap.keySet()) &#123;</span><br><span class="line">            tmpMap.put(key, countMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>HashMap</tag>
        <tag>Hard</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 29. Divide Two Integers</title>
    <url>/LeetCode/LeetCode%2029.%20Divide%20Two%20Integers-20190428.html</url>
    <content><![CDATA[<h2 id="29-Divide-Two-Integers"><a href="#29-Divide-Two-Integers" class="headerlink" title="29. Divide Two Integers"></a><a href="https://leetcode.com/problems/divide-two-integers/" target="_blank" rel="noopener">29. Divide Two Integers</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p>
<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>
<p>The integer division should truncate toward zero.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: dividend &#x3D; 10, divisor &#x3D; 3</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: dividend &#x3D; 7, divisor &#x3D; -3</span><br><span class="line">Output: -2</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>Both dividend and divisor will be 32-bit signed integers.</li>
<li>The divisor will never be 0.</li>
<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31</sup> − 1]. For the purpose of this problem, assume that your function returns 2<sup>31</sup> − 1 when the division result overflows.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (divisor == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> dividend;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> divid = (<span class="keyword">long</span>) dividend;</span><br><span class="line">        <span class="keyword">long</span> divir = (<span class="keyword">long</span>) divisor;</span><br><span class="line">        <span class="keyword">boolean</span> opposite = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (divid &lt; <span class="number">0</span> &amp;&amp; divir &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            opposite = <span class="keyword">true</span>;</span><br><span class="line">            divid = -divid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(divid &gt; <span class="number">0</span> &amp;&amp; divir &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            opposite = <span class="keyword">true</span>;</span><br><span class="line">            divir = -divir;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (divid &lt; <span class="number">0</span> &amp;&amp; divir &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            divir = -divir;</span><br><span class="line">            divid = -divid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> output = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> shift = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> oldd = divir;</span><br><span class="line">        <span class="keyword">while</span> (divir &lt;= divid)&#123;</span><br><span class="line">            <span class="keyword">while</span> (divir &lt;= divid)&#123;</span><br><span class="line">                divir &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                shift++;</span><br><span class="line">            &#125;</span><br><span class="line">            divir &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            shift--;</span><br><span class="line">            divid -= divir;</span><br><span class="line">            divir = oldd;</span><br><span class="line">            output += ((<span class="keyword">long</span>)<span class="number">1</span> &lt;&lt; shift);</span><br><span class="line">            shift = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opposite)&#123;</span><br><span class="line">            output = -output;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (output &gt; Integer.MAX_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Bits</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 28. Implement strStr()</title>
    <url>/LeetCode/LeetCode%2028.%20Implement%20strStr()-20190428.html</url>
    <content><![CDATA[<h2 id="28-Implement-strStr"><a href="#28-Implement-strStr" class="headerlink" title="28. Implement strStr()"></a><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">28. Implement strStr()</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Implement .</p>
<p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Clarification:</strong></p>
<p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>
<p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C’s   and Java’s  .</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong><br><strong>双重循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack == <span class="keyword">null</span> || needle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.length() - needle.length() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; needle.length(); j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (haystack.charAt(i + j) != needle.charAt(j)) &#123;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">if</span> (j == needle.length()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Robin Carp算法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack == <span class="keyword">null</span> || needle == <span class="keyword">null</span> || haystack.length() &lt; needle.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = needle.length();</span><br><span class="line">        <span class="keyword">int</span> MAX = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">int</span> MOD = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> HIGH = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            target = ((target * <span class="number">31</span>)  % MOD + needle.charAt(i)) % MOD;</span><br><span class="line">            HIGH = (HIGH * <span class="number">31</span>) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.length(); i++) &#123;</span><br><span class="line">            cur = ((cur * <span class="number">31</span>) % MOD + haystack.charAt(i)) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur == target &amp;&amp; haystack.substring(i - len + <span class="number">1</span>, i + <span class="number">1</span>).equals(needle)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = (cur - (haystack.charAt(i - len + <span class="number">1</span>) * HIGH) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>String</tag>
        <tag>Hash</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 26. Remove Duplicates from Sorted Array</title>
    <url>/LeetCode/LeetCode%2026.%20Remove%20Duplicates%20from%20Sorted%20Array-20190428.html</url>
    <content><![CDATA[<h3 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/" target="_blank" rel="noopener">26. Remove Duplicates from Sorted Array</a></h3><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a sorted array <em>nums</em>, remove the duplicates such that each element appear only <em>once</em> and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> with O(1) extra memory.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums being modified to  0, 1, 2, 3, and  4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what values are set beyond  the returned length.</span><br></pre></td></tr></table></figure>

<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span><br><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">      print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (nums[i] != nums[index]) &#123;</span><br><span class="line">                        nums[++index] = nums[i];</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 25. Reverse Nodes in k-Group</title>
    <url>/LeetCode/LeetCode%2025.%20Reverse%20Nodes%20in%20k-Group-20190428.html</url>
    <content><![CDATA[<h2 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25. Reverse Nodes in k-Group"></a><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/description/" target="_blank" rel="noopener">25. Reverse Nodes in k-Group</a></h2><p>Difficulty:: <strong>Hard</strong></p>
<p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p>
<p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p>
<p><strong>Example:</strong></p>
<p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>
<p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>
<p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>
<p><strong>Note:</strong></p>
<ul>
<li>Only constant extra memory is allowed.</li>
<li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li>
</ul>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       ListNode next;</span></span><br><span class="line"><span class="comment"> *       ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span> || k &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> head;</span><br><span class="line">           &#125;</span><br><span class="line">            ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            dummy.next = head;</span><br><span class="line">            head = dummy;</span><br><span class="line">            <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  head = reverseNextKNodes(head, k);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dummy.next;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// head -&gt; n1 -&gt; n2 -&gt; ... -&gt; nk -&gt; nk+1</span></span><br><span class="line">      <span class="comment">// =&gt;</span></span><br><span class="line">      <span class="comment">// head -&gt; nk -&gt; nk-1 -&gt; ... -&gt; n1 -&gt; nk+1</span></span><br><span class="line">      <span class="comment">// return n1</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseNextKNodes</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            ListNode nk = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">                  nk = nk.next;</span><br><span class="line">                  <span class="keyword">if</span> (nk == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            ListNode n1 = head.next;</span><br><span class="line">            ListNode prev = head;</span><br><span class="line">            ListNode cur = head.next;</span><br><span class="line">            <span class="keyword">while</span> (prev != nk) &#123;</span><br><span class="line">                  ListNode tmp = cur.next;</span><br><span class="line">                  cur.next = prev;</span><br><span class="line">                  prev = cur;</span><br><span class="line">                  cur = tmp;</span><br><span class="line">           &#125;</span><br><span class="line">            head.next = prev;</span><br><span class="line">            n1.next = cur;</span><br><span class="line">            <span class="keyword">return</span> n1;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 23. Merge k Sorted Lists</title>
    <url>/LeetCode/LeetCode%2023.%20Merge%20k%20Sorted%20Lists-20190428.html</url>
    <content><![CDATA[<h3 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a><a href="https://leetcode.com/problems/merge-k-sorted-lists/description/" target="_blank" rel="noopener">23. Merge k Sorted Lists</a></h3><p>Difficulty:: <strong>Hard</strong></p>
<p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        PriorityQueue&lt;ListNode&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.val - b.val);</span><br><span class="line">        <span class="keyword">for</span> (ListNode l : lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.offer(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            ListNode tmp = pq.poll();</span><br><span class="line">            cur.next = tmp;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span> (tmp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pq.offer(tmp.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者可以用归并排序的方法</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Hard</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 22. Generate Parentheses</title>
    <url>/LeetCode/LeetCode%2022.%20Generate%20Parentheses-20190428.html</url>
    <content><![CDATA[<h2 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22. Generate Parentheses"></a><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. Generate Parentheses</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<p>For example, given <em>n</em> = 3, a solution set is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        dfsHelper(n, result, <span class="keyword">new</span> <span class="keyword">char</span>[n * <span class="number">2</span>], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(<span class="keyword">int</span> n, List&lt;String&gt; result, <span class="keyword">char</span>[] chars, <span class="keyword">int</span> index, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == chars.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> String(chars));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chars[index] = <span class="string">'('</span>;</span><br><span class="line">        dfsHelper(n, result, chars, index + <span class="number">1</span>, p + <span class="number">1</span>);</span><br><span class="line">        chars[index] = <span class="string">')'</span>;</span><br><span class="line">        dfsHelper(n, result, chars, index + <span class="number">1</span>, p - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 21. Merge Two Sorted Lists</title>
    <url>/LeetCode/LeetCode%2021.%20Merge%20Two%20Sorted%20Lists-20190428.html</url>
    <content><![CDATA[<h3 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">21. Merge Two Sorted Lists</a></h3><p>Difficulty:: <strong>Easy</strong></p>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>


<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 24. Swap Nodes in Pairs</title>
    <url>/LeetCode/LeetCode%2024.%20Swap%20Nodes%20in%20Pairs-20190428.html</url>
    <content><![CDATA[<h2 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a><a href="https://leetcode.com/problems/swap-nodes-in-pairs/description/" target="_blank" rel="noopener">24. Swap Nodes in Pairs</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a  linked list, swap every two adjacent nodes and return its head.</p>
<p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       ListNode next;</span></span><br><span class="line"><span class="comment"> *       ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> head;</span><br><span class="line">           &#125;</span><br><span class="line">            ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            dummy.next = head;</span><br><span class="line">            head = dummy;</span><br><span class="line">            </span><br><span class="line">            ListNode prev = head;</span><br><span class="line">            ListNode cur = head.next;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  ListNode next = cur.next;</span><br><span class="line">                  ListNode tmp = cur.next.next;</span><br><span class="line">                  cur.next.next = cur;</span><br><span class="line">                  cur.next = tmp;</span><br><span class="line">                  prev.next = next;</span><br><span class="line">                  prev = cur;</span><br><span class="line">                  cur = tmp;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> dummy.next;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        head = dummy;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = reverse(head);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode next = head.next;</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">        ListNode tmp = head.next.next;</span><br><span class="line">        head.next.next = next;</span><br><span class="line">        next.next = tmp;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 27. Remove Element</title>
    <url>/LeetCode/LeetCode%2027.%20Remove%20Element-20190428.html</url>
    <content><![CDATA[<h2 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a><a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="noopener">27. Remove Element</a></h2><p>Difficulty: <strong>Easy</strong></p>
<p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> with O(1) extra memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 2.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span><br><span class="line"></span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure>

<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len &#x3D; removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span><br><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[index++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 20. Valid Parentheses</title>
    <url>/LeetCode/LeetCode%2020.%20Valid%20Parentheses-20190427.html</url>
    <content><![CDATA[<h2 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a><a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="noopener">20. Valid Parentheses</a></h2><p>Difficulty:: <strong>Easy</strong></p>
<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
</ol>
<p>Note that an empty string is also considered valid.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    stack.push(<span class="string">')'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                    stack.push(<span class="string">']'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                    stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.peek() == c) &#123;</span><br><span class="line">                        stack.pop();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以考虑用数组作为栈</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 19. Remove Nth Node From End of List</title>
    <url>/LeetCode/LeetCode%2019.%20Remove%20Nth%20Node%20From%20End%20of%20List-20190427.html</url>
    <content><![CDATA[<h2 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/" target="_blank" rel="noopener">19. Remove Nth Node From End of List</a></h2><p>Difficulty:: <strong>Medium</strong></p>
<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>Given <em>n</em> will always be valid.</p>
<p><strong>Follow up:</strong></p>
<p>Could you do this in one pass?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *       int val;</span></span><br><span class="line"><span class="comment"> *       ListNode next;</span></span><br><span class="line"><span class="comment"> *       ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> head;</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            ListNode slow = head;</span><br><span class="line">            ListNode fast = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  fast = fast.next;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> head.next;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">while</span> (fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  slow = slow.next;</span><br><span class="line">                  fast = fast.next;</span><br><span class="line">           &#125;</span><br><span class="line">            slow.next = slow.next.next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode node = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode prev = dummy;</span><br><span class="line">        <span class="keyword">while</span> (node.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        prev.next = prev.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 18. 4Sum</title>
    <url>/LeetCode/LeetCode%2018.%204Sum-20190427.html</url>
    <content><![CDATA[<h2 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a><a href="https://leetcode.com/problems/4sum/" target="_blank" rel="noopener">18. 4Sum</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>
<p><strong>Note:</strong></p>
<p>The solution set must not contain duplicate quadruplets.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [1, 0, -1, 0, -2, 2], and target &#x3D; 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; n - <span class="number">3</span>; m++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; nums[m] == nums[m - <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt; n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; m + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                              <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                              <span class="keyword">int</span> res = nums[m] + nums[i] + nums[j] + nums[k];</span><br><span class="line">                              <span class="keyword">if</span> (res == target) &#123;</span><br><span class="line">                                    result.add(Arrays.asList(nums[m], nums[i], nums[j++], nums[k--]));</span><br><span class="line">                                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                                          j++;</span><br><span class="line">                                   &#125;</span><br><span class="line">                                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                                          k--;</span><br><span class="line">                                   &#125;</span><br><span class="line">                             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res &gt; target) &#123;</span><br><span class="line">                                    k--;</span><br><span class="line">                             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    j++;</span><br><span class="line">                             &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 17. Letter Combinations of a Phone Number</title>
    <url>/LeetCode/LeetCode%2017.%20Letter%20Combinations%20of%20a%20Phone%20Number-20190427.html</url>
    <content><![CDATA[<h3 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/" target="_blank" rel="noopener">17. Letter Combinations of a Phone Number</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;23&quot;</span><br><span class="line">**Output:** [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="keyword">null</span> || digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[][] chars = &#123;</span><br><span class="line">            &#123;&#125;,&#123;&#125;,</span><br><span class="line">            &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        dfsHelper(digits, <span class="number">0</span>, chars, <span class="keyword">new</span> <span class="keyword">char</span>[digits.length()], result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(String digits, <span class="keyword">int</span> index, <span class="keyword">char</span>[][] chars, <span class="keyword">char</span>[] cur, List&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= digits.length()) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> String(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] cs = chars[digits.charAt(index) - <span class="string">'0'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cs.length; i++) &#123;</span><br><span class="line">            cur[index] = cs[i];</span><br><span class="line">            dfsHelper(digits, index + <span class="number">1</span>, chars, cur, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 16. 3Sum Closest</title>
    <url>/LeetCode/LeetCode%2016.%203Sum%20Closest-20190427.html</url>
    <content><![CDATA[<h3 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a><a href="https://leetcode.com/problems/3sum-closest/description/" target="_blank" rel="noopener">16. 3Sum Closest</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code>  such that the sum is closest to  <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [-1, 2, 1, -4], and target &#x3D; 1.</span><br><span class="line"></span><br><span class="line">The sum that is closest to the target is 2\. (-1 + 2 + 1 &#x3D; 2).</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> minSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                <span class="keyword">int</span> res = nums[i] + nums[j] + nums[k];</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(res - target) &lt; min) &#123;</span><br><span class="line">                    min = Math.abs(res - target);</span><br><span class="line">                    minSum = res;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (res == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res &gt; target) &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 15. 3Sum</title>
    <url>/LeetCode/LeetCode%2015.%203Sum-20190427.html</url>
    <content><![CDATA[<h3 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a><a href="https://leetcode.com/problems/3sum/description/" target="_blank" rel="noopener">15. 3Sum</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p><strong>Note:</strong></p>
<p>The solution set must not contain duplicate triplets.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length &amp;&amp; nums[i] &lt;= <span class="number">0</span>; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                        <span class="keyword">int</span> curSum = nums[i] + nums[j];</span><br><span class="line">                        <span class="keyword">int</span> index = Arrays.binarySearch(nums, j + <span class="number">1</span>, nums.length, -curSum);</span><br><span class="line">                        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                              List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                              tmp.add(nums[i]);</span><br><span class="line">                              tmp.add(nums[j]);</span><br><span class="line">                              tmp.add(nums[index]);</span><br><span class="line">                              result.add(tmp);</span><br><span class="line">                       &#125;</span><br><span class="line">                        <span class="keyword">while</span> (j + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[j+<span class="number">1</span>] == nums[j]) &#123;</span><br><span class="line">                              j++;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                  <span class="keyword">while</span> (i + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[i+<span class="number">1</span>] == nums[i]) &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两根指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                <span class="keyword">int</span> res = nums[i] + nums[j] + nums[k];</span><br><span class="line">                <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[j++], nums[k--]));</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                        k--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 14. Longest Common Prefix</title>
    <url>/LeetCode/LeetCode%2014.%20Longest%20Common%20Prefix-20190427.html</url>
    <content><![CDATA[<h3 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a><a href="https://leetcode.com/problems/longest-common-prefix/description/" target="_blank" rel="noopener">14. Longest Common Prefix</a></h3><p>Difficulty: <strong>Easy</strong></p>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">**Output:** &quot;fl&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">**Output:** &quot;&quot;</span><br><span class="line">**Explanation:** There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>All given inputs are in lowercase letters <code>a-z</code>.</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> minLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (String str : strs)</span><br><span class="line">            minLen = Math.min(minLen, str.length());</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> high = minLen;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (isCommonPrefix(strs, middle))</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, (low + high) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        String str1 = strs[<span class="number">0</span>].substring(<span class="number">0</span>,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (!strs[i].startsWith(str1))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= strs[j].length() || strs[j].charAt(i) != c) &#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 13. Roman to Integer</title>
    <url>/LeetCode/LeetCode%2013.%20Roman%20to%20Integer-20190427.html</url>
    <content><![CDATA[<h3 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a><a href="https://leetcode.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">13. Roman to Integer</a></h3><p>Difficulty: <strong>Easy</strong></p>
<p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Symbol**       **Value**</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>

<p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>
<ul>
<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li>
<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li>
<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>
</ul>
<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;III&quot;</span><br><span class="line">**Output:** 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;IV&quot;</span><br><span class="line">**Output:** 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;IX&quot;</span><br><span class="line">**Output:** 9</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;LVIII&quot;</span><br><span class="line">**Output:** 58</span><br><span class="line">**Explanation:** L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;MCMXCIV&quot;</span><br><span class="line">**Output:** 1994</span><br><span class="line">**Explanation:** M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> last = <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                    result += (last == <span class="string">'C'</span> ? <span class="number">800</span> : <span class="number">1000</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    result += (last == <span class="string">'C'</span> ? <span class="number">300</span> : <span class="number">500</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                    result += (last == <span class="string">'X'</span> ? <span class="number">80</span> : <span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                    result += (last == <span class="string">'X'</span> ? <span class="number">30</span> : <span class="number">50</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">                    result += (last == <span class="string">'I'</span> ? <span class="number">8</span> : <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                    result += (last == <span class="string">'I'</span> ? <span class="number">3</span> : <span class="number">5</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                    result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            last = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>Integer</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 12. Integer to Roman</title>
    <url>/LeetCode/LeetCode%2012.%20Integer%20to%20Roman-20190427.html</url>
    <content><![CDATA[<h3 id="12-Integer-to-Roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12. Integer to Roman"></a><a href="https://leetcode.com/problems/integer-to-roman/description/" target="_blank" rel="noopener">12. Integer to Roman</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Roman numerals are represented by seven different symbols:  <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Symbol**       **Value**</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>

<p>For example,  two is written as <code>II</code>  in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>
<ul>
<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.  </li>
<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.  </li>
<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>
</ul>
<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:**  3</span><br><span class="line">**Output:** &quot;III&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:**  4</span><br><span class="line">**Output:** &quot;IV&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:**  9</span><br><span class="line">**Output:** &quot;IX&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:**  58</span><br><span class="line">**Output:** &quot;LVIII&quot;</span><br><span class="line">**Explanation:** L &#x3D; 50, V &#x3D; 5, III &#x3D; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:**  1994</span><br><span class="line">**Output:** &quot;MCMXCIV&quot;</span><br><span class="line">**Explanation:** M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">char</span>[][] roman = &#123;&#123;<span class="string">'I'</span>, <span class="string">'V'</span>, <span class="string">'X'</span>&#125;,</span><br><span class="line">                                      &#123;<span class="string">'X'</span>, <span class="string">'L'</span>, <span class="string">'C'</span>&#125;,</span><br><span class="line">                                      &#123;<span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'M'</span>&#125;,</span><br><span class="line">                                      &#123;<span class="string">'M'</span>, <span class="string">'?'</span>, <span class="string">'?'</span>&#125;&#125;;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">3</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">int</span> a = num / cur;</span><br><span class="line">                  <span class="keyword">if</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (a &gt;= <span class="number">1</span> &amp;&amp; a &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">                              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) &#123;</span><br><span class="line">                                    sb.append(roman[index][<span class="number">0</span>]);</span><br><span class="line">                             &#125;</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">4</span>) &#123;</span><br><span class="line">                              sb.append(roman[index][<span class="number">0</span>]);</span><br><span class="line">                              sb.append(roman[index][<span class="number">1</span>]);</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt;= <span class="number">5</span> &amp;&amp; a &lt; <span class="number">9</span>) &#123;</span><br><span class="line">                              sb.append(roman[index][<span class="number">1</span>]);</span><br><span class="line">                              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a - <span class="number">5</span>; i++) &#123;</span><br><span class="line">                                    sb.append(roman[index][<span class="number">0</span>]);</span><br><span class="line">                             &#125;</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">9</span>) &#123;</span><br><span class="line">                              sb.append(roman[index][<span class="number">0</span>]);</span><br><span class="line">                              sb.append(roman[index][<span class="number">2</span>]);</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                  num %= cur;</span><br><span class="line">                  cur /= <span class="number">10</span>;</span><br><span class="line">                  index--;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>Integer</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 11. Container With Most Water</title>
    <url>/LeetCode/LeetCode%2011.%20Container%20With%20Most%20Water-20190427.html</url>
    <content><![CDATA[<h3 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a><a href="https://leetcode.com/problems/container-with-most-water/description/" target="_blank" rel="noopener">11. Container With Most Water</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Given <em>n</em> non-negative integers $a_1, a_2…a_n$, where each represents a point at coordinate $(i, a_i)$. <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at $(i, a_i)$  and $(i, 0)$. Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p><strong>Note:</strong> You may not slant the container and <em>n</em> is at least 2.</p>
<p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt=""></p>
<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain  is 49.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** [1,8,6,2,5,4,8,3,7]</span><br><span class="line">**Output:** 49</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<p>$O(n^2)$算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; height.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; height.length; j++) &#123;</span><br><span class="line">                        max = Math.max(max, (j - i) * Math.min(height[i], height[j]));</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$O(n)$算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            max = Math.max(max, (j - i) * Math.min(height[i], height[j]));</span><br><span class="line">            <span class="keyword">if</span> (height[i] &gt; height[j]) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 10. Regular Expression Matching</title>
    <url>/LeetCode/LeetCode%2010.%20Regular%20Expression%20Matching-20190426.html</url>
    <content><![CDATA[<h2 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10. Regular Expression Matching"></a><a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="noopener">10. Regular Expression Matching</a></h2><p>Difficulty: <strong>Hard</strong></p>
<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;.&#39; Matches any single character.</span><br><span class="line">&#39;*&#39; Matches zero or more of the preceding element.</span><br></pre></td></tr></table></figure>

<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>
<p><strong>Note:</strong></p>
<ul>
<li><code>s</code>  could be empty and contains only lowercase letters <code>a-z</code>.</li>
<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like  <code>.</code>  or  <code>*</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  &#39;*&#39; means zero or more of the precedeng  element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;ab&quot;</span><br><span class="line">p &#x3D; &quot;.*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aab&quot;</span><br><span class="line">p &#x3D; &quot;c*a*b&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  c can be repeated 0 times, a can be repeated 1 time. Therefore it matches &quot;aab&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;mississippi&quot;</span><br><span class="line">p &#x3D; &quot;mis*is*p*.&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>


<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">0</span> &amp;&amp; p.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (p.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> matchStar(s, p, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">char</span> p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="string">'.'</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> c == p;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">matchStar</span><span class="params">(String s, String p, <span class="keyword">int</span> indexS, <span class="keyword">int</span> indexP)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (indexP &gt;= p.length()) &#123;</span><br><span class="line">                  <span class="keyword">return</span> indexS &gt;= s.length();</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">char</span> c1 = p.charAt(indexP);</span><br><span class="line">            <span class="keyword">if</span> (indexP + <span class="number">1</span> &lt; p.length() &amp;&amp; p.charAt(indexP + <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (indexS &lt; s.length() &amp;&amp; match(s.charAt(indexS), c1)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> matchStar(s, p, indexS, indexP + <span class="number">2</span>) </span><br><span class="line">                              || matchStar(s, p, indexS + <span class="number">1</span>, indexP) </span><br><span class="line">                    <span class="comment">// 一个疑问是这里indexP + 2才对，为何indexP + 1也可以，并且更快10倍</span></span><br><span class="line">                              || matchStar(s, p, indexS + <span class="number">1</span>, indexP + <span class="number">1</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> matchStar(s, p, indexS, indexP + <span class="number">2</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (indexS &lt; s.length() &amp;&amp; match(s.charAt(indexS), c1)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> matchStar(s, p, indexS + <span class="number">1</span>, indexP + <span class="number">1</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>使用<code>dp[i][j]</code>代表s的前i位和p的前j位匹配情况</p>
<ol>
<li>如果 <code>p.charAt(j) == s.charAt(i)</code> 则 <code>dp[i + 1][j + 1] = dp[i][j]</code>;</li>
<li>如果 <code>p.charAt(j) == &#39;.&#39;</code> 则 <code>dp[i + 1][j + 1] = dp[i][j]</code>;</li>
<li>如果 <code>p.charAt(j) == &#39;*&#39;</code>，则分两种情况：<ol>
<li>如果p的j-1位与s的i位<strong>不</strong>匹配：<br> 那么把星号前的字母当成未出现，<code>dp[i + 1][j + 1] = dp[i + 1][j - 1]</code></li>
<li>否则星号有三种情况，即匹配0次，匹配1次和匹配多次， <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j + <span class="number">1</span>] <span class="comment">// 匹配多次</span></span><br><span class="line">                || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] <span class="comment">//匹配0次</span></span><br><span class="line">                || dp[i + <span class="number">1</span>][j] <span class="comment">// 匹配1次</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> &amp;&amp; p.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(i) == <span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i + <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j) == <span class="string">'.'</span> || p.charAt(j) == s.charAt(i)) &#123;</span><br><span class="line">                    dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'.'</span> || p.charAt(j - <span class="number">1</span>) == s.charAt(i)) &#123;</span><br><span class="line">                        dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i + <span class="number">1</span>][j] || dp[i][j + <span class="number">1</span>] || dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()][p.length()];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Divide Conquer</tag>
        <tag>Hard</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 9. Palindrome Number</title>
    <url>/LeetCode/LeetCode%209.%20Palindrome%20Number-20190426.html</url>
    <content><![CDATA[<h3 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="noopener">9. Palindrome Number</a></h3><p>Difficulty: <strong>Easy</strong></p>
<p>Determine whether an integer is a palindrome. An integer  is  a  palindrome when it  reads the same backward as forward.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** 121</span><br><span class="line">**Output:** true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** -121</span><br><span class="line">**Output:** false</span><br><span class="line">**Explanation:** From left to right, it reads -121\. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** 10</span><br><span class="line">**Output:** false</span><br><span class="line">**Explanation:** Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<p>Coud you solve  it without converting the integer to a string?</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            String s = Integer.toString(x);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>, j = s.length() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (s.charAt(i++) != s.charAt(j--)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> a = x;</span><br><span class="line">        <span class="keyword">long</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">            b = b * <span class="number">10</span> + a % <span class="number">10</span>;</span><br><span class="line">            a /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b == x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 8. String to Integer (atoi)</title>
    <url>/LeetCode/LeetCode%208.%20String%20to%20Integer%20(atoi)-20190426.html</url>
    <content><![CDATA[<h3 id="8-String-to-Integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8. String to Integer (atoi)"></a><a href="https://leetcode.com/problems/string-to-integer-atoi/description/" target="_blank" rel="noopener">8. String to Integer (atoi)</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Implement <code>&lt;span style=&quot;display: inline;&quot;&gt;atoi&lt;/span&gt;</code> which  converts a string to an integer.</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li>
<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,   2<sup>31  </sup>− 1]. If the numerical value is out of the range of representable values, INT_MAX (2<sup>31  </sup>− 1) or INT_MIN (−2<sup>31</sup>) is returned.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;42&quot;</span><br><span class="line">**Output:** 42</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;   -42&quot;</span><br><span class="line">**Output:** -42</span><br><span class="line">**Explanation:** The first non-whitespace character is &#39;-&#39;, which is the minus sign.</span><br><span class="line">              Then take as many numerical digits as possible, which gets 42.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;4193 with words&quot;</span><br><span class="line">**Output:** 4193</span><br><span class="line">**Explanation:** Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;words and 987&quot;</span><br><span class="line">**Output:** 0</span><br><span class="line">**Explanation:** The first non-whitespace character is &#39;w&#39;, which is not a numerical </span><br><span class="line">              digit or a +&#x2F;- sign. Therefore no valid conversion could be performed.</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;-91283472332&quot;</span><br><span class="line">**Output:** -2147483648</span><br><span class="line">**Explanation:** The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.</span><br><span class="line">              Thefore INT_MIN (−2&lt;sup&gt;31&lt;&#x2F;sup&gt;) is returned.</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> len = str.length();</span><br><span class="line">            <span class="keyword">boolean</span> isMinus = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                  <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">                  <span class="keyword">if</span> (c == <span class="string">' '</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'-'</span>) &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                        isMinus = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'+'</span>) &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Character.isDigit(c)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                  <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">                  <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                        ans = ans * <span class="number">10</span> + (<span class="keyword">int</span>)(c - <span class="string">'0'</span>);</span><br><span class="line">                        <span class="keyword">if</span> (ans - <span class="number">1</span> &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isMinus &amp;&amp; ans &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">if</span> (isMinus &amp;&amp; -ans &lt; Integer.MIN_VALUE) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (isMinus ? -ans : ans);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 7. Reverse Integer</title>
    <url>/LeetCode/LeetCode%207.%20Reverse%20Integer-20190426.html</url>
    <content><![CDATA[<h3 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="noopener">7. Reverse Integer</a></h3><p>Difficulty: <strong>Easy</strong></p>
<p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** 123</span><br><span class="line">**Output:** 321</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** -123</span><br><span class="line">**Output:** -321</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** 120</span><br><span class="line">**Output:** 21</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31 </sup>− 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> y = x;</span><br><span class="line">        <span class="keyword">boolean</span> isMinus = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            isMinus = <span class="keyword">true</span>;</span><br><span class="line">            y = -y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + y % <span class="number">10</span>;</span><br><span class="line">            y /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((!isMinus &amp;&amp; ans &gt; Integer.MAX_VALUE) || -ans &lt; Integer.MIN_VALUE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (isMinus ? -ans : ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 6. ZigZag Conversion</title>
    <url>/LeetCode/LeetCode%206.%20ZigZag%20Conversion-20190426.html</url>
    <content><![CDATA[<h3 id="6-ZigZag-Conversion"><a href="#6-ZigZag-Conversion" class="headerlink" title="6. ZigZag Conversion"></a><a href="https://leetcode.com/problems/zigzag-conversion/description/" target="_blank" rel="noopener">6. ZigZag Conversion</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>

<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>

<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">**Output:** &quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">**Output:** &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">**Explanation:**</span><br><span class="line"></span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = s.length();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> a = (numRows - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> b = a - <span class="number">2</span> * i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; l; j += a) &#123;</span><br><span class="line">                sb.append(s.charAt(j));</span><br><span class="line">                <span class="keyword">if</span> (b != <span class="number">0</span> &amp;&amp; b != a &amp;&amp; j + b &lt; l) &#123;</span><br><span class="line">                    sb.append(s.charAt(j + b));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || numRows &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder[] builders = <span class="keyword">new</span> StringBuilder[numRows];</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> direction = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; builders.length; i++) &#123;</span><br><span class="line">            builders[i] = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            builders[cur].append(s.charAt(i));</span><br><span class="line">            cur += direction;</span><br><span class="line">            <span class="keyword">if</span> (cur == numRows) &#123;</span><br><span class="line">                cur -= <span class="number">2</span>;</span><br><span class="line">                direction = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == -<span class="number">1</span>) &#123;</span><br><span class="line">                cur += <span class="number">2</span>;</span><br><span class="line">                direction = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; builders.length; i++) &#123;</span><br><span class="line">            builders[<span class="number">0</span>].append(builders[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builders[<span class="number">0</span>].toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 5. Longest Palindromic Substring</title>
    <url>/LeetCode/LeetCode%205.%20Longest%20Palindromic%20Substring-20190426.html</url>
    <content><![CDATA[<h3 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="noopener">5. Longest Palindromic Substring</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;babad&quot;</span><br><span class="line">**Output:** &quot;bab&quot;</span><br><span class="line">**Note:** &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** &quot;cbbd&quot;</span><br><span class="line">**Output:** &quot;bb&quot;</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>, maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            expand(s, i, i);</span><br><span class="line">            expand(s, i, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(lo, hi + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expand</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j - i - <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">            lo = i + <span class="number">1</span>;</span><br><span class="line">            hi = j - <span class="number">1</span>;</span><br><span class="line">            maxLen = j - i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Two Pointers</tag>
        <tag>Medium</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 4. Median of Two Sorted Arrays 两个排序数组的中位数</title>
    <url>/LeetCode/LeetCode%204.%20Median%20of%20Two%20Sorted%20Arrays-20190426.html</url>
    <content><![CDATA[<h3 id="4-Median-of-Two-Sorted-Arrays"><a href="#4-Median-of-Two-Sorted-Arrays" class="headerlink" title="4. Median of Two Sorted Arrays"></a><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener">4. Median of Two Sorted Arrays</a></h3><p>Difficulty: <strong>Hard</strong></p>
<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume <strong>nums1</strong> and <strong>nums2</strong>  cannot be both empty.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums1 &#x3D; [1, 3]</span><br><span class="line">nums2 &#x3D; [2]</span><br><span class="line"></span><br><span class="line">The median is 2.0</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums1 &#x3D; [1, 2]</span><br><span class="line">nums2 &#x3D; [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)&#x2F;2 &#x3D; 2.5</span><br></pre></td></tr></table></figure>



<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1 == <span class="keyword">null</span> || nums2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> total = nums1.length + nums2.length;</span><br><span class="line">        <span class="keyword">if</span> (total % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (findKth(nums1, nums2, <span class="number">0</span>, <span class="number">0</span>, total / <span class="number">2</span>) + findKth(nums1, nums2, <span class="number">0</span>, <span class="number">0</span>, total / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, nums2, <span class="number">0</span>, <span class="number">0</span>, total / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> start1, <span class="keyword">int</span> start2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start1 &gt;= nums1.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start2 &gt;= nums2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[start1 + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> val1 = start1 + k / <span class="number">2</span> - <span class="number">1</span> &lt; nums1.length ? nums1[start1 + k / <span class="number">2</span> - <span class="number">1</span>] : Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> val2 = start2 + k / <span class="number">2</span> - <span class="number">1</span> &lt; nums2.length ? nums2[start2 + k / <span class="number">2</span> - <span class="number">1</span>] : Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span> (val1 &lt; val2) &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, nums2, start1 + k / <span class="number">2</span>, start2, k - k / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, nums2, start1, start2 + k / <span class="number">2</span>, k - k / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Hard</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 3. Longest Substring Without Repeating Characters</title>
    <url>/LeetCode/LeetCode%203.%20Longest%20Substring%20Without%20Repeating%20Characters-20190426.html</url>
    <content><![CDATA[<h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">3. Longest Substring Without Repeating Characters</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>
<p><strong>Example 1:</strong></p>
<blockquote>
<p><strong>Input:</strong> “abcabcbb”<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The answer is <code>&quot;abc&quot;</code>, with the length of 3. </p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p><strong>Input:</strong> “bbbbb”<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The answer is <code>&quot;b&quot;</code>, with the length of 1.</p>
</blockquote>
<p><strong>Example 3:</strong></p>
<blockquote>
<p><strong>Input:</strong> “pwwkew”<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The answer is <code>&quot;wke&quot;</code>, with the length of 3.<br>Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em> and not a substring.</p>
</blockquote>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<h4 id="用队列作为窗口"><a href="#用队列作为窗口" class="headerlink" title="用队列作为窗口"></a>用队列作为窗口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Queue&lt;Character&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> l = s.length();</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">                  <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">                  <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (q.size() &gt; max) &#123;</span><br><span class="line">                              max = q.size();</span><br><span class="line">                       &#125;</span><br><span class="line">                        <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">                              <span class="keyword">char</span> a = q.poll();</span><br><span class="line">                              map.remove(a);</span><br><span class="line">                              <span class="keyword">if</span> (a == c) &#123;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                             &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                  q.offer(c);</span><br><span class="line">                  map.put(c, i);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> q.size() &gt; max ? q.size() : max;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="官方答案"><a href="#官方答案" class="headerlink" title="官方答案"></a>官方答案</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>]; <span class="comment">// current index of character</span></span><br><span class="line">        <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            i = Math.max(index[s.charAt(j)], i);</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            index[s.charAt(j)] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="记录最后一个重复的位置，在那之前的记录的位置视为无效"><a href="#记录最后一个重复的位置，在那之前的记录的位置视为无效" class="headerlink" title="记录最后一个重复的位置，在那之前的记录的位置视为无效"></a>记录最后一个重复的位置，在那之前的记录的位置视为无效</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        Arrays.fill(pos, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lastPos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pos[c] == -<span class="number">1</span> || pos[c] &lt; lastPos) &#123;</span><br><span class="line">                len++;</span><br><span class="line">                maxLen = Math.max(maxLen, len);</span><br><span class="line">                pos[c] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                lastPos = pos[c] + <span class="number">1</span>;</span><br><span class="line">                len = i - pos[c];</span><br><span class="line">                maxLen = Math.max(maxLen, len);</span><br><span class="line">                pos[c] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(len, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2. Add Two Numbers</title>
    <url>/LeetCode/LeetCode%202.%20Add%20Two%20Numbers-20190426.html</url>
    <content><![CDATA[<h2 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">2. Add Two Numbers</a></h2><p>Difficulty: <strong>Medium</strong></p>
<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Input:** (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">**Output:** 7 -&gt; 0 -&gt; 8</span><br><span class="line">**Explanation:** 342 + 465 &#x3D; 807.</span><br></pre></td></tr></table></figure>



<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode n1 = l1;</span><br><span class="line">        ListNode n2 = l2;</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(n1 != <span class="keyword">null</span> || n2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> val1 = n1 == <span class="keyword">null</span>? <span class="number">0</span> : n1.val;</span><br><span class="line">            <span class="keyword">int</span> val2 = n2 == <span class="keyword">null</span>? <span class="number">0</span> : n2.val;</span><br><span class="line">            <span class="keyword">int</span> sum = val1 + val2 + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            current.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">if</span>(n1 != <span class="keyword">null</span>) n1 = n1.next;</span><br><span class="line">            <span class="keyword">if</span>(n2 != <span class="keyword">null</span>) n2 = n2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            current.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Medium</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1. Two Sum</title>
    <url>/LeetCode/LeetCode%201.%20Two%20Sum-20190426.html</url>
    <content><![CDATA[<h2 id="题目原文"><a href="#题目原文" class="headerlink" title="题目原文"></a>题目原文</h2><h3 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">1. Two Sum</a></h3><p>Difficulty: <strong>Easy</strong></p>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>
<p><strong>Example:</strong></p>
<blockquote>
<p>Given nums = [2, 7, 11, 15], target = 9, Because nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,<br>return [<strong>0</strong>, <strong>1</strong>].</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>Language: <strong>Java</strong></p>
<h4 id="方法1-92"><a href="#方法1-92" class="headerlink" title="方法1 92%"></a>方法1 92%</h4><p>使用HashMap记录位置 $O(n)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i, map.get(complement)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以使用排序后两根指针的方法 $O(nlogn)$</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Easy</tag>
        <tag>HashMap</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Alfred常用功能和插件</title>
    <url>/Alfred%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E5%92%8C%E6%8F%92%E4%BB%B6-20181223.html</url>
    <content><![CDATA[<p>Alfred是Mac下一个非常强大的工具，可以看做高端版的 spotlight ，是使用Mac的程序员的效率神器。根据长时间的使用，我推荐以下的几个插件和功能。</p>
<h3 id="1-在输入框直接输入shell命令：-gt"><a href="#1-在输入框直接输入shell命令：-gt" class="headerlink" title="1. 在输入框直接输入shell命令：&gt;"></a>1. 在输入框直接输入shell命令：<code>&gt;</code></h3><p>Alfred自带了调用Mac的Terminal的命令，但是由于更常用<a href="https://www.iterm2.com/index.html" target="_blank" rel="noopener">iTerm2</a>，所以还需要进行一些配置。</p>
<p><img src="https://www.iterm2.com/images/AlfredForiTerm2Version3.png" alt="配置iTerm2"><br>打开Alfred的<code>Preferences</code>-&gt;<code>Features</code>-&gt;<code>Terminal / Shell</code>，将<code>Application</code>选为<code>custom</code>，然后将下面的编辑框中的脚本内容替换为这个iTerm2官方提供的脚本内容：<a href="https://gist.githubusercontent.com/gnachman/4cbe6743baa7fe07536b/raw/61fceba4a0b2624850ac1b4a20ac8ca48e07f7d2/gistfile1.txt" target="_blank" rel="noopener">点我访问</a></p>
<p>如果不起效，可以使用这个内容：<a href="https://github.com/stuartcryan/custom-iterm-applescripts-for-alfred" target="_blank" rel="noopener">https://github.com/stuartcryan/custom-iterm-applescripts-for-alfred</a></p>
<h3 id="2-快速查询文档-dash"><a href="#2-快速查询文档-dash" class="headerlink" title="2. 快速查询文档: dash"></a>2. 快速查询文档: <code>dash</code></h3><p><a href="https://github.com/Kapeli/Dash-Alfred-Workflow" target="_blank" rel="noopener">Dash-Alfred-Workflow</a></p>
<p>Dash 是 MacOS 上一个非常好用的文档查询器，文档应有尽有，比如Java，Python，Go等常用语言还有社区贡献的Github文档，类似的Windows版本是 Velocity 和 Zeal。</p>
<p>直接在Dash的Preferences里选择Integration然后选择Alfred即可</p>
<h3 id="3-变量快速命名：xt-dt"><a href="#3-变量快速命名：xt-dt" class="headerlink" title="3. 变量快速命名：xt,dt"></a>3. 变量快速命名：<code>xt</code>,<code>dt</code></h3><p><a href="https://github.com/xudaolong/CodeVar" target="_blank" rel="noopener">CodeVar</a><br>代码五分钟，变量名两小时，使用这个插件能够快速帮你起好变量名</p>
<h3 id="4-清除DNS缓存-fdns"><a href="#4-清除DNS缓存-fdns" class="headerlink" title="4.清除DNS缓存: fdns"></a>4.清除DNS缓存: <code>fdns</code></h3><p><a href="https://github.com/cdraeger/alfred2-flushdns-workflow/raw/master/export/flushdns.alfredworkflow" target="_blank" rel="noopener">alfred2-flushdns-workflow</a><br>快速清除系统 dns 缓存</p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Unix/macOS/Linux</tag>
        <tag>使用技巧</tag>
        <tag>Alfred</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 256/265 Paint House系列问题</title>
    <url>/LeetCode/Paint-House-20181209.html</url>
    <content><![CDATA[<h2 id="题目原文"><a href="#题目原文" class="headerlink" title="题目原文"></a>题目原文</h2><h3 id="256-Paint-House"><a href="#256-Paint-House" class="headerlink" title="256. Paint House"></a><a href="https://leetcode.com/problems/paint-house/description/" target="_blank" rel="noopener">256. Paint House</a></h3><p>Difficulty: <strong>Easy</strong></p>
<p>There are a row of <em>n</em> houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>
<p>The cost of painting each house with a certain color is represented by a <code>_n_ x _3_</code> cost matrix. For example, <code>costs[0][0]</code> is the cost of painting house 0 with color red; <code>costs[1][2]</code> is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.</p>
<p><strong>Note:</strong><br>All costs are positive integers.</p>
<p><strong>Example:</strong></p>
<p><strong>Input:</strong> <code>[[17,2,17],[16,16,5],[14,3,19]]</code><br><strong>Output:</strong> 10<br><strong>Explanation:</strong> Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.  Minimum cost: 2 + 5 + 3 = 10.</p>
<a id="more"></a>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = costs.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            costs[i][<span class="number">0</span>] += Math.min(costs[i - <span class="number">1</span>][<span class="number">1</span>], costs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">1</span>] += Math.min(costs[i - <span class="number">1</span>][<span class="number">0</span>], costs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">2</span>] += Math.min(costs[i - <span class="number">1</span>][<span class="number">0</span>], costs[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(costs[m - <span class="number">1</span>][<span class="number">0</span>], Math.min(costs[m - <span class="number">1</span>][<span class="number">1</span>], costs[m - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="题目原文-1"><a href="#题目原文-1" class="headerlink" title="题目原文"></a>题目原文</h2><h3 id="265-Paint-House-II"><a href="#265-Paint-House-II" class="headerlink" title="265. Paint House II"></a><a href="https://leetcode.com/problems/paint-house-ii/description/" target="_blank" rel="noopener">265. Paint House II</a></h3><p>Difficulty: <strong>Hard</strong></p>
<p>There are a row of <em>n</em> houses, each house can be painted with one of the <em>k</em> colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>
<p>The cost of painting each house with a certain color is represented by a <code>n x k</code> cost matrix. For example, <code>costs[0][0]</code> is the cost of painting house 0 with color 0; <code>costs[1][2]</code> is the cost of painting house 1 with color 2, and so on… Find the minimum cost to paint all houses.</p>
<p><strong>Note:</strong><br>All costs are positive integers.</p>
<p><strong>Example:</strong></p>
<p><strong>Input:</strong> <code>[[1,5,3],[2,9,4]]</code><br><strong>Output:</strong> 5<br><strong>Explanation:</strong><br>Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5;<br>Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. </p>
<p><strong>Follow up:</strong><br>Could you solve it in <em>O</em>(<em>nk</em>) runtime?</p>
<h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = costs.length;</span><br><span class="line">        <span class="keyword">int</span> k = costs[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 上一列的最小值和次小值，当前列的最小值和次小值</span></span><br><span class="line">        <span class="keyword">int</span>[] min = &#123;<span class="number">0</span>, <span class="number">0</span>, Integer.MAX_VALUE, Integer.MAX_VALUE&#125;;</span><br><span class="line">        <span class="comment">// 上一列最小值坐标，当前列最小值坐标</span></span><br><span class="line">        <span class="keyword">int</span>[] minIndex = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == minIndex[<span class="number">0</span>]) &#123;</span><br><span class="line">                    costs[i][j] += min[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    costs[i][j] += min[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (costs[i][j] &lt;= min[<span class="number">2</span>]) &#123;</span><br><span class="line">                    min[<span class="number">3</span>] = min[<span class="number">2</span>];</span><br><span class="line">                    min[<span class="number">2</span>] = costs[i][j];</span><br><span class="line">                    minIndex[<span class="number">1</span>] = j;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (costs[i][j] &lt; min[<span class="number">3</span>]) &#123;</span><br><span class="line">                    min[<span class="number">3</span>] = costs[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            min[<span class="number">0</span>] = min[<span class="number">2</span>];</span><br><span class="line">            min[<span class="number">1</span>] = min[<span class="number">3</span>];</span><br><span class="line">            min[<span class="number">2</span>] = Integer.MAX_VALUE;</span><br><span class="line">            min[<span class="number">3</span>] = Integer.MAX_VALUE;</span><br><span class="line">            minIndex[<span class="number">0</span>] = minIndex[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 198/213/337 House Robber 系列问题</title>
    <url>/LeetCode/House-Robber-20181209.html</url>
    <content><![CDATA[<hr>
<h2 id="题目原文"><a href="#题目原文" class="headerlink" title="题目原文"></a>题目原文</h2><h3 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337. House Robber III"></a><a href="https://leetcode.com/problems/house-robber-iii/description/" target="_blank" rel="noopener">337. House Robber III</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>
<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>
<p><strong>Example 1:</strong><br><strong>Input:</strong> [3,2,3,null,3,null,1]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   3</span><br><span class="line"> \   \ </span><br><span class="line">  3   1</span><br></pre></td></tr></table></figure>
<p><strong>Output:</strong> 7<br><strong>Explanation:</strong>  Maximum amount of money the thief can rob = <font color="red" style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">3</font> <span style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">+</span> <font color="red" style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">3</font> <span style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">+</span> <font color="red" style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">1</font> <span style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">=</span> <strong>7</strong><span style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; display: inline;">.</span></p>
<p><strong>Example 2:</strong><br><strong>Input:</strong> [3,4,5,1,3,null,1]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  4   5</span><br><span class="line"> &#x2F; \   \ </span><br><span class="line">1   3   1</span><br></pre></td></tr></table></figure>

<p><strong>Output:</strong> 9<br><strong>Explanation:</strong>  Maximum amount of money the thief can rob = <font color="red" style="display: inline;">4</font> + <font color="red" style="display: inline;">5</font> = <strong>9</strong>.</p>
<a id="more"></a>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p><strong>动态规划</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = helper(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.max(result[<span class="number">0</span>], result[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组第1位表示使用root的值，第二位表示不用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] helper(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] left = helper(root.left);</span><br><span class="line">        <span class="keyword">int</span>[] right = helper(root.right);</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        result[<span class="number">0</span>] = root.val + left[<span class="number">1</span>] + right[<span class="number">1</span>];</span><br><span class="line">        result[<span class="number">1</span>] = Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>记忆化搜索</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;TreeNode, Integer&gt; trueMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Map&lt;TreeNode, Integer&gt; falseMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(helper(root, <span class="keyword">true</span>), helper(root, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">boolean</span> grab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (grab) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trueMap.containsKey(root)) &#123;</span><br><span class="line">                <span class="keyword">return</span> trueMap.get(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> val = root.val + helper(root.left, <span class="keyword">false</span>) + helper(root.right, <span class="keyword">false</span>);</span><br><span class="line">                trueMap.put(root, val);</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (falseMap.containsKey(root)) &#123;</span><br><span class="line">                <span class="keyword">return</span> falseMap.get(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> val = Math.max(helper(root.left, <span class="keyword">true</span>), helper(root.left, <span class="keyword">false</span>)) + </span><br><span class="line">                    Math.max(helper(root.right, <span class="keyword">true</span>), helper(root.right, <span class="keyword">false</span>));</span><br><span class="line">                falseMap.put(root, val);</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>动态规划</tag>
        <tag>记忆化搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 218. The Skyline Problem 空中轮廓线问题</title>
    <url>/LeetCode/The%20Skyline%20Problem%20%E7%A9%BA%E4%B8%AD%E8%BD%AE%E5%BB%93%E7%BA%BF%E9%97%AE%E9%A2%98-20181208.html</url>
    <content><![CDATA[<h2 id="题目原文"><a href="#题目原文" class="headerlink" title="题目原文"></a>题目原文</h2><h3 id="218-The-Skyline-Problem"><a href="#218-The-Skyline-Problem" class="headerlink" title="218. The Skyline Problem"></a><a href="https://leetcode.com/problems/the-skyline-problem/description/" target="_blank" rel="noopener">218. The Skyline Problem</a></h3><p>Difficulty: <strong>Hard</strong></p>
<p>A city’s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are <strong>given the locations and height of all the buildings</strong> as shown on a cityscape photo (Figure A), write a program to <strong>output the skyline</strong> formed by these buildings collectively (Figure B).</p>
<img alt="Buildings" src="https://assets.leetcode.com/uploads/2018/10/22/skyline1.png" style="max-width: 45%; border-width: 0px; border-style: solid;"> 
<img alt="Skyline Contour" src="https://assets.leetcode.com/uploads/2018/10/22/skyline2.png" style="max-width: 45%; border-width: 0px; border-style: solid;">

<p>The geometric information of each building is represented by a triplet of integers <code>[Li, Ri, Hi]</code>, where <code>Li</code> and <code>Ri</code> are the x coordinates of the left and right edge of the ith building, respectively, and <code>Hi</code> is its height. It is guaranteed that <code>0 ≤ Li, Ri ≤ INT_MAX</code>, <code>0 &lt; Hi ≤ INT_MAX</code>, and <code>Ri - Li &gt; 0</code>. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</p>
<p>For instance, the dimensions of all buildings in Figure A are recorded as: <code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ]</code> .</p>
<p>The output is a list of “<strong>key points</strong>“ (red dots in Figure B) in the format of <code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> that uniquely defines a skyline. <strong>A key point is the left endpoint of a horizontal line segment</strong>. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.</p>
<p>For instance, the skyline in Figure B should be represented as:<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>.</p>
<p><strong>Notes:</strong></p>
<ul>
<li>The number of buildings in any input list is guaranteed to be in the range <code>[0, 10000]</code>.</li>
<li>The input list is already sorted in ascending order by the left x position <code>Li</code>.</li>
<li>The output list must be sorted by the x position.</li>
<li>There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...[2 3], [4 5], [12 7], ...]</code></li>
</ul>
<a id="more"></a>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这是一个经典的扫描线问题，给了一堆建筑，并需要找出轮廓，轮廓的定义就是重叠的建筑物中远远看去<strong>最大高度</strong>发生变化的点，这里称之为<code>轮廓点</code>。</p>
<p>根据扫描线问题的基本思路，我们将一个建筑物拆解成两条线，一条上升，一条下降，这样，每条线具有三个特征，即<strong>坐标，高度和上升状态</strong>，我们要去找到<strong>最大高度发生变化的点</strong>，就需要对这些线进行<strong>排序访问</strong>。</p>
<h3 id="如何知道当前的最大高度"><a href="#如何知道当前的最大高度" class="headerlink" title="如何知道当前的最大高度"></a>如何知道当前的最大高度</h3><p>显然，在动态添加线时，使用最大堆（PriorityQueue)或者红黑树Set（TreeSet）可以轻易求出当前的最大高度，但是在删除一个建筑时，<code>TreeSet</code>的表现是最好的<code>O(log(n))</code>，所以我们选用<code>TreeSet</code>用于存储目前存在的建筑，并使用<code>first()</code>(按高度从大到小)方法获取最高的高度。</p>
<h3 id="对线以什么顺序排序"><a href="#对线以什么顺序排序" class="headerlink" title="对线以什么顺序排序"></a>对线以什么顺序排序</h3><p>经过分析，我们可以按照以下优先级对访问顺序进行排序：</p>
<ol>
<li><strong>先比较坐标，坐标不同时，按照自然顺序，坐标小的优先</strong></li>
<li><strong>坐标相同时，比较上升和下降状态，上升优先</strong> </li>
<li><strong>坐标和状态均相同时，如果是上升状态，则高度更高的优先；下降状态时，高度更低的优先</strong></li>
</ol>
<p>下面是对这个优先级的解释：</p>
<blockquote>
<ol>
<li>先按照坐标比较这一点毋庸置疑，扫描线问题都是这样做的。</li>
<li>坐标相同时，如果不管状态，直接比较高度，就可能出现高低交替的情况，导致同一个坐标出现数个轮廓点。所以需要先按照状态排序，问题是上升优先还是下降优先呢？考虑一种情况，就是两个相同高度的建筑连接在一起，按照题意，这种情况下中间其实是没有发生高度变化的。如果先下降，后上升，那么最大高度就发生了两次变化，这明显是不对的。所以应该先上升，后下降。</li>
<li>如果坐标和状态状态相同的话呢？显然，对于上升状态，我们应该先扫更高的，这样那些矮的同坐标的上升线无法改变最大高度，便不会记录最高点。对于下降状态，我们要删除建筑，所以应该先把低的删除，避免引起高度的变化。比如有两个坐标重叠的建筑，高度不同，那么在扫描到下降线时必须要先下降高度小的，否则高度会发生两次变化。</li>
</ol>
</blockquote>
<h3 id="如何控制建筑的进出"><a href="#如何控制建筑的进出" class="headerlink" title="如何控制建筑的进出"></a>如何控制建筑的进出</h3><p>还有一个问题就在于我们如何控制一个建筑的进出，目前使用了线的一个成员变量记录下降线对应的上升线。</p>
<h3 id="还有什么问题？"><a href="#还有什么问题？" class="headerlink" title="还有什么问题？"></a>还有什么问题？</h3><p>在定义<code>TreeSet</code>的Comparator的时候需要注意，<code>TreeSet</code>在插入元素时是根据Comparator判断元素是否相等的，这样如果Comparator的<code>compare()</code>方法中只根据高度来判断时，同一高度的建筑物将只能存储一个！所以有必要再加入一个参数用于区分这些建筑，可以直接使用<code>hashCode()</code>或者新增一个参数。</p>
<p>下面是个人的代码，仅供参考，使用了<code>opposite</code>成员变量记录下降线对应的上升线。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UP = <span class="number">1</span>, DOWN = -<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x, height, status;</span><br><span class="line">        <span class="keyword">public</span> Line opposite;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Line</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> height, <span class="keyword">int</span> status, Line opposite)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">            <span class="keyword">this</span>.opposite = opposite;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getSkyline(<span class="keyword">int</span>[][] buildings) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (buildings == <span class="keyword">null</span> || buildings.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将建筑拆成两条线，并记录下降线对应的上升线</span></span><br><span class="line">        Line[] lines = <span class="keyword">new</span> Line[buildings.length * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buildings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] b = buildings[i];</span><br><span class="line">            <span class="keyword">int</span> j = i * <span class="number">2</span>;</span><br><span class="line">            lines[j] = <span class="keyword">new</span> Line(b[<span class="number">0</span>], b[<span class="number">2</span>], UP, <span class="keyword">null</span>);</span><br><span class="line">            lines[j + <span class="number">1</span>] = <span class="keyword">new</span> Line(b[<span class="number">1</span>], b[<span class="number">2</span>], DOWN, lines[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按照三个优先级排序</span></span><br><span class="line">        Arrays.sort(lines, <span class="keyword">new</span> Comparator&lt;Line&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Line l1, Line l2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (l1.x != l2.x) &#123;</span><br><span class="line">                    <span class="keyword">return</span> l1.x - l2.x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (l1.status != l2.status) &#123;</span><br><span class="line">                    <span class="keyword">return</span> l2.status - l1.status;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (l1.status == UP) &#123;</span><br><span class="line">                    <span class="keyword">return</span> l2.height - l1.height;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> l1.height - l2.height;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 使用lambda表达式定义TreeSet的Comparator，此处的heap只是形象表达，内部数据结构其实是红黑树</span></span><br><span class="line">        TreeSet&lt;Line&gt; heightHeap = <span class="keyword">new</span> TreeSet&lt;&gt;((a, b) -&gt; b.height == a.height ? a.hashCode() - b.hashCode() : b.height - a.height);</span><br><span class="line">        <span class="keyword">int</span> curMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Line tmp : lines) &#123;</span><br><span class="line">            <span class="comment">// 上升时将建筑加入</span></span><br><span class="line">            <span class="keyword">if</span> (tmp.status == UP ) &#123;</span><br><span class="line">                heightHeap.add(tmp);</span><br><span class="line">                <span class="keyword">if</span> (tmp.height &gt; curMax) &#123;</span><br><span class="line">                    result.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;tmp.x, tmp.height&#125;);</span><br><span class="line">                    curMax = tmp.height;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 下降时将建筑删除</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                heightHeap.remove(tmp.opposite);</span><br><span class="line">                <span class="comment">// 特殊情况：删除以后没有建筑</span></span><br><span class="line">                <span class="keyword">if</span> (heightHeap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    curMax = <span class="number">0</span>;</span><br><span class="line">                    result.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;tmp.x, <span class="number">0</span>&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightHeap.first().height &lt; curMax) &#123;</span><br><span class="line">                    curMax = heightHeap.first().height;</span><br><span class="line">                    result.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;tmp.x, curMax&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 412. Maximum XOR of Two Numbers in an Array 的Trie树加分治法解法</title>
    <url>/LeetCode/Maximum%20XOR%20of%20Two%20Numbers%20in%20an%20Array%E8%A7%A3%E6%B3%95-20181204.html</url>
    <content><![CDATA[<h2 id="题目原文"><a href="#题目原文" class="headerlink" title="题目原文"></a>题目原文</h2><h3 id="421-Maximum-XOR-of-Two-Numbers-in-an-Array"><a href="#421-Maximum-XOR-of-Two-Numbers-in-an-Array" class="headerlink" title="421. Maximum XOR of Two Numbers in an Array"></a><a href="https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/" target="_blank" rel="noopener">421. Maximum XOR of Two Numbers in an Array</a></h3><p>Difficulty: <strong>Medium</strong></p>
<p>Given a <strong>non-empty</strong> array of numbers, a<sub style="display: inline;">0</sub>, a<sub style="display: inline;">1</sub>, a<sub style="display: inline;">2</sub>, … , a<sub style="display: inline;">n-1</sub>, where 0 ≤ a<sub style="display: inline;">i</sub> &lt; 2<sup>31</sup>.</p>
<p>Find the maximum result of a<sub style="display: inline;">i</sub> XOR a<sub style="display: inline;">j</sub>, where 0 ≤ <em>i</em>, <em>j</em> &lt; <em>n</em>.</p>
<p>Could you do this in O(<em>n</em>) runtime?</p>
<a id="more"></a>

<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3, 10, 5, 25, 2, 8]</span><br><span class="line"></span><br><span class="line">Output: 28</span><br><span class="line"></span><br><span class="line">Explanation: The maximum result is 5 ^ 25 &#x3D; 28.</span><br></pre></td></tr></table></figure>

<h2 id="解法：使用-Trie-树（前缀树）和分治法"><a href="#解法：使用-Trie-树（前缀树）和分治法" class="headerlink" title="解法：使用 Trie 树（前缀树）和分治法"></a>解法：使用 Trie 树（前缀树）和分治法</h2><blockquote>
<p>时间复杂度 O(<em>n</em>)</p>
</blockquote>
<p>根据题目描述，我们需要找到最大的异或值，异或代表了两个数的二进制的不同程度，且越高位越不一样，异或值就越大，由于是按位比较，所以使用 Trie 树来当做基础数据结构。</p>
<p>我们可以总结出以下几点：</p>
<ol>
<li>因为整型的位数是固定的，排除第一位符号位，Trie 树的高度是常数的，即最高<code>32</code>层（包括<code>root</code>）</li>
<li>由于只有<code>0</code>和<code>1</code>两个子节点，所以为了节省空间，可以使用<code>二叉树</code>的方式（或者数组和 HashMap 均可）</li>
<li>由于是异或，前缀位如果相同，异或值都是 0，所以可以先找到第一个两个子节点都不为空的节点当做<code>root</code></li>
</ol>
<p><img src="https://assets.leetcode.com/users/kniost/image_1540195211.png" alt="image"></p>
<p>以此构建 Trie 树，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TrieNode zero, one;</span><br><span class="line">        <span class="keyword">boolean</span> isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieTree</span> </span>&#123;</span><br><span class="line">        TrieNode root;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">            TrieNode cur = root;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 根据num在j位置的数目判断应该向0还是向1</span></span><br><span class="line">                <span class="keyword">int</span> b = (j &amp; num) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="number">0</span> &amp;&amp; cur.zero == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cur.zero = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="number">1</span> &amp;&amp; cur.one == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cur.one = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = b == <span class="number">0</span> ? cur.zero : cur.one;</span><br><span class="line">                j &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur.isEnd = <span class="keyword">true</span>;</span><br><span class="line">            cur.val = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TrieTree tree = <span class="keyword">new</span> TrieTree();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            tree.insert(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取真正需要开始判断的root</span></span><br><span class="line">        TrieNode cur = tree.root;</span><br><span class="line">        <span class="keyword">while</span> (cur.one == <span class="keyword">null</span> || cur.zero == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur = cur.zero != <span class="keyword">null</span> ? cur.zero : cur.one;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxHelper(cur.one, cur.zero);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分治法，原则就是尽量使两个分支的高位不同</span></span><br><span class="line"><span class="comment">     * one是1分支，zero是0分支，可以看做图中的左区和右区</span></span><br><span class="line"><span class="comment">     * 1. 当1分支的下一位只有1时，找0分支的0，若没有，就找0分支的1</span></span><br><span class="line"><span class="comment">     * 2. 当1分支的下一位只有0时，找0分支的1，若没有，就找0分支的0</span></span><br><span class="line"><span class="comment">     * 3. 当1分支的下一位0，1均有时，看0分支：如果0分支只有1，则1分支走0，反之则走1</span></span><br><span class="line"><span class="comment">     * 4. 当0，1两个分支均有两个下一位时，尝试【1分支走1，0分支走0】和【1分支走0，0分支走1】两条路线并取最大值</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">maxHelper</span><span class="params">(TrieNode one, TrieNode zero)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (one.isEnd &amp;&amp; zero.isEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> one.val ^ zero.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (one.zero == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> maxHelper(one.one, zero.zero == <span class="keyword">null</span> ? zero.one : zero.zero);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (one.one == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> maxHelper(one.zero, zero.one == <span class="keyword">null</span> ? zero.zero : zero.one);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zero.zero == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> maxHelper(one.zero, zero.one);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zero.one == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> maxHelper(one.one, zero.zero);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(maxHelper(one.one, zero.zero), maxHelper(one.zero, zero.one));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本文同样发在了 LeetCode 讨论区</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>Trie树</tag>
      </tags>
  </entry>
  <entry>
    <title>Python使用Pillow(PIL)库生成圆形图片的方法和优化</title>
    <url>/python%E7%94%9F%E6%88%90%E5%9C%86%E8%A7%92%E5%9B%BE%E7%89%87-20181129.html</url>
    <content><![CDATA[<blockquote>
<p>以下 PIL 和 Pillow 两个库只出现 Pillow， 但 PIL 具有相同功能</p>
</blockquote>
<p>最近遇到了在一张海报中贴上圆形头像的需求，贴图可以使用<code>Pillow</code>直接的<code>Image.paste()</code>方法，但是要实现圆形的话，也有许多方法，下面把我想到的和搜集到的方法一一说明。</p>
<a id="more"></a>

<p>基本的思路就是：<strong>让圆形外的像素透明</strong></p>
<p>一个直接的方法是：图像首先转成’RGBA’，获取 size 找到中心点，然后取半径 r，遍历所有像素并对圆外的像素的 alpha 赋值为 0。但是这样写起来费劲，可以使用更好的方法来做。</p>
<h2 id="1-使用Image-putalpha修改-alpha-层"><a href="#1-使用Image-putalpha修改-alpha-层" class="headerlink" title="1. 使用Image.putalpha修改 alpha 层"></a>1. 使用<code>Image.putalpha</code>修改 alpha 层</h2><p>这个方法中我们使用替换图像 alpha 层的方法实现除圆形外的区域透明，这种方法在我们只需要一个圆形图案时使用比较好</p>
<p>先来看官方文档</p>
<blockquote>
<p><code>Image.putalpha(alpha)[source]</code><br>Adds or replaces the alpha layer in this image. If the image does not have an alpha layer, it’s converted to “LA” or “RGBA”. The new layer must be either “L” or “1”.</p>
</blockquote>
<p>这个方法添加或者替换图像的 alpha 层，如果本来没有 alpha 层将自动转为有 alpha 层的图像，需要一个模式为<code>&#39;L&#39;</code>（灰度）或者<code>&#39;1&#39;</code>（黑白）的图像</p>
<p>上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先获取一个alpha图像:</span></span><br><span class="line"><span class="comment"># 假设经过前处理后已经有 w == h</span></span><br><span class="line">w, h = img.size</span><br><span class="line"><span class="comment"># 研究源码后发现，如果使用'1'模式的图像，内部也会转换成'L'，所以直接用'L'即可</span></span><br><span class="line">alpha_layer = Image.new(<span class="string">'L'</span>, (w, w), <span class="number">0</span>)</span><br><span class="line">draw = ImageDraw.Draw(alpha_layer)</span><br><span class="line">draw.ellipse((<span class="number">0</span>, <span class="number">0</span>, w, w), fill=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着替换图像的alpha层</span></span><br><span class="line">img.putalpha(alpha_layer)</span><br></pre></td></tr></table></figure>

<p>实现效果：<br><img src="http://pic.kniost.top/putalpha-2018122.jpg-blog" alt="putalpha-2018122"></p>
<h2 id="2-使用-Image-paste蒙版粘贴圆形图片"><a href="#2-使用-Image-paste蒙版粘贴圆形图片" class="headerlink" title="2. 使用 Image.paste蒙版粘贴圆形图片"></a>2. 使用 <code>Image.paste</code>蒙版粘贴圆形图片</h2><p>如果我们要在一张图片上盖上一个圆形头像，就需要用到 paste 方法，paste 方法有一个可选参数是 mask，我们看官方文档：</p>
<blockquote>
<p>If a mask is given, this method updates only the regions indicated by the mask. You can use either “1”, “L” or “RGBA” images (in the latter case, the alpha band is used as mask). Where the mask is 255, the given image is copied as is. Where the mask is 0, the current value is preserved. Intermediate values will mix the two images together, including their alpha channels if they have them.</p>
</blockquote>
<p>意思是我们同样需要一个圆形蒙版，圆形部分透明度是 255，其他部分透明度为 0，但是这个<code>mask</code>可以使用一个<code>&#39;RGBA&#39;</code>模式的图像。</p>
<p>上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先获取一个alpha图像:</span></span><br><span class="line"><span class="comment"># 假设经过前处理后已经有 w == h</span></span><br><span class="line">w, h = img_paste.size</span><br><span class="line">alpha_layer = Image.new(<span class="string">'L'</span>, (w, w), <span class="number">0</span>)</span><br><span class="line">draw = ImageDraw.Draw(alpha_layer)</span><br><span class="line">draw.ellipse((<span class="number">0</span>, <span class="number">0</span>, w, w), fill=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着直接使用其作为模板粘贴即可</span></span><br><span class="line">img_origin.paste(image_paste, (<span class="number">0</span>, <span class="number">0</span>), alpha_layer)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="http://pic.kniost.top/paste_with_mask-2018122.jpg-blog" alt="paste_with_mask-2018122"></p>
<h2 id="3-锯齿问题和解决方案"><a href="#3-锯齿问题和解决方案" class="headerlink" title="3. 锯齿问题和解决方案"></a>3. 锯齿问题和解决方案</h2><p>使用透明度替换方法时很容易发现直接使用原始大小的 alpha 层会出现多边形现象，也就是圆的周围会出现锯齿，目前想到的解决方案就是：<strong>先绘制一个 scale 倍大的圆，然后使用<code>resize</code>方法将其缩小，使用<code>ANTIALIAS</code>(即<code>LANCZOS</code>)采样器</strong></p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先获取一个alpha图像:</span></span><br><span class="line">scale = <span class="number">3</span></span><br><span class="line"><span class="comment"># 假设经过前处理后已经有 w == h</span></span><br><span class="line">w, h = img_paste.size</span><br><span class="line"><span class="comment"># 使用新的半径构建alpha层</span></span><br><span class="line">r = w * scale</span><br><span class="line">alpha_layer = Image.new(<span class="string">'L'</span>, (r, r), <span class="number">0</span>)</span><br><span class="line">draw = ImageDraw.Draw(alpha_layer)</span><br><span class="line">draw.ellipse((<span class="number">0</span>, <span class="number">0</span>, r, r), fill=<span class="number">255</span>)</span><br><span class="line"><span class="comment"># 使用ANTIALIAS采样器缩小图像</span></span><br><span class="line">alpha_layer = alpha_layer.resize((w, w), Image.ANTIALIAS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着直接使用其作为模板粘贴即可</span></span><br><span class="line">img_origin.paste(image_paste, (<span class="number">0</span>, <span class="number">0</span>), alpha_layer)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="http://pic.kniost.top/circle_result_antialias-2018122.png-blog" alt="scale为1，3，5的对比图"></p>
<p>上面为<code>scale</code>分别为 1，3，5 时的对比图，可以明显发现边缘已经基本没有锯齿感了。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>网络通信安全详细解析，还原Alice和Bob的通信加密的进化史</title>
    <url>/HTTPS-SSL%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%EF%BC%8C%E8%BF%98%E5%8E%9FAlice%E5%92%8CBob%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8A%A0%E5%AF%86%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2-20181128.html</url>
    <content><![CDATA[<p>网络安全是非常重要的，正所谓知其然，还要知其所以然，了解一些常用的安全基础也非常重要。下面从基础加密到 HTTPS/SSL 协议来逐步讲解 Alice 和 Bob 的秘密通信发展史，本文不会深入协议的细节，而是更希望通过介绍一些些常用概念帮助读者更加好的去理解网络安全加密设计的方法和目的，以及所考虑的问题。</p>
<a id="more"></a>

<h2 id="1、何为安全的通信"><a href="#1、何为安全的通信" class="headerlink" title="1、何为安全的通信"></a>1、何为安全的通信</h2><p>在密码学中，经常用 Alice 和 Bob 两个人指代通信双方，本文也不例外。我们首先假设<code>Alice</code>和<code>Bob</code>是一对秘密情人，他们之间的情书报文（Message）要在一个不安全的媒体（比如网络）上进行传递，中间有窃听者<code>Trudy</code>可以在通信中截获、修改、插入和删除他们的通信报文。为了不避免被发现，他们必须要保证通信的安全性，那么在仅考虑通信过程中的安全时，需要确保以下几点：</p>
<ol>
<li><strong>机密性(Confidentiality)</strong> ：只有发送方和所期望的接收方能够理解传输报文的内容，也就是需要加密。通俗来说，Alice 写的情书，只有 Bob 能看懂到底写的什么，Trudy 拿到了也看不懂具体的内容。</li>
<li><strong>报文完整性(Message Integrity)</strong> ： Alice 和 Bob 需要确保双方通信的内容再传输中不被篡改或者意外改动。</li>
<li><strong>端点鉴别（End-point Authentication)</strong> ：Alice 要知道自己确实是跟 Bob 进行了通信，而不是 Trudy 伪装成的 Bob</li>
</ol>
<h2 id="2、从密码学开始"><a href="#2、从密码学开始" class="headerlink" title="2、从密码学开始"></a>2、从密码学开始</h2><p>要达到安全通信的第一个目标，必须要使用密码技术，密码技术由来已久，但是目前应用的技术都是近 40 年间发明的。<strong>密码技术可以让发送方伪装数据，而入侵者无法从截取到的数据中获取任何信息，而接收方可以从伪装的数据中恢复出原始数据。</strong> 一个典型的框图如下：</p>
<p><img src="http://pic.kniost.top/%E5%AF%86%E7%A0%81%E5%AD%A62-1-20181128.png-blog" alt="密码学2-1"></p>
<p>也就是 Alice 拥有一个密钥$K_A$，<strong>加密算法</strong>以$K_A$和明文信息$m$为输入，以密文为输出。用符号$K_A(m)$表示用密钥$K_A$加密明文信息$m$后的输出。<br>同样的，Bob 也有一个密钥 $K_B$，在接收到密文$K_A(m)$后，将密钥$K_B$和密文利用<strong>解密算法</strong>计算，得到明文$m$。<br>这样，即使 Trudy 获取到了传输过程中的密文，也无法直接获取信息。</p>
<p>人类历史上的诸多加密方式，一般都是采用<strong>对称加密</strong>的方式，这种方式要求加密方和解密方拥有相同的密钥，也就是$K_A$和$K_B$必须保持相同并且对外界是保密的。在二战时期，情报机构就需要互相窃听和计算对方的加密密钥以获取情报。</p>
<p>但是，在对称加密中存在一个问题：如果要传递密钥，首先就要经过传输，那么如何确保这种传输是安全的呢？在 1976 年，两位科学家 Diffie 和 Hellman 论证了一个解决这个问题的算法，并开创了<strong>公开密钥加密系统</strong>的先河。下面我将分别介绍两种加密方式。</p>
<blockquote>
<p>Tips: <strong>钥</strong>这个字有多个读音，但是在密钥中念<strong>yuè</strong>而不是 yào，事实上，除了钥匙中念 yào 之外，其他基本都念 yuè，比如北门锁钥这类成语。</p>
</blockquote>
<h3 id="2-1-对称密钥体系"><a href="#2-1-对称密钥体系" class="headerlink" title="2.1 对称密钥体系"></a>2.1 对称密钥体系</h3><p>整个对称密码的发展史，便是引入随机性的过程。</p>
<h4 id="2-1-1-古老的凯撒密码"><a href="#2-1-1-古老的凯撒密码" class="headerlink" title="2.1.1 古老的凯撒密码"></a>2.1.1 古老的凯撒密码</h4><p>凯撒密码的原理非常简单， 也就是将某个字符固定地替换成偏移为 k 的相应的字符。对于英文文本来说，一共 26 个字母，那么凯撒密码就是一个 25 种可能性的密钥（可以偏移的值从 1~25，允许循环偏移）。<br>比如一个明文 <strong>bob, i love you</strong>，使用密钥$C(k=3)$，就可以变成 <strong>ere, l oryh brx</strong>。但是，一旦了解了传输过程中使用了凯撒密码，就非常容易破解了，毕竟只有 25 种可能性直接采用暴力方法即可破解。</p>
<h4 id="2-1-2-改进版的凯撒密码——单码替代密码"><a href="#2-1-2-改进版的凯撒密码——单码替代密码" class="headerlink" title="2.1.2 改进版的凯撒密码——单码替代密码"></a>2.1.2 改进版的凯撒密码——单码替代密码</h4><p>如果不止使用偏移，而是固定的有一个字母表，针对每一个字母对应一个无规律的新的字母，这样加密的安全性就大大提高了。比如一个明文 <strong>bob, i love you</strong>，通过一个固定的对应表，就可以变成 <strong>nkn, s gktc wky</strong>。对于英文来说，密钥的长度就是 26 位，可能性有$26! \approx 10^{26}$种，要直接暴力破解是非常难的。</p>
<p>那这样是不是就够了呢，毕竟暴力计算太过复杂了。不不不，还不够，毕竟语言文本是有规律的，比如说字母 e 的出现频率在英文文本中是 13%，字母 t 是 9%，而且还有许多常用的词有相同的组合，比如 “in”、”it”、”the”、”ing”这类。这些信息量能够大大缩小搜索的范围，搜索难度发生了数量级的缩小。根据攻击者所了解的信息程度，下面是可能的几种攻击方式。</p>
<ul>
<li><strong>唯密文攻击</strong> 当攻击者不了解明文内容的任何信息时，他只能去猜测字母的对应方式，而英语中的字母统计信息可以帮助其破解。</li>
<li><strong>已知明文攻击</strong> 如果攻击者知道明文或者密文中的一些固定匹配时，就可以确定许多信息。比如知道 Alice 给 Bob 发的信息中必然存在 “alice” 这五个字母时，就能获取到 5 个字母的对应模式。使破解工作减轻许多。</li>
<li><strong>选择明文攻击</strong> 如果攻击者能够让发送方固定发送一个明文报文，并且得到明文报文的密文时，就能快速破解出所有的对应字母。比如如果 Trudy 能让 Alice 发送一个包含所有字母的句子 _”The quick fox jumps over the lazy dog”_，那么就能直接破译出所有的对应字母。</li>
</ul>
<h4 id="2-1-3-多码替代密码"><a href="#2-1-3-多码替代密码" class="headerlink" title="2.1.3 多码替代密码"></a>2.1.3 多码替代密码</h4><p>多码替代密码是对单码替代密码的一种改进，它的基本思想就是使用多个单码替代密码，并在明文报文的特定位置使用特定的单码替代密码。举一个简单的例子，使用两个凯撒密码，$C_1(k=3)$和$C_2(k=17)$，对一个英文文本，奇数位使用$C_1$加密，偶数位使用$C_2$加密，这样也能大大增强安全性。</p>
<blockquote>
<p>这里推荐一部本尼迪克特（神探夏洛克中夏洛克扮演者）表演的电影《模拟游戏》，讲的是二战期间图灵破解德军通信密码的故事，在此可以更深刻地感受到加密和破解之间的较量。</p>
</blockquote>
<h4 id="2-1-4-块密码"><a href="#2-1-4-块密码" class="headerlink" title="2.1.4 块密码"></a>2.1.4 块密码</h4><p>下面把目光转向现代，计算机时代数据的传输都是通过二进制进行的，所以不能简单地对 0 和 1 做单码替代加密。那应该怎么办呢？</p>
<p>那便是<strong>对比特块进行加密</strong>，也就是将一个长度为$k$的明文比特块对应到一个长度为$k$的密文比特块上。比如，在$k=3$时，明文有$2^3=8$种可能，那么其单码替代密码有$8!=40320$种可能，这种程度的运算，一台现代的电脑能很快算完，也就是说，$k=3$是不靠谱的。</p>
<p>每当选取一个大小为$k$的比特块时，密码表的长度是$2^{k}$个，可能性有$2^k!$种，当 k 是 64 的时候，虽然加密性已经不错了，但此时密码表的大小已经到达了一个天文数字，通信双方直接存储整个密码表是不现实的。我们换一种思路来想，如果需要知道某个比特块的映射比特块，而又不能负担存储所有映射可能性，那选择就只有一个了——<strong>使用函数</strong>。</p>
<p>目前流行的块密码，包括 DES(Data Encryption Standard)和 AES(Advanced Encryption Standard) 均是采用的函数。比如 AES 使用 128 比特块，可以使用 128、192、256 比特长的密钥进行操作。</p>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>密码学</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语言中不可忽视的细节</title>
    <url>/Java/Java%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%B8%8D%E5%8F%AF%E5%BF%BD%E8%A7%86%E7%9A%84%E7%BB%86%E8%8A%82-20180625.html</url>
    <content><![CDATA[<blockquote>
<p>学习Java时，总会有一些问题需要弄得非常清楚明白，才不至于在写程序的时候犯下各类小错误，这就是本文存在的意义。本文着重于语法细节的查漏补缺，所以不会太全面。在已经能够日常使用Java的情况下参考此文可能更有意义。本文大部分内容来自于Java名著《Thinking in Java》，并将根据看书的进度不断更新。</p>
</blockquote>
<a id="more"></a>

<h2 id="1-基本类型"><a href="#1-基本类型" class="headerlink" title="1. 基本类型"></a>1. 基本类型</h2><ul>
<li>Java中每种基本类型所占的存储空间大小是固定的。如下表：</li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>大小</th>
<th>最小值</th>
<th>最大值</th>
<th>包装类型</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>16 bits</td>
<td>Unicode 0</td>
<td>Unicode 2^16 - 1</td>
<td>Character</td>
</tr>
<tr>
<td>byte</td>
<td>8 bits</td>
<td>- 128</td>
<td>+ 127</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>16 bits</td>
<td>- 2^15</td>
<td>+ 2^15 - 1</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>32 bits</td>
<td>- 2^31</td>
<td>+ 2^31 - 1</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>64 bits</td>
<td>- 2^64</td>
<td>+ 2^64 - 1</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>32 bits</td>
<td>IEEE754</td>
<td>IEEE754</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>64 bits</td>
<td>IEEE754</td>
<td>IEEE754</td>
<td>Double</td>
</tr>
<tr>
<td>void</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>Void</td>
</tr>
</tbody></table>
<blockquote>
<p>“-“ 代表语言中没有明确指定，编译器自行决定</p>
</blockquote>
<ul>
<li>基本类型存储在堆栈（Stack）中，同一个值拥有同一个引用，而对象存储在堆（Heap）中</li>
<li>高精度计算使用<code>BitInteger</code>类和<code>BigDecimal</code>类</li>
<li>直接定义常量时，加入后缀字符表示类型，使用<code>L</code>或<code>l</code>表示<code>long</code>（尽量不要使用<code>l</code>，因为看起来像<code>1</code>）；使用<code>F</code>或者<code>f</code>表示<code>float</code>，使用<code>D</code>或者<code>d</code>表示<code>double</code></li>
<li>在直接写整数时，加入前缀表示进制不同，整数默认为十进制，加上前缀<code>0x</code>或者<code>0X</code>表示16进制（0<del>F），加上前缀<code>0</code>表示八进制（0</del>7）</li>
<li><code>Integer</code>和<code>Long</code>有<code>toBinaryString()</code>方法将整数转为2进制</li>
</ul>
<h2 id="2-成员默认值"><a href="#2-成员默认值" class="headerlink" title="2. 成员默认值"></a>2. 成员默认值</h2><p>一个变量被声明时没有初始化，则具有默认值。</p>
<ul>
<li>类的成员若是基本类型，则默认值如下表，若是对象，则默认为<code>null</code></li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’(null)</td>
</tr>
<tr>
<td>byte</td>
<td>(byte)0</td>
</tr>
<tr>
<td>short</td>
<td>(short)0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>0.0d</td>
</tr>
</tbody></table>
<blockquote>
<p>需要注意的是局部变量不适用于该默认值，得到的是随机的值，然而在编译过程就不能通过，这也是Java较好的一点（毕竟程序员们不是都自律:)</p>
</blockquote>
<h2 id="3-注释和文档（javadoc）"><a href="#3-注释和文档（javadoc）" class="headerlink" title="3. 注释和文档（javadoc）"></a>3. 注释和文档（javadoc）</h2><p>详细见：<a href="http://www.oracle.com/technetwork/articles/java/index-137868.html" target="_blank" rel="noopener">How to Write Doc Comments for the Javadoc Tool</a></p>
<ul>
<li>javadoc 只能为<code>public</code>和<code>protected</code>成员进行文档注释</li>
</ul>
<h2 id="4-按值传递还是按引用传递"><a href="#4-按值传递还是按引用传递" class="headerlink" title="4. 按值传递还是按引用传递"></a>4. 按值传递还是按引用传递</h2><p>按值传递大概指的是像C/C++这类，在传递给函数参数时复制一份，而不对传入的对象进行修改的函数调用方法。<br>而在Java中，对象都是指向某个内容的引用，多个对象可以同时引用同一个内容，而没有被引用的内容则会被回收。在传递参数并对参数进行修改时，修改的就是对象指向的引用而非复制一份。</p>
<h2 id="5-操作符"><a href="#5-操作符" class="headerlink" title="5. 操作符"></a>5. 操作符</h2><h3 id="1-算术操作符"><a href="#1-算术操作符" class="headerlink" title="1. 算术操作符"></a>1. 算术操作符</h3><ul>
<li>一元加号<code>+</code>将把较小类型的操作数提升为<code>int</code></li>
<li>和C/C++中一样，<code>++</code>/<code>--</code>在操作数前，表示先运算再使用，而在操作数后时，则是先使用当前的值，再进行运算</li>
</ul>
<h3 id="2-关系操作符"><a href="#2-关系操作符" class="headerlink" title="2. 关系操作符"></a>2. 关系操作符</h3><ul>
<li><code>==</code>和<code>!=</code>比较的是对象的引用，对于基本类型，由于相同的值拥有相同的引用，所以可以直接比较，而对象之间则不能。某些类重写了<code>equals()</code>方法可以用于比较对象的内容，比如<code>String</code>类</li>
</ul>
<h3 id="3-逻辑操作符"><a href="#3-逻辑操作符" class="headerlink" title="3. 逻辑操作符"></a>3. 逻辑操作符</h3><ul>
<li><p><code>&amp;&amp;</code>、<code>||</code>和<code>!</code>这三个运算符只能用于<code>boolean</code>及其包装类</p>
</li>
<li><p><strong>短路</strong> 使用逻辑操作符时，在按照顺序进行运算时，一旦能够明确整个表达式的值，就不再计算表达式余下的部分了。</p>
<p>  如表达式<code>true &amp;&amp; false &amp;&amp; true &amp;&amp; true</code>，在运算到 false 的时候就不会继续运算了，比如有一个<code>String</code>变量<code>str</code>判空时，直接使用条件<code>str != null &amp;&amp; str.isEmpty()</code>即可。</p>
</li>
</ul>
<h2 id="6-break和continue的标签用法"><a href="#6-break和continue的标签用法" class="headerlink" title="6. break和continue的标签用法"></a>6. <code>break</code>和<code>continue</code>的标签用法</h2><p>如以下代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标签只能加在外侧迭代上方</span></span><br><span class="line">label1:</span><br><span class="line"><span class="comment">// 本示例使用两个迭代，外部迭代和内部迭代</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">		<span class="comment">// 以下四个操作符并非同时存在</span></span><br><span class="line">		<span class="comment">// 使用`continue`继续执行内部迭代</span></span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">		<span class="comment">// 使用`break`跳过所有本次内部迭代</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">// 直接从label1处继续</span></span><br><span class="line">		<span class="keyword">continue</span> label1;</span><br><span class="line">		<span class="comment">// 中断并跳出label1所指的迭代</span></span><br><span class="line">		<span class="keyword">break</span> label1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-重载（Override）"><a href="#7-重载（Override）" class="headerlink" title="7. 重载（Override）"></a>7. 重载（Override）</h2><p>为了达到相同的目的，使用同样的方法名，就要使用重载。重载的方法用参数列表的参数数目、参数类型和参数顺序区分（尽量不要使用顺序区分）。</p>
<h2 id="8-初始化"><a href="#8-初始化" class="headerlink" title="8. 初始化"></a>8. 初始化</h2><ul>
<li>在类的内部，变量定义的先后顺序决定了初始化的先后顺序，即使变量定义在方法之间，它们仍然会在任何方法（包括构造器）被调用之前得到初始化。</li>
<li>静态初始化操作只在首次生成该类的对象时，或者首次访问属于该类的静态数据成员时才会被执行一次。  </li>
<li>Java中也有实例初始化语句，用法是使用一个大括号将语句包围，它会在构造器之前调用，这种语法对于匿名内部类的初始化是必须的。</li>
<li>数组在初始化时，使用花括号初始化时，最后有一个逗号是合法的，比如 <code>int [] i = {1, 2, 3,};</code></li>
</ul>
<h2 id="9-访问权限控制"><a href="#9-访问权限控制" class="headerlink" title="9. 访问权限控制"></a>9. 访问权限控制</h2><ul>
<li>访问权限控制等级，从最大权限到最小以此为：<code>public</code>、<code>protected</code>、包访问权限（没有关键词）和<code>private</code></li>
</ul>
<h2 id="10-final关键词"><a href="#10-final关键词" class="headerlink" title="10. final关键词"></a>10. <code>final</code>关键词</h2><ul>
<li>在<strong>修饰基本类型</strong>时，表示其值不可变</li>
<li>在<strong>修饰对象引用</strong>时，表示指向的对象不可变，即不能再指向其他对象，但是对象的内容是可变的</li>
<li>允许不初始化的<code>final</code>（<code>blank final</code>），但必须在使用前被初始化。</li>
<li><strong>修饰方法</strong>时，表示不可被子类所覆盖（用final作为内嵌调用的做法已经过时了）</li>
<li>类中所有<code>private</code>方法都隐式指定为<code>final</code>，即不可继承（当然，在子类中，声明一个同样的方法是可以的，但并非是继承的，而是全新的方法）</li>
<li><strong>修饰类</strong>时，表示禁止该类被继承，一个<code>final</code>类中所有方法都被隐式指定为<code>final</code></li>
</ul>
<h2 id="11-多态（运行时绑定-后期绑定）"><a href="#11-多态（运行时绑定-后期绑定）" class="headerlink" title="11. 多态（运行时绑定/后期绑定）"></a>11. 多态（运行时绑定/后期绑定）</h2><ul>
<li>Java中除了<code>static</code>和<code>final</code>方法（<code>private</code>也是<code>final</code>的），其他所有方法都是后期动态绑定的。也就是说，使用基类的方法时，只要子类覆盖了该方法，就会调用子类的方法，因为编译器知道了其具体类型。</li>
<li>初始化一个对象时，首先将分配给对象的存储空间都初始化为二进制的0，然后先构造根基类，接着依次构造到基类，再按照顺序构造成员，最后调用构造方法。</li>
<li>编写构造器时，应当使用尽可能简单的方法使对象进入正常状态，如果可以的话，避免调用其他方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 的使用姿势 —— 程序员篇</title>
    <url>/Mac%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AF%87-20180314.html</url>
    <content><![CDATA[<blockquote>
<p>自从前几年入手了 MacBook Pro，感觉配合 macOS 开发越来越舒服，也眼见着 macOS 平台的软件越来越多。所以，我想在此向广大 Mac 用户推荐一点 Mac 的使用方式，就拿程序员们应该掌握的工具来举例吧~</p>
</blockquote>
<a id="more"></a>

<h1 id="1-包管理工具"><a href="#1-包管理工具" class="headerlink" title="1. 包管理工具"></a>1. 包管理工具</h1><p>包管理工具就是类似于 RHEL系列（RedHat，CentOS 等） 上的 <code>yum</code>，Debian系列（Ubuntu，Debian）的 <code>apt-get</code>，主要用来安装一些开源软件，这些工具的存在大大简化了开源软件的安装过程，要不然安装一个软件可能需要提前安装一大堆依赖的软件。<br>在 macOS 上目前被普遍使用的就是 <a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a> 了。</p>
<h2 id="1-1-Homebrew-安装"><a href="#1-1-Homebrew-安装" class="headerlink" title="1.1 Homebrew 安装"></a>1.1 Homebrew 安装</h2><p>Homebrew通过以下命令安装即可(首先要有 ruby 环境，一般都自带了～)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>

<p>Homebrew上所有的软件以ruby代码封装成formula的形式提供，通过命令<code>brew install xxx</code>下载formula，得到formula中定义的软件的地址，通过wget获取软件安装包，然后本地解压编译。</p>
<h2 id="1-2-Homebrew-常用命令介绍"><a href="#1-2-Homebrew-常用命令介绍" class="headerlink" title="1.2 Homebrew 常用命令介绍"></a>1.2 Homebrew 常用命令介绍</h2><ul>
<li><p><strong>搜索软件包</strong> <code>brew search xxx</code></p>
</li>
<li><p><strong>安装软件包</strong> <code>brew install xxx</code></p>
</li>
<li><p><strong>列出已安装的软件包</strong> <code>brew list</code></p>
</li>
<li><p><strong>删除软件包</strong> <code>brew uninstall xxx</code></p>
</li>
<li><p><strong>更新Homebrew</strong> <code>brew update</code></p>
</li>
<li><p><strong>检查更新</strong> <code>brew outdated</code></p>
</li>
<li><p><strong>升级所有可以升级的软件</strong> <code>brew upgrade</code></p>
</li>
<li><p><strong>清理不用的版本和安装包缓存</strong> <code>brew cleanup</code></p>
</li>
</ul>
<h1 id="2-终端"><a href="#2-终端" class="headerlink" title="2. 终端"></a>2. 终端</h1><p>终端我推荐iTerm2，很方便的快捷键呼出和隐藏，强大的分屏支持，方便的历史命令自动完成，丰富的UI定制等等，具体可参考 <a href="http://iterm2.com/features.html" target="_blank" rel="noopener">iTerm 2 Features</a>。</p>
<p>并且强烈建议大家花点时间学习并打造一个用得顺溜的iTerm2。</p>
<h1 id="3-Zsh"><a href="#3-Zsh" class="headerlink" title="3. Zsh"></a>3. Zsh</h1><blockquote>
<p>熟悉Shell的人都知道命令行界面在大部分情况下是可以高效替代图形界面，但因为命令行界面使用门槛高，而且图形界面长得更讨人喜欢，所以命令行界面才沦为少数人的工具，可以说是码农专用工具。</p>
</blockquote>
<p>在这里我要推荐大家放弃自带的 bash，去使用 zsh。为什么要用 zsh？可以不分大小写自动补全！还有更多精彩功能可以<a href="https://www.zhihu.com/question/21418449" target="_blank" rel="noopener">查看知乎讨论</a></p>
<p>zsh 本身要配置的地方太多，但已经有人做好了美妙的管理 zsh 的方法，那就是 <code>oh my zsh</code>（<a href="http://ohmyz.sh" target="_blank" rel="noopener">进入官网</a>），GitHub 上 stars 截至目前高达 5w+</p>
<h2 id="3-1-安装方法"><a href="#3-1-安装方法" class="headerlink" title="3.1 安装方法"></a>3.1 安装方法</h2><p>进入终端，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>
<p>回车，即可安装好 zsh</p>
<h2 id="3-2-oh-my-zsh-的配置"><a href="#3-2-oh-my-zsh-的配置" class="headerlink" title="3.2 oh-my-zsh 的配置"></a>3.2 oh-my-zsh 的配置</h2><p>我们通过配置 <code>~/.zshrc</code> 可以让oh-my-zsh看起来焕然一新。</p>
<ul>
<li><p>选择一个漂亮的theme，终端是使用频率最高的软件之一，UI不美观会影响工作心情，不同主题的样式可参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">官方 WiKi</a>。</p>
</li>
<li><p>配置你需要的插件，在<code>~/.zshrc</code>中编辑plugins=(git ruby osx brew sublime)将你需要的插件选上，所有支持的插件可参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">官方 WiKi</a></p>
</li>
</ul>
<p><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">这里有一篇博客</a>对oh-my-zsh有一个不错的介绍。</p>
<h1 id="4-编辑器"><a href="#4-编辑器" class="headerlink" title="4. 编辑器"></a>4. 编辑器</h1><p>这里推荐VSCode。这个就不多说了～</p>
<h1 id="5-IDE"><a href="#5-IDE" class="headerlink" title="5. IDE"></a>5. IDE</h1><p>这里要重点推荐一下Jetbrains系列的IDE工具，比如久负盛名的 <code>IntelliJ IDEA</code>，还有其他类似的比如<code>RubyMine</code>，<code>WebStorm</code>，<code>PyCharm</code>，<code>Clion</code>等等。</p>
<h1 id="6-效率工具Alfred"><a href="#6-效率工具Alfred" class="headerlink" title="6. 效率工具Alfred"></a>6. 效率工具Alfred</h1><p>作为检索工具，Mac自带的Spotlight功能已经十分强大了，但Alfred提供了除了检索以外更多的功能，我已经将Alfred作为我一切程序的入口，快捷键呼出-&gt;输入命令-&gt;打开，整个操作一气呵成，完全不需要借助touch pad或者鼠标，大大提高了工作的效率。</p>
<h1 id="7-文档撰写Markdown"><a href="#7-文档撰写Markdown" class="headerlink" title="7. 文档撰写Markdown"></a>7. 文档撰写Markdown</h1><p>写文档应该是大部分码农比较痛苦的事情，特别是纠结于排版的时候，因此基于纯文本书写的Markdown在程序员之间开始流行开来，很多程序员使用Markdown来书写博客，著名的博客平台WordPress和Jekyll都能很好的支持Markdown，包括github的Readme也是兼容Markdown语法。Markdown使用易读易写的纯文本格式编写文档，然后转换成有效的HTML。</p>
<p>Markdown的宗旨是易读易写，使用Markdown书写的文档具有很高的可读性，不会看起来像是由许多Tag或者命令组成的，其设计理念来自于纯文本电子邮件格式。<br>Markdown精选了一些符号作为语法，你花半小时基本就能学会。本文使用Markdown完成，这里有Markdown详细的语法介绍，这篇文章写得也不错。<br>在Mac下比较推荐MacDown，很小巧的一个免费软件，但基本具备一个Markdown编辑器该有的功能，左边书写，右边就可以看到结果，同时你也可以在Mou中配置CSS来更改最后生成的HTML的效果，比如有Github风格，Solarized风格，也可以导出PDF或者HTML。这里有大量Mou的CSS主题。<br>这里推荐一个比较流行的博客写作平台Git+Github+Markdown+Jekyll，有兴趣的同学可以搜索相应关键字，整个搭建过程并不复杂，这里就不赘述了。</p>
<h1 id="8-代码管理"><a href="#8-代码管理" class="headerlink" title="8. 代码管理"></a>8. 代码管理</h1><p>如果你平时使用git，那我比较推荐SourceTree，它是一款功能很强大的git客户端，比如具备git项目的管理，可以同步github和bitbucket上托管的代码，可以图形化执行各种git命令，有着简单友好的diff功能（用来做简单的code review是个不错的选择），提供git-flow的支持，它几乎提供了git所有功能的图形化操作，但出于效率考虑，有些简单的git操作直接在终端里完成即可。</p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Unix/macOS/Linux</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 常用高级调试技巧</title>
    <url>/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224.html</url>
    <content><![CDATA[<blockquote>
<p>在刚开始开发 Android 的时候，很多人只会使用 Log 调试以及简单的断点调试。但是为了更快速地调试，还是需要掌握一些高级一点的调试技巧，以提升自己的效率，下面是我找到和使用的一些技巧</p>
</blockquote>
<a id="more"></a>

<h1 id="1-条件断点"><a href="#1-条件断点" class="headerlink" title="1. 条件断点"></a>1. 条件断点</h1><p>条件断点(Conditional Breakpoints)指的是调试中为断点设置条件，当满足设置条件时程序就会停下。条件断点在循环中极为好用，比如有100次的循环，而你就想看第53次的程序运行过程，总不能一次一次运行看，这个时候就需要条件断点了。</p>
<h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><p>在设置的断点上点击右键，就会弹出断点的简单设置对话框，在 <code>Condition</code> 框里面填写上你所需要中断的条件即可，此后调试程序时，程序就会在满足设置的条件时才会停下。</p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><p>首先设置断点，在断点上右键，填写条件</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/conditionalBreakPoint.png" class="" title="条件断点">

<p>执行 debug，会自动在满足条件处中断</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/conditionalBreakPoint-2.png" class="" title="条件断点">

<h1 id="2-日志断点"><a href="#2-日志断点" class="headerlink" title="2. 日志断点"></a>2. 日志断点</h1><p>顾名思义，日志断点(Logging Breakpoints)就是在断点处输出日志，从而避免了在代码中写 Log，然后再重新运行程序。</p>
<h2 id="用法：-1"><a href="#用法：-1" class="headerlink" title="用法："></a>用法：</h2><p>在设置的断点上右键，将 Suspend 置为非选中状态，然后会出现一些详细设置，在下面的 <code>Log evaluated Expression</code> 填写上你需要输出的信息。其实相当于调试程序在这里帮你打出了 Log，但是根据实际效果推测，由于还是一个断点，系统是先暂停，再打印 Log，最后再恢复，所以速度上会更慢一些。</p>
<h2 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h2><p>首先设置断点，在断点上右键，反选 Suspend，填上需要 log 的信息。</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/log_without_Log.png" class="" title="日志断点">

<p>执行 Debug 以后，会出现结果：</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/logResult.png" class="" title="日志断点结果">

<blockquote>
<p>可以看到，sum 的值还没有发生变化时就已经 log 了，也就是说，在执行断点这行程序之前就已经进入断点了。在这个例子中，如果想看 sum 变化之后的值，就需要在 sum += i; 这行代码之后加断点。</p>
</blockquote>
<h1 id="3-临时断点"><a href="#3-临时断点" class="headerlink" title="3. 临时断点"></a>3. 临时断点</h1><p>临时断点(Temporary Breakpoints)只会在第一次运行到这个断点的时候停下，然后就会被自动移除了，在对不需要重复调试的地方比较有效。（其实我觉得可以叫一次断点）</p>
<h2 id="用法：-2"><a href="#用法：-2" class="headerlink" title="用法："></a>用法：</h2><p>Windows/ Linux : 按住 Alt 点击代码左侧断点位置<br>macOS : 按住 Option 点击代码左侧断点位置</p>
<blockquote>
<p><strong>如果在有断点的情况下再使用上述方法点击断点，将会使断点在有效和失效状态下切换。</strong></p>
</blockquote>
<h1 id="4-附着进程调试"><a href="#4-附着进程调试" class="headerlink" title="4. 附着进程调试"></a>4. 附着进程调试</h1><p>附着进程调试(Attach debugger to Android process)，在了解这个选项之前，总是喜欢点击调试，让 Gradle 重新编译，虽然有 Instant Run 的速度加持，但依然比较缓慢。<br>在这个模式下，你不需要重新编译，只要这个 App 是打开的，就可以直接点击该按钮，就可以快速进入调试，对于测试来说非常方便。</p>
<h2 id="用法：-3"><a href="#用法：-3" class="headerlink" title="用法："></a>用法：</h2><ol>
<li><p>点击菜单栏中的 Run -&gt;Attach Debugger to Android Process ，然后选择 App 所在的进程</p>
</li>
<li><p>或者点击下列按钮</p>
</li>
</ol>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/attachDebuggerToProcess.png" class="" title="附着进程调试">

<h1 id="5-观察变量"><a href="#5-观察变量" class="headerlink" title="5. 观察变量"></a>5. 观察变量</h1><p>在断点处停下时，将鼠标悬停在变量上或者按住 Option(Alt) 键点击变量时即可显示该变量的值</p>
<h1 id="6-计算表达式"><a href="#6-计算表达式" class="headerlink" title="6. 计算表达式"></a>6. 计算表达式</h1><p><strong>计算表达式</strong>(Evaluate Expression)，用来在调试过程中查看变量的值，或者计算任何复杂的自定义表达式。</p>
<p>但它最好的一点不仅是可以查看变量的值且进行运算，还能<strong>执行赋值语句</strong>！也就是说，它能在运行中实时修改变量，方便测试各种功能。</p>
<h2 id="用法：-4"><a href="#用法：-4" class="headerlink" title="用法："></a>用法：</h2><p>在断点中断后，按 Option(Alt) + F8，或者在 Run 菜单中找到 Evaluate Expression，然后输入想做的操作</p>
<h2 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h2><p>首先在断点处停下，我设置的条件是 i == 6，此时 sum 的值为15</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/evaluateExpression1.png" class="" title="计算表达式">

<p>进入 Evaluate Expression，直接输入 sum 回车，能看到 sum 的值，也可以直接对 sum 进行修改，比如 sum +=20，结果是35</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/evaluateExpression2.png" class="" title="计算表达式2">

<p>回到程序界面，发现 sum 的值已经改变了</p>
<img src="/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-20171224/evaluateExpression3.png" class="" title="计算表达式3">

<p>这非常适合对于在后台服务器获取数据时调试一些需要后台修改的数据，省时省力</p>
]]></content>
      <categories>
        <category>Android开发技巧</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio常用快捷键</title>
    <url>/Android%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E7%AF%87/Android%20Studio%20%E5%BF%AB%E6%8D%B7%E9%94%AE-20170518.html</url>
    <content><![CDATA[<p>Android Studio 有诸多方便的快捷键，有助于我们高效编写和修改代码，下面对常用的快捷键做一个总结，即是方便大家，也是给自己留一个备忘。</p>
<p><a href="https://developer.android.com/studio/intro/keyboard-shortcuts.html?hl=zh-cn" target="_blank" rel="noopener">Android Studio 官方快捷键说明</a></p>
<a id="more"></a>
<p>在Mac上</p>
<ul>
<li><code>⌘</code> = <code>Command</code></li>
<li><code>⌥</code> = <code>Option</code></li>
<li><code>⇧</code> = <code>Shift</code></li>
</ul>
<h1 id="最常用的快捷键"><a href="#最常用的快捷键" class="headerlink" title="最常用的快捷键"></a>最常用的快捷键</h1><h2 id="常规功能"><a href="#常规功能" class="headerlink" title="常规功能"></a>常规功能</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">Mac</th>
<th align="left">Windows/Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">全部保存</td>
<td align="left">Command + S</td>
<td align="left">Control + S</td>
</tr>
<tr>
<td align="left">打开设置对话框</td>
<td align="left">Command + ,（英文逗号）</td>
<td align="left">Control + Alt + S</td>
</tr>
<tr>
<td align="left">打开项目结构对话框</td>
<td align="left">Command + ;（英文分号）</td>
<td align="left">Control + Alt + Shift + S</td>
</tr>
</tbody></table>
<h2 id="导航和搜索"><a href="#导航和搜索" class="headerlink" title="导航和搜索"></a>导航和搜索</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">Mac</th>
<th align="left">Windows/Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">搜索全部内容（包括代码和菜单）</td>
<td align="left">按两次 Shift</td>
<td align="left">按两次 Shift</td>
</tr>
<tr>
<td align="left">查找</td>
<td align="left">Command + F</td>
<td align="left">Control + F</td>
</tr>
<tr>
<td align="left">替换</td>
<td align="left">Command + R</td>
<td align="left">Control + R</td>
</tr>
<tr>
<td align="left">按符号名称搜索</td>
<td align="left">Command + Option + O</td>
<td align="left">Control + Alt + Shift + N</td>
</tr>
<tr>
<td align="left">查找类</td>
<td align="left">Command + O</td>
<td align="left">Control + N</td>
</tr>
<tr>
<td align="left">查找文件（而不是类）</td>
<td align="left">Command + Shift + O</td>
<td align="left">Control + Shift + N</td>
</tr>
<tr>
<td align="left">在路径中查找</td>
<td align="left">Command + Shift + F</td>
<td align="left">Control + Shift + F</td>
</tr>
<tr>
<td align="left">在打开的编辑器标签之前导航</td>
<td align="left">Control + 向右/向左箭头</td>
<td align="left">Alt + 向右/向左箭头</td>
</tr>
<tr>
<td align="left">跳到源代码</td>
<td align="left">F4 / Command + 向下箭头</td>
<td align="left">F4 / Control + Enter</td>
</tr>
<tr>
<td align="left">最近打开的文件弹出式菜单</td>
<td align="left">Command + E</td>
<td align="left">Control + E</td>
</tr>
<tr>
<td align="left">关闭活动编辑器标签</td>
<td align="left">Command + W</td>
<td align="left">Control + F4</td>
</tr>
<tr>
<td align="left">从工具窗口返回到编辑器窗口</td>
<td align="left">Esc</td>
<td align="left">Esc</td>
</tr>
<tr>
<td align="left">转到行</td>
<td align="left">Command + L</td>
<td align="left">Control + G</td>
</tr>
<tr>
<td align="left">打开类型层次结构</td>
<td align="left">Control + H</td>
<td align="left">Control + H</td>
</tr>
<tr>
<td align="left">打开方法层次结构</td>
<td align="left">Command + Shift + H</td>
<td align="left">Control + Shift + H</td>
</tr>
<tr>
<td align="left">打开调用层次结构</td>
<td align="left">Control + Option + H</td>
<td align="left">Control + Alt + H</td>
</tr>
</tbody></table>
<h2 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">Mac</th>
<th align="left">Windows/Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">生成代码（getter、setter、构造函数、hashCode/equals、toString、新文件、新类）</td>
<td align="left">Command + N</td>
<td align="left">Alt + Insert</td>
</tr>
<tr>
<td align="left">替换方法</td>
<td align="left">Control + O</td>
<td align="left">Control + O</td>
</tr>
<tr>
<td align="left">实现方法</td>
<td align="left">Control + I</td>
<td align="left">Control + I</td>
</tr>
<tr>
<td align="left">控制语句 (if…else / try…catch / etc.)</td>
<td align="left">Command + Option + T</td>
<td align="left">Control + Alt + T</td>
</tr>
<tr>
<td align="left">删除插入符处的行</td>
<td align="left">Command + 退格键</td>
<td align="left">Control + Y</td>
</tr>
<tr>
<td align="left">折叠/展开当前代码块</td>
<td align="left">Command + 减号/加号</td>
<td align="left">Control + 减号/加号</td>
</tr>
<tr>
<td align="left">折叠/展开所有代码块</td>
<td align="left">Command + Shift + 减号/加号</td>
<td align="left">Control + Shift + 减号/加号</td>
</tr>
<tr>
<td align="left">复制当前行或选择</td>
<td align="left">Command + D</td>
<td align="left">Control + D</td>
</tr>
<tr>
<td align="left">基本代码自动完成</td>
<td align="left">Control + 空格键</td>
<td align="left">Control + 空格键</td>
</tr>
<tr>
<td align="left">智能代码自动完成（按预期类型过滤方法和变量列表）</td>
<td align="left">Control + Shift + 空格键</td>
<td align="left">Control + Shift + 空格键</td>
</tr>
<tr>
<td align="left">完成语句</td>
<td align="left">Command + Shift + Enter</td>
<td align="left">Control + Shift + Enter</td>
</tr>
<tr>
<td align="left">快速文档查找</td>
<td align="left">Control + J</td>
<td align="left">Control + Q</td>
</tr>
<tr>
<td align="left">显示选定方法的参数</td>
<td align="left">Command + P</td>
<td align="left">Control + P</td>
</tr>
<tr>
<td align="left">转到声明（直接）</td>
<td align="left">Command + B 或 Command + 点击</td>
<td align="left">Control + B 或 Control + 点击</td>
</tr>
<tr>
<td align="left">转到实现</td>
<td align="left">Command + Alt + B</td>
<td align="left">Control + Alt + B</td>
</tr>
<tr>
<td align="left">转到超类方法/超类</td>
<td align="left">Command + U</td>
<td align="left">Control + U</td>
</tr>
<tr>
<td align="left">通过行注释添加注释/取消注释</td>
<td align="left">Command + /</td>
<td align="left">Control + /</td>
</tr>
<tr>
<td align="left">通过块注释添加注释/取消注释</td>
<td align="left">Command + Shift + /</td>
<td align="left">Control + Shift + /</td>
</tr>
<tr>
<td align="left">选择连续增加的代码块</td>
<td align="left">Option + Up</td>
<td align="left">Control + W</td>
</tr>
<tr>
<td align="left">将当前选择退回到上一个状态</td>
<td align="left">Option + Down</td>
<td align="left">Control + Shift + W</td>
</tr>
<tr>
<td align="left">优化导入</td>
<td align="left">Control + Option + O</td>
<td align="left">Control + Alt + O</td>
</tr>
<tr>
<td align="left">项目快速修复（显示意图操作和快速修复）</td>
<td align="left">Option + Enter</td>
<td align="left">Alt + Enter</td>
</tr>
<tr>
<td align="left">重新格式化代码</td>
<td align="left">Command + Option + L</td>
<td align="left">Control + Alt + L</td>
</tr>
<tr>
<td align="left">自动缩进行</td>
<td align="left">Control + Option + I</td>
<td align="left">Control + Alt + I</td>
</tr>
<tr>
<td align="left">缩进/取消缩进行</td>
<td align="left">Tab/Shift + Tab</td>
<td align="left">Tab/Shift + Tab</td>
</tr>
<tr>
<td align="left">智能行合并</td>
<td align="left">Control + Shift + J</td>
<td align="left">Control + Shift + J</td>
</tr>
<tr>
<td align="left">智能行拆分</td>
<td align="left">Command + Enter</td>
<td align="left">Control + Enter</td>
</tr>
<tr>
<td align="left">开始新行</td>
<td align="left">Shift + Enter</td>
<td align="left">Shift + Enter</td>
</tr>
</tbody></table>
<h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">Mac</th>
<th align="left">Windows/Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">复制</td>
<td align="left">F5</td>
<td align="left">F5</td>
</tr>
<tr>
<td align="left">移动</td>
<td align="left">F6</td>
<td align="left">F6</td>
</tr>
<tr>
<td align="left">安全删除</td>
<td align="left">Command + Delete</td>
<td align="left">Alt + Delete</td>
</tr>
<tr>
<td align="left">重命名</td>
<td align="left">Shift + F6</td>
<td align="left">Shift + F6</td>
</tr>
</tbody></table>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">Mac</th>
<th align="left">Windows/Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">将项目提交到 VCS</td>
<td align="left">Command + K</td>
<td align="left">Control + K</td>
</tr>
<tr>
<td align="left">从 VCS 更新项目</td>
<td align="left">Command + T</td>
<td align="left">Control + T</td>
</tr>
<tr>
<td align="left">查看最近变更</td>
<td align="left">Option + Shift + C</td>
<td align="left">Alt + Shift + C</td>
</tr>
<tr>
<td align="left">打开 VCS 弹出式菜单</td>
<td align="left">Control + V</td>
<td align="left">Alt + `（反引号）</td>
</tr>
</tbody></table>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android开发技巧</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十九）—— 第29章 定制视图与触摸事件</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2029%20%E5%AE%9A%E5%88%B6%E8%A7%86%E5%9B%BE%E4%B8%8E%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6-20170313.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了自定义 View 及其触摸事件的处理，有一定的难度</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/d56f3711ddf5c7be62e44199e365682bb6a121a4" target="_blank" rel="noopener">完成第29章，未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/e2dc19ea90c7ceddb52217283cb0111c98f5d22d" target="_blank" rel="noopener">完成第29章挑战1-设备旋转</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/5819fc03bde8009a8fd1683f29056f3ff8df4427" target="_blank" rel="noopener">完成第29章挑战2-双指旋转矩形</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-自定义-View（定制视图）"><a href="#1-自定义-View（定制视图）" class="headerlink" title="1. 自定义 View（定制视图）"></a>1. 自定义 View（定制视图）</h1><p>Android 自带众多优秀的标准视图与组件，但有时为追求独特的应用视觉效果，我们仍需创建定制视图。尽管定制视图种类繁多，但无外乎分为以下两大类别。</p>
<ul>
<li>简单视图。简单视图内部也可以很复杂;之所以归为简单类别，是因为简单视图不包括子视图。而且，简单视图几乎总是会执行定制绘制。</li>
<li>聚合视图。聚合视图由其他视图对象组成。聚合视图通常管理着子视图，但不负责执行定制绘制。图形绘制任务都委托给了各个子视图。</li>
</ul>
<p><strong>创建定制视图所需的三大步骤：</strong></p>
<ol>
<li>选择超类。对于简单定制视图而言，View 是个空白画布，因此它作为超类最常见。对于聚合定制视图，我们应选择合适的超类布局，比如 FrameLayout。</li>
<li>继承选定的超类，并至少覆盖一个超类构造方法。</li>
<li>覆盖其他关键方法，以定制视图行为。</li>
</ol>
<h2 id="1-1-创建一个基本的自定义-View"><a href="#1-1-创建一个基本的自定义-View" class="headerlink" title="1.1 创建一个基本的自定义 View"></a>1.1 创建一个基本的自定义 View</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxDrawingView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从代码中创建的时候调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoxDrawingView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 xml 文件中 inflate 的时候调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoxDrawingView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意在引用时我们必须使用自定义 View 的全路径类名，这样布局 inflater 才能够找到它。</strong>布局 inflater 解析布局 XML 文件，并按视图定义创建 View 实例。如果元素名不是全路径类名，布局 inflater 会转而在 android.view 和 android.widget 包中寻找目标。如果目标视图类放置在其他包中，布局 inflater 将无法找到目标并最终导致应用崩溃。</p>
</blockquote>
<h2 id="1-2-处理触摸事件"><a href="#1-2-处理触摸事件" class="headerlink" title="1.2 处理触摸事件"></a>1.2 处理触摸事件</h2><p>因为我们的自定义 View 是 View 的子类，可以直接覆盖以下 View 方法：</p>
<p><code>public boolean onTouchEvent(MotionEvent event)</code></p>
<p>该方法接收一个 MotionEvent 类实例，MotionEvent 类可用来描述包括位置和动作的触摸事件。动作用于描述事件所处的阶段。</p>
<table>
<thead>
<tr>
<th align="left">动作常量</th>
<th align="left">动作描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ACTION_DOWN</td>
<td align="left">手指触摸到屏幕</td>
</tr>
<tr>
<td align="left">ACTION_MOVE</td>
<td align="left">手指在屏幕上移动</td>
</tr>
<tr>
<td align="left">ACTION_UP</td>
<td align="left">手指离开屏幕</td>
</tr>
<tr>
<td align="left">ACTION_CANCEL</td>
<td align="left">父视图拦截了触摸事件</td>
</tr>
</tbody></table>
<p>我们的目的就是在一根手指放下的时候记录下放下的位置，移动时随之变化，放开时固定该矩形框。并且之前画的矩形框数据需要记录下来。<br>所以建立一个实体类用于记录按下的点和放开的点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PointF mOrigin;</span><br><span class="line">    <span class="keyword">private</span> PointF mCurrent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(PointF origin)</span> </span>&#123;</span><br><span class="line">        mOrigin = origin;</span><br><span class="line">        mCurrent = origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后重写 onTouchEvent 并进行相应操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Box mCurrentBox;</span><br><span class="line"><span class="keyword">private</span> List&lt;Box&gt; mBoxen = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 每次有触摸事件都记录下现在的坐标</span></span><br><span class="line">    PointF current = <span class="keyword">new</span> PointF(event.getX(), event.getY());</span><br><span class="line">    String action = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            action = <span class="string">"ACTION_DOWN"</span>;</span><br><span class="line">            <span class="comment">// 每次按下的时候在列表中中新增一个 Box</span></span><br><span class="line">            mCurrentBox = <span class="keyword">new</span> Box(current);</span><br><span class="line">            mBoxen.add(mCurrentBox);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            action = <span class="string">"ACTION_MOVE"</span>;</span><br><span class="line">            <span class="keyword">if</span> (mCurrentBox != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 移动的时候都要重绘</span></span><br><span class="line">                mCurrentBox.setCurrent(current);</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">        	<span class="comment">// 抬起的时候不再指向最新的 Box</span></span><br><span class="line">            action = <span class="string">"ACTION_UP"</span>;</span><br><span class="line">            mCurrentBox = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            action = <span class="string">"ACTION_CANCEL"</span>;</span><br><span class="line">            mCurrentBox = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Log.i(TAG, action + <span class="string">" at x="</span> + current.x +</span><br><span class="line">           <span class="string">", y="</span> + current.y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-onDraw-方法内的图形绘制"><a href="#2-onDraw-方法内的图形绘制" class="headerlink" title="2. onDraw() 方法内的图形绘制"></a>2. onDraw() 方法内的图形绘制</h1><p>应用启动时，所有视图都处于无效状态。也就是说，视图还没有绘制到屏幕上。为解决这个问题，Android 调用了顶级 View 视图的 draw()方法。这会引起自上而下的链式调用反应。首先，视图完成自我绘制，然后是子视图的自我绘制，再然后是子视图的子视图的自我绘制，如此调用下去直至继承结构的末端。当继承结构中的所有视图都完成自我绘制后，最顶级 View 视图也就生效了。<br>为加入这种绘制，可覆盖以下 View 方法: <code>protected void onDraw(Canvas canvas)</code><br>Canvas 和 Paint 是 Android 系统的两大绘制类。</p>
<ul>
<li>Canvas 类拥有我们需要的所有绘制操作。其方法可决定绘在哪里以及绘什么，比如线条、<br>圆形、字词、矩形等。</li>
<li>Paint 类决定如何绘制。其方法可指定绘制图形的特征，例如是否填充图形、使用什么字<br>体绘制、线条是什么颜色等。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoxDrawingView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 颜色为好看的半透明红色的矩形画笔</span></span><br><span class="line">    mBoxPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    mBoxPaint.setColor(<span class="number">0x22ff0000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 颜色为米白的背景画笔</span></span><br><span class="line">    mBackgroundPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    mBackgroundPaint.setColor(<span class="number">0xfff8efe0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每次画的时候先画出背景</span></span><br><span class="line">    canvas.drawPaint(mBackgroundPaint);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 然后画出每个绘制过的矩形</span></span><br><span class="line">    <span class="keyword">for</span> (Box box : mBoxen) &#123;</span><br><span class="line">        <span class="keyword">float</span> left = Math.min(box.getOrigin().x, box.getCurrent().x);</span><br><span class="line">        <span class="keyword">float</span> right = Math.max(box.getOrigin().x, box.getCurrent().x);</span><br><span class="line">        <span class="keyword">float</span> top = Math.min(box.getOrigin().y, box.getCurrent().y);</span><br><span class="line">        <span class="keyword">float</span> bottom = Math.max(box.getOrigin().y, box.getCurrent().y);</span><br><span class="line"></span><br><span class="line">        canvas.drawRect(left, top, right, bottom, mBoxPaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-挑战练习"><a href="#3-挑战练习" class="headerlink" title="3. 挑战练习"></a>3. 挑战练习</h1><h2 id="3-1-设备旋转问题"><a href="#3-1-设备旋转问题" class="headerlink" title="3.1 设备旋转问题"></a>3.1 设备旋转问题</h2><ol>
<li>首先，要给整个视图加上 ID，<code>onSaveInstanceState()</code>以及<code>onRestoreInstanceState()</code>方法才会被调用</li>
<li>使用 Bundle 传递需要存储的参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    <span class="comment">// 存储父类需要存储的内容</span></span><br><span class="line">    Parcelable superData = <span class="keyword">super</span>.onSaveInstanceState();</span><br><span class="line">    bundle.putParcelable(KEY_SUPER_DATA, superData);</span><br><span class="line">    <span class="comment">// 存储所有的矩形</span></span><br><span class="line">    bundle.putSerializable(KEY_BOXEN, (ArrayList) mBoxen);</span><br><span class="line">    <span class="keyword">return</span> bundle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Parcelable state)</span> </span>&#123;</span><br><span class="line">    Bundle bundle = (Bundle) state;</span><br><span class="line">    <span class="comment">// 取出父类的内容</span></span><br><span class="line">    Parcelable superData = bundle.getParcelable(KEY_SUPER_DATA);</span><br><span class="line">    <span class="comment">// 取出存储的矩形</span></span><br><span class="line">    mBoxen = (List&lt;Box&gt;) bundle.getSerializable(KEY_BOXEN);</span><br><span class="line">    <span class="keyword">super</span>.onRestoreInstanceState(superData);</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-旋转矩形框"><a href="#3-2-旋转矩形框" class="headerlink" title="3.2 旋转矩形框"></a>3.2 旋转矩形框</h2><ol>
<li><p>在处理多点触控时我们需要用 <code>MotionEvent.getActionMasked()</code> 方法来获取事件 ID，<code>ACTION_POINTER_DOWN</code>指的是屏幕上已经有手指了（无论是几根，最大不超过【多点触控屏的极限 - 1】），另一根手指按下的情况。也就是说此时我们能知道两个手指按下了。</p>
</li>
<li><p>其次，图形的旋转一般是在绘制的时候旋转画布（canvas），需要的参数有旋转的角度（用度表示）以及旋转中心坐标，在这里我在 Box 类中加入了最开始的角度 <code>mOriginAngle</code>，已旋转后的角度 <code>mRotatedAngle</code> 两个成员变量，以及一个获取中心点坐标的方法。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">private</span> PointF mOrigin;</span><br><span class="line">    	<span class="keyword">private</span> PointF mCurrent;</span><br><span class="line">    	<span class="comment">// 此次按下时的角度</span></span><br><span class="line">    	<span class="keyword">private</span> <span class="keyword">float</span> mOriginAngle;</span><br><span class="line">    	<span class="keyword">private</span> <span class="keyword">float</span> mRotatedAngle; <span class="comment">// 已旋转的角度</span></span><br><span class="line"></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(PointF origin)</span> </span>&#123;</span><br><span class="line">        	mOrigin = origin;</span><br><span class="line">        	mCurrent = origin;</span><br><span class="line">        	mOriginAngle = <span class="number">0</span>;</span><br><span class="line">        	mRotatedAngle = <span class="number">0</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">		<span class="comment">/** 省略 Getter 和 Setter **/</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 获取矩形的中心点</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> PointF <span class="title">getCenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">new</span> PointF(</span><br><span class="line">                (mCurrent.x + mOrigin.x) / <span class="number">2</span>, </span><br><span class="line">                (mCurrent.y + mOrigin.y) / <span class="number">2</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对不同的触摸情况进行处理：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">       PointF current = <span class="keyword">new</span> PointF(event.getX(), event.getY());</span><br><span class="line">       String action = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 省略没有变化的部分</span></span><br><span class="line">       <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">               action = <span class="string">"POINTER_DOWN"</span>;</span><br><span class="line">               <span class="keyword">if</span> (event.getPointerCount() == <span class="number">2</span>) &#123;</span><br><span class="line">               <span class="comment">// 首先获取按下时的角度（有一个弧度转角度的过程）</span></span><br><span class="line">               <span class="comment">// 每次按下的时候将角度存入现在矩形的原始角度</span></span><br><span class="line">                   <span class="keyword">float</span> angle = (<span class="keyword">float</span>) (Math.atan((event.getY(<span class="number">1</span>) - event.getY(<span class="number">0</span>)) /</span><br><span class="line">                       (event.getX(<span class="number">1</span>) - event.getX(<span class="number">0</span>))) * <span class="number">180</span> / Math.PI);</span><br><span class="line">                   mCurrentBox.setOriginAngle(angle);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">               action = <span class="string">"ACTION_MOVE"</span>;</span><br><span class="line">               <span class="keyword">if</span> (mCurrentBox != <span class="keyword">null</span>) &#123;</span><br><span class="line">               	<span class="comment">// 如果只有一只手指按下，而且还未曾旋转过的话，就进行大小的缩放</span></span><br><span class="line">                   <span class="keyword">if</span> (event.getPointerCount() == <span class="number">1</span> &amp;&amp; mCurrentBox.getRotatedAngle() == <span class="number">0</span>) &#123;</span><br><span class="line">                       mCurrentBox.setCurrent(current);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">// 如果按下了两根手指</span></span><br><span class="line">                   <span class="keyword">if</span> (event.getPointerCount() == <span class="number">2</span>) &#123;</span><br><span class="line">                   	<span class="comment">// 获取角度</span></span><br><span class="line">                       <span class="keyword">float</span> angle = (<span class="keyword">float</span>) (Math.atan((event.getY(<span class="number">1</span>) - event.getY(<span class="number">0</span>)) /</span><br><span class="line">                               (event.getX(<span class="number">1</span>) - event.getX(<span class="number">0</span>))) * <span class="number">180</span> / Math.PI);</span><br><span class="line">                       Log.i(TAG, <span class="string">"onTouchEvent: angle:"</span> + (angle - mCurrentBox.getOriginAngle()));</span><br><span class="line">                       <span class="comment">// 已旋转的角度 = 之前旋转的角度 + 新旋转的角度</span></span><br><span class="line">                       <span class="comment">// 新旋转的角度 = 本次 move 到的角度 - 手指按下的角度</span></span><br><span class="line">                       mCurrentBox.setRotatedAngle(mCurrentBox.getRotatedAngle() + angle</span><br><span class="line">                               - mCurrentBox.getOriginAngle());</span><br><span class="line">                       <span class="comment">// 旋转角度变化后，初始角度也发生变化</span></span><br><span class="line">                       mCurrentBox.setOriginAngle(angle);</span><br><span class="line">                   &#125;</span><br><span class="line">                   invalidate();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十八）—— 第28章 网页浏览</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2028%20%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88-20170302.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲的是使用 WebView 在应用内浏览网页</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/bedc8d10fb81e2936afd669288ef4e6fbd65183a" target="_blank" rel="noopener">完成第28章，未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/f58ff9aa76d6a025bddcddb8feda323f0de3a0c4" target="_blank" rel="noopener">完成第28章挑战</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-WebView"><a href="#1-WebView" class="headerlink" title="1. WebView"></a>1. WebView</h1><p>如果不使用 WebView，我们可以使用隐式 intent，也就是用独立的浏览器打开一个网页。但是我们通常只想在 activity 中显示网页内容而不是打开浏览器：或许是想显示自己生成的 HTML，或许是想以某种方式限制用户使用浏览器。对于大多数需要帮助文档的应用，普遍做法是以网页的形式提供帮助文档，这样会方便后期的更新与维护。打开浏览器查看帮助文档，既不专业，又妨碍应用行为的定制，同时也无法将网页整合进自己的用户界面。</p>
<h2 id="1-1-WebView-的使用"><a href="#1-1-WebView-的使用" class="headerlink" title="1.1 WebView 的使用"></a>1.1 WebView 的使用</h2><p>和其他的 View 一样，在 fragment 的布局文件中声明之后，在 fragment 中获取实例，然后进行一番设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_photo_page_web_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoPageFragment</span> <span class="keyword">extends</span> <span class="title">VisibleFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_URI = <span class="string">"photo_page_url"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Uri mUri;</span><br><span class="line">    <span class="keyword">private</span> WebView mWebView;</span><br><span class="line"></span><br><span class="line">	………………</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在这里防止 Lint 警告 JavaScript 被启用</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"SetJavaScriptEnabled"</span>)</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View v = inflater.inflate(R.layout.fragment_photo_page, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 首先获取实例</span></span><br><span class="line">        mWebView = (WebView) v.findViewById(R.id.fragment_photo_page_web_view);</span><br><span class="line">        <span class="comment">// 然后将 JavaScript 设置为启用</span></span><br><span class="line">        mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">        	<span class="comment">// 这个方法决定 url 在哪里处理，返回 false 代表让 WebView 去加载</span></span><br><span class="line">        	<span class="comment">// 其实该方法默认返回的就是 false</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mWebView.loadUrl(mUri.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，WebClient 是一个关键，如果不重写该方法，WebView 可能不会加载这个 url</p>
<h2 id="1-2-使用-WebChromeClient-优化-WebView-显示"><a href="#1-2-使用-WebChromeClient-优化-WebView-显示" class="headerlink" title="1.2 使用 WebChromeClient 优化 WebView 显示"></a>1.2 使用 WebChromeClient 优化 WebView 显示</h2><p>WebViewClient 主要帮助 WebView 处理各种通知、请求事件，而 WebChromeClient 主要辅助 WebView 处理 Javascript 的对话框、网站图标、网站 title、加载进度等。</p>
<p>我们在视图中加入 ProgressBar 放在 WebView 上方并默认隐藏，由于 WebChromeClient 返回进度值在0～100之间，所以我们要设置进度条的最大值为100。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mProgressBar.setMax(<span class="number">100</span>); <span class="comment">// WebChromeClient 进度范围就是0～100</span></span><br><span class="line"></span><br><span class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newProgress == <span class="number">100</span>) &#123;</span><br><span class="line">            mProgressBar.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mProgressBar.setVisibility(View.VISIBLE);</span><br><span class="line">            mProgressBar.setProgress(newProgress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</span><br><span class="line">        AppCompatActivity activity = (AppCompatActivity) getActivity();</span><br><span class="line">        设置网站标题</span><br><span class="line">        activity.getSupportActionBar().setSubtitle(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="1-3-处理-WebView-的设备旋转问题"><a href="#1-3-处理-WebView-的设备旋转问题" class="headerlink" title="1.3 处理 WebView 的设备旋转问题"></a>1.3 处理 WebView 的设备旋转问题</h2><p>尝试旋转设备屏幕，可以发现 WebView 必须重新加载网页。这是因为 WebView 包含太多的数据，无法在 onSaveInstanceState(…)方法内全部保存。所以每次设备旋转，它都必须从头开始加载网页数据。</p>
<p>因为 WebView 是视图层级结构的一部分，所以旋转后它肯定会销毁并重建，不能用 retainFragment 来保留。对于一些类似的类(如 VideoView)，Android 文档推荐让 activity 自己处理设备配置变更。也就是说，无需销毁重建 activity，就能直接调整自己的视图以适应新的屏幕尺寸。这样，WebView 也就不必重新加载全部数据了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".PhotoPageActivity"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:configChanges</span>=<span class="string">"keyboardHidden|orientation|screenSize"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>android:configChanges 属性表明，如果因键盘开或关、屏幕方向改变、屏幕大小改变(也包括 Android 3.2之后的屏幕方向变化)而发生设备配置更改，那么 activity 应自己处理配置更改。</p>
<h1 id="2-挑战练习"><a href="#2-挑战练习" class="headerlink" title="2. 挑战练习"></a>2. 挑战练习</h1><h2 id="2-1-使用后退键浏览历史页面"><a href="#2-1-使用后退键浏览历史页面" class="headerlink" title="2.1 使用后退键浏览历史页面"></a>2.1 使用后退键浏览历史页面</h2><p>我们覆盖 Activity.onBackPressed 方法，就可以对返回键的行为进行控制，但是要获取 WebView 的实例，所以在 fragment 中加入了一个 getter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhotoPageActivity.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PhotoPageFragment fragment = (PhotoPageFragment) getSupportFragmentManager()</span><br><span class="line">            .findFragmentById(R.id.fragment_container);</span><br><span class="line">    <span class="keyword">if</span> (fragment.getWebView().canGoBack()) &#123;</span><br><span class="line">        fragment.getWebView().goBack();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-非-HTTP-链接支持"><a href="#2-2-非-HTTP-链接支持" class="headerlink" title="2.2 非 HTTP 链接支持"></a>2.2 非 HTTP 链接支持</h2><p>只需要修改重写的 shouldOverrideUrlLoading 方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"https://"</span>) || url.startsWith(<span class="string">"http://"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十七）—— 第27章 broadcast intent</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2027%20broadcast%20intent-20170301.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲的是 Android 系统的广播机制，并介绍了广播的使用，权限以及有序广播的用法。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/762ad934bfe2cd3c50f74cd881875da46eb391d5" target="_blank" rel="noopener">完成第27章</a></p>
</blockquote>
<a id="more"></a>

<p>在使用广播之前，首先回顾一下 PhotoGallery 在本章之前的逻辑：</p>
<ol>
<li>打开程序后，如果开始推送服务，就每隔一段时间获取一次图片信息</li>
<li>如果图片有更新，就发出通知</li>
</ol>
<p>那么本章我们想做到的有：</p>
<ol>
<li>在开机以后自动启用服务（如果打开了开关）</li>
<li>在应用打开时图片有更新也不发出通知</li>
</ol>
<p>这里，我们将使用广播来完成这些任务。</p>
<h1 id="1-接收系统广播：重启后唤醒"><a href="#1-接收系统广播：重启后唤醒" class="headerlink" title="1. 接收系统广播：重启后唤醒"></a>1. 接收系统广播：重启后唤醒</h1><h2 id="1-1-broadcast-intent"><a href="#1-1-broadcast-intent" class="headerlink" title="1.1 broadcast intent"></a>1.1 broadcast intent</h2><p>Android 设备中，各种事件一直在频繁地发生。Wi-Fi 信号时有时无，各种软件包获得安装，电话不时呼入，短信频繁接收等等。许多系统组件需要知道某些事件的发生。为满足这样的需求，Android 提供了 broadcast intent 组件。broadcast intent 的工作原理类似于之前学过的 intent 唯，一不同的是 broadcast intent 可同时被多个叫作 broadcast receiver 的组件接收。</p>
<h2 id="1-2-standalone-receiver"><a href="#1-2-standalone-receiver" class="headerlink" title="1.2 standalone receiver"></a>1.2 standalone receiver</h2><p>standalone receiver 是一个在 manifest 配置文件中声明的 broadcast receiver。即便应用进程已消亡，standalone receiver 也可以被激活。(另一种就是可以同 fragment 或 activity 的生命周期绑定的 dynamic receiver。)</p>
<p>首先建立这样一个 BroadcastReceiver，并重写 onReceive 方法，<strong>注意：该方法是在主线程中执行的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartupReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"StartupReceiver"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Received broadcast intent: "</span> + intent.getAction());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isOn = QueryPreferences.isAlarmOn(context);</span><br><span class="line">        PollService.setServiceAlarm(context, isOn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记得在 manifest 文件中声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">    <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".StartupReceiver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>登记好 broadcast receiver 以后，一旦设备启动，这个 receiver 就能接收到启动完成的广播，并随之启动服务了。</p>
<h1 id="2-过滤应用在前台时的通知"><a href="#2-过滤应用在前台时的通知" class="headerlink" title="2. 过滤应用在前台时的通知"></a>2. 过滤应用在前台时的通知</h1><p>为了实现这一点，我们把发出通知的思路改了：之前是在服务中查询到新的结果就发出通知，现在则是：</p>
<ol>
<li>在查询到新的结果后，发出一条应用内的广播并在其中标记一个代码 A，</li>
<li>在应用中动态登记广播接收器，如果接收到广播（说明应用在前台），就把这个代码改成 B。</li>
<li>最后总有一个优先级最低的接收器接收到这个广播，如果代码是 A，就发出通知，否则就不发出通知。</li>
</ol>
<h2 id="2-1-发送-broadcast-intent"><a href="#2-1-发送-broadcast-intent" class="headerlink" title="2.1 发送 broadcast intent"></a>2.1 发送 broadcast intent</h2><p>在 Context 类中直接调用 sendBroadcast(Intent) 即可发出广播。但是为了只让本应用接收到该广播，我们在 manifest 文件中声明一个权限并使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">"com.kniost.photogallery.PRIVATE"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:protectionLevel</span>=<span class="string">"signature"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"com.kniost.photogallery.PRIVATE"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后使用 sendBroadcast(Intent intent, String permission) 发送通知即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sendBroadcast(<span class="keyword">new</span> Intent(ACTION_SHOW_NOTIFICATION), PERM_PRIVATE);</span><br></pre></td></tr></table></figure>

<h2 id="2-2-动态-broadcast-receiver"><a href="#2-2-动态-broadcast-receiver" class="headerlink" title="2.2 动态 broadcast receiver"></a>2.2 动态 broadcast receiver</h2><p>我们要只在应用开启的时候接受发过来的广播过滤，就不能在 manifest 中声明一个过滤器，而是要动态地建立一个广播接收器。我们在这里建立一个用于隐藏前台通知的通用 fragment 子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">VisibleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"VisibleFragment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter(PollService.ACTION_SHOW_NOTIFICATION);</span><br><span class="line">        getActivity().registerReceiver(mOnShowNotification, filter,</span><br><span class="line">                PollService.PERM_PRIVATE, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        getActivity().unregisterReceiver(mOnShowNotification);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BroadcastReceiver mOnShowNotification = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 如果接收到广播，说明应用正在前台，所以把 ResultCode 更改掉</span></span><br><span class="line">            Log.i(TAG, <span class="string">"canceling notification"</span>);</span><br><span class="line">            setResultCode(Activity.RESULT_CANCELED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么在 start 和 stop 中登记和撤销 receiver 呢？因为在 retain fragment 中 onCreate(…)和 onDestroy()方法中的 getActivity()方法在设备旋转时会返回不同的值。因此如果想在 Fragment.onCreate(Bundle)和 Fragment.onDestroy()方法中实现登记或撤销登记，应使用 getActivity().getApplicationContext()方法。</p>
</blockquote>
<h2 id="2-3-使用有序-broadcast"><a href="#2-3-使用有序-broadcast" class="headerlink" title="2.3 使用有序 broadcast"></a>2.3 使用有序 broadcast</h2><p>如果想让程序在打开时不发送出通知，就不能再让服务来发出通知了，因为它无法知道前台的运行状态。所以我们让 PollService 发送一个有序广播。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Notification notification = ……;</span><br><span class="line"></span><br><span class="line">Intent i = <span class="keyword">new</span> Intent(ACTION_SHOW_NOTIFICATION);</span><br><span class="line">i.putExtra(REQUEST_CODE, <span class="number">0</span>);</span><br><span class="line">i.putExtra(NOTIFICATION, notification);</span><br><span class="line">sendOrderedBroadcast(i, PERM_PRIVATE, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">        Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<p>有序广播是按照优先级发送的，先发送给优先级高的接收器，再发给优先级低的接收器。因为在应用结束后也要发出通知，显然我们发出通知的广播接收器是需要声明在 manifest 文件中的。</p>
<p>内部实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NotificaitonReceiver"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"received result: "</span> + getResultCode());</span><br><span class="line">        <span class="keyword">if</span> (getResultCode() != Activity.RESULT_OK) &#123;</span><br><span class="line">            <span class="comment">// PollService 发出的 intent 带的结果码是 RESULT_OK</span></span><br><span class="line">            <span class="comment">// 如果接到的不是，说明应用在前台，将结果码修改了</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 如果没有 return，说明应用不在前台，就可以发出通知了。</span></span><br><span class="line">        <span class="keyword">int</span> requestCode = intent.getIntExtra(PollService.REQUEST_CODE, <span class="number">0</span>);</span><br><span class="line">        Notification notification = (Notification)</span><br><span class="line">                intent.getParcelableExtra(PollService.NOTIFICATION);</span><br><span class="line"></span><br><span class="line">        NotificationManagerCompat notificationManager =</span><br><span class="line">                NotificationManagerCompat.from(context);</span><br><span class="line">        notificationManager.notify(requestCode, notification);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".NotificationReceiver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里将优先级设为最低，即 -999 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:priority</span>=<span class="string">"-999"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.kniost.photogallery.SHOW_NOTIFICATION"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十六）—— 第26章 后台服务</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2026%20%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1-20170223.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了 Android 的一大组件：服务。使用 IntentService 作为后台服务，用 AlarmManager 定时启动，以及应用通知的发出，还介绍了新的 JobScheduler 及其使用。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/5d5771376dd12ca3d41cc52939707297d29e5aa7" target="_blank" rel="noopener">完成第26章</a></p>
</blockquote>
<a id="more"></a>

<p>Activity 就是 Android 应用的前台。所有应用代码都专注于提供良好的用户视觉体验。服务就是 Android 应用的后台，用户无需关心后台发生的一切。即使前台关闭，activity 消失好久了，后台服务依然可以持续不断地工作。<br><strong>服务最关键的特性就是：用户离开当前应用后(打开其他应用或退回主屏幕)，服务依然可以在后台运行。</strong></p>
<h1 id="1-服务的使用"><a href="#1-服务的使用" class="headerlink" title="1. 服务的使用"></a>1. 服务的使用</h1><h2 id="1-1-服务的能与不能"><a href="#1-1-服务的能与不能" class="headerlink" title="1.1 服务的能与不能"></a>1.1 服务的能与不能</h2><p>与 activity 一样，服务是一个有生命周期回调方法的应用组件。这些回调方法同样也会在主 UI 线程上运行。<br>初始创建的服务不会在后台线程上运行任何代码。而大多数重要服务都需要某种后台线程，IntentService 类提供了一套标准实现代码，所以推荐使用 IntentService 完成本章。</p>
<h2 id="1-2-服务的生命周期"><a href="#1-2-服务的生命周期" class="headerlink" title="1.2 服务的生命周期"></a>1.2 服务的生命周期</h2><p>如果是<code>startService(Intent)</code>方法启动的服务，其生命周期很简单，并具有三种生命周期回调方法。</p>
<ol>
<li><code>onCreate(...)</code>方法:服务创建时调用。</li>
<li><code>onStartCommand(Intent,int,int)</code>方法:每次组件通过 startService(Intent)方法<br>启动服务时调用一次。它有两个整数参数，一个是标识符集，一个是启动 ID。标识符集用来表示当前 intent 发送究竟是一次重新发送，还是一次从没成功过的发送。每次调用 onStartCommand(Intent,int,int)方法，启动 ID 都会不同。因此，启动 ID 也可用于区分不同的命令。</li>
<li><code>onDestroy()</code>方法:服务不再需要时调用。通常是在服务停止后。 服务停止时会调用 onDestroy()方法。服务停止的方式取决于服务的类型。</li>
<li>服务的类型由 onStartCommand(…)方法的返回值确定，可能的服务类型有 Service.<code>START_NOT_STICKY</code>、<br><code>START_REDELIVER_INTENT</code>和<code>START_STICKY</code>。<strong>IntentService 是一种 non-sticky 服务</strong>。</li>
</ol>
<h2 id="1-3-不同类型的服务"><a href="#1-3-不同类型的服务" class="headerlink" title="1.3 不同类型的服务"></a>1.3 不同类型的服务</h2><ol>
<li><p><strong>non-sticky 服务</strong><br> non-sticky 服务在服务自己认为已完成任务时停止。为获得 non-sticky 服务，应返回<code>START_NOT_STICKY</code>或<code>START_REDELIVER_INTENT</code>。两者区别在于，如果系统需要在服务完成任务之前关闭它，则服务的具体表现会有所不同。<code>START_NOT_STICKY</code>型服务说消亡就消亡了;而<code>START_REDELIVER_INTENT</code>型服务则会在资源不再吃紧时，尝试再次启动服务。</p>
<blockquote>
<p>通过调用 stopSelf()或 stopSelf(int)方法，我们告诉 Android 任务已完成。stopSelf() 是个无条件方法。不管 onStartCommand(…)方法调用多少次，该方法总是会成功停止服务。stopSelf(int)是个有条件的方法。该方法需要来自于 onStartCommand(…)方法的启动 ID。只有在接收到最新启动 ID 后，该方法才会停止服务。(这也是 IntentService 的后台工作原理。)</p>
</blockquote>
</li>
<li><p><strong>sticky 服务</strong><br>sticky 服务会持续运行，直到外部组件调用 Context.stopService(Intent)方法让它停止。 为获得 sticky 服务，应返回 START_STICKY。<br>sticky 服务启动后会持续运行，除非某个组件调用 Context.stopService(Intent)方法停止它。如因某种原因需终止服务，可传入一个 null intent 给 onStartCommand(…)方法，实现服务的重启。sticky 服务适用于长时间运行的服务，如音乐播放器这种启动后一直保持运行状态，直到用户主动停止的服务。</p>
</li>
</ol>
<h2 id="1-3-服务的使用"><a href="#1-3-服务的使用" class="headerlink" title="1.3 服务的使用"></a>1.3 服务的使用</h2><p>一个最基本的 IntentService 如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PollService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"PollService"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 外界获取服务的实例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Intent(context, PollService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PollService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(TAG);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 服务主要执行代码的地方</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">		Log.i(TAG, <span class="string">"Received an intent: "</span> + intent);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在外界使用 Context.startService(Intent) 即可开启服务。</p>
<h1 id="2-使用-AlarmManager-定时启动服务"><a href="#2-使用-AlarmManager-定时启动服务" class="headerlink" title="2. 使用 AlarmManager 定时启动服务"></a>2. 使用 AlarmManager 定时启动服务</h1><p>一个基本的定时启动代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先获取服务启动的 intent</span></span><br><span class="line">Intent i = PollService.newIntent(context);</span><br><span class="line"><span class="comment">// 将其放入 PendingIntent 中</span></span><br><span class="line">PendingIntent pi = PendingIntent.getService(context, <span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取 AlarmManager 服务</span></span><br><span class="line">AlarmManager alarmManager = (AlarmManager)</span><br><span class="line">        context.getSystemService(Context.ALARM_SERVICE);</span><br><span class="line"><span class="comment">// 如果开启服务</span></span><br><span class="line"><span class="keyword">if</span> (isOn) &#123;</span><br><span class="line">	<span class="comment">// 将这个 PendingIntent 放到 AlarmManager 中定时启动</span></span><br><span class="line">    alarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME,</span><br><span class="line">            SystemClock.elapsedRealtime(), POLL_INTERVAL, pi);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// 如果没有开启服务，就让 AlarmManager 撤销该定时器</span></span><br><span class="line">    alarmManager.cancel(pi);</span><br><span class="line">    <span class="comment">// 它自己也要撤销</span></span><br><span class="line">    pi.cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-PendingIntent"><a href="#2-1-PendingIntent" class="headerlink" title="2.1 PendingIntent"></a>2.1 PendingIntent</h2><p>PendingIntent 是一种 token 对象。调用 PendingIntent.getService(…)方法获取 PendingIntent 时，我们告诉操作系统：“请记住， 我需要使用 startService(Intent)方法发送这个 intent。”随后，调用 PendingIntent 对象的 send()方法时，操作系统会按照要求发送原来封装的 intent。<br>PendingIntent 真正精妙的地方在于，将 PendingIntent token 交给其他应用使用时，它是代表当前应用发送 token 对象的。另外，PendingIntent 本身存在于操作系统而不是 token 里。如果不顾及别人感受的话，也可以在交给别人一个 PendingIntent 对象后，立即撤销它，让 send()方法什么也做不了。<strong>如果使用同一个 intent 请求 PendingIntent 两次，得到的 PendingIntent 仍会是同一个。</strong>我们可借此测试某个 PendingIntent 是否已存在，或撤销已发出的 PendingIntent。</p>
<p><code>PendingIntent.getService(...)</code> 方法打包了启动服务的方法的调用。它有四个参数:一个用来发送 intent 的 Context，一个区分 PendingIntent 来源的请求代码，一个待发送的 Intent 对象以及一组用来决定如何创建 PendingIntent 的标志符。</p>
<h2 id="2-2-使用-AlarmManager"><a href="#2-2-使用-AlarmManager" class="headerlink" title="2.2 使用 AlarmManager"></a>2.2 使用 AlarmManager</h2><p>我们用 AlarmManager.setInexactRepeating(…) 方法开启了定时启动，该方法同样具有四个参数: 一个描述定时器时间基准的常量，定时器启动的时间，定时器循环的时间间隔以及一个到时要发送的 PendingIntent。</p>
<ol>
<li>AlarmManager.ELAPSED_REALTIME 是基准时间值 ， 这表明我们是以 SystemClock. elapsedRealtime()走过的时间来确定何时启动时间的。也就是说，经过一段指定的时间，就启动定时器。假如使用 AlarmManager.RTC，启动基准时间就是当前时刻(例如，System. currentTimeMillis())。也就是说，一旦到了某个固定时刻，就启动定时器。</li>
<li>时间间隔由我们自己确定，不过推荐使用 AlarmManager 自身定义的常量。</li>
</ol>
<h2 id="2-3-获取定时器激活状态"><a href="#2-3-获取定时器激活状态" class="headerlink" title="2.3 获取定时器激活状态"></a>2.3 获取定时器激活状态</h2><p>由于我们在代码中撤销定时器的同时也撤销了 PendingIntent，所以通过发送一个 <code>PendingIntent.FLAG_NO_CREATE</code> 标志给 getService 方法可以获取这个 PendingIntent 存在状态。</p>
<h1 id="3-通知"><a href="#3-通知" class="headerlink" title="3. 通知"></a>3. 通知</h1><p>如果服务需要与用户沟通，通知信息(notification)总是一个不错的选择。通知信息是指显示在通知抽屉上的消息条目，用户可向下滑动屏幕读取。 想要发送通知信息，首先要创建 Notification 对象。</p>
<p>Notification 需使用构造对象来创建。完整的 Notification 至少应包括:</p>
<ul>
<li>在 Lollipop 之前的设备上，首次显示通知信息时，在状态栏上显示的 ticker text(Lollipop<br>之后，ticker text 不再显示在状态栏上，但仍与可访问性服务相关);</li>
<li>在状态栏上显示的图标(在 Lollipop 之前的设备上，图标在 ticker text 消失后出现); </li>
<li>代表通知信息自身，在通知抽屉中显示的视图;</li>
<li>待触发的 PendingIntent，用户点击抽屉中的通知信息时触发。</li>
</ul>
<p>完成 Notification 对象的创建后，可调用 NotificationManager 系统服务的 notify(int, Notification)方法发送它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resources resources = getResources();</span><br><span class="line">Intent i = PhotoGalleryActivity.newIntent(<span class="keyword">this</span>);</span><br><span class="line">PendingIntent pi = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .setTicker(resources.getString(R.string.new_pictures_title))</span><br><span class="line">        .setSmallIcon(android.R.drawable.ic_menu_report_image)</span><br><span class="line">        .setContentTitle(resources.getString(R.string.new_pictures_title))</span><br><span class="line">        .setContentText(resources.getString(R.string.new_pictures_text))</span><br><span class="line">        .setContentIntent(pi)</span><br><span class="line">        .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">NotificationManagerCompat notificationManager =</span><br><span class="line">        NotificationManagerCompat.from(<span class="keyword">this</span>);</span><br><span class="line">notificationManager.notify(<span class="number">0</span>, notification);</span><br></pre></td></tr></table></figure>
<ol>
<li>首先，调用 setTicker(CharSequence)和 setSmallIcon (int)方法，配置 ticker text 和小图标。</li>
<li>然后配置 Notification 在下拉抽屉中的外观。图标的值来自于 setSmallIcon(int) 方法 ， 而设置标题和显示文字则需分别调用 setContentTitle (CharSequence)和 setContentText(CharSequence)方法。</li>
<li>接下来，须指定用户点击 Notification 消息时所触发的动作行为。这里使用的是 PendingIntent。用户在下拉抽屉中点击 Notification 消息时，传入 setContentIntent(PendingIntent)方法的 PendingIntent 会被触发。</li>
<li>调用 setAutoCancel (true)方法可调整上述行为。一旦执行了 setAutoCancel(true)设置方法，用户点击 Notification 消息时，该消息就会从消息抽屉中删除。</li>
<li>最后，从当前 context 中取出一个 NotificationManagerCompat 实例，然后调用 Notifi- cationManagerCompat.notify(…)方法贴出消息。传入的整数参数是通知消息的标识符，在整个应用中该值应该是唯一的。如果使用同一 ID 发送两条消息，则第二条消息会替换掉第一条消息。在实际开发中，这也是进度条或其他动态视觉效果的实现方式。</li>
</ol>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十五）—— 第25章 搜索</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2025%20%E6%90%9C%E7%B4%A2-20170220.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了 ToolBar 中的 SearchView 的使用以及 SharedPreferences 的简单使用。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/37f3b9fa2dd7d7183de7e1bf600c44a6f59af26a" target="_blank" rel="noopener">完成第25章</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-SearchView"><a href="#1-SearchView" class="headerlink" title="1. SearchView"></a>1. SearchView</h1><p>SearchView 是一个 ActionView（操作视图），所谓操作视图，就是可以内置在工具栏中的视图。SearchView 可以让整个搜索界面完全内置在应用的工具栏中。</p>
<h2 id="1-1-SearchView-的建立"><a href="#1-1-SearchView-的建立" class="headerlink" title="1.1 SearchView 的建立"></a>1.1 SearchView 的建立</h2><p>首先我们建立菜单资源：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_item_search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:actionViewClass</span>=<span class="string">"android.support.v7.widget.SearchView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以发现我们多了一个 <code>app:actionViewClass</code> 属性，这个就是指定这个 item 的 actionView 类。</p>
<p>现在只要我们在 onCreateOptionsMenu 中引用该菜单资源，就能看到 SearchView 了。</p>
<h2 id="1-2-SearchView-的使用"><a href="#1-2-SearchView-的使用" class="headerlink" title="1.2 SearchView 的使用"></a>1.2 SearchView 的使用</h2><p>我们现在能看到 SearchView，当然还要让其能够进行相应的工作：首先获取实例，然后设置回调方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</span><br><span class="line">    inflater.inflate(R.menu.fragment_photo_gallery, menu);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在这里获取这个 ActionView</span></span><br><span class="line">    MenuItem searchItem = menu.findItem(R.id.menu_item_search);</span><br><span class="line">    <span class="keyword">final</span> SearchView searchView = (SearchView) searchItem.getActionView();</span><br><span class="line"></span><br><span class="line">    searchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 点击提交后</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</span><br><span class="line">        	<span class="comment">// 文字改变时调用</span></span><br><span class="line">            Log.d(TAG, <span class="string">"QueryTextChange: "</span> + newText);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    searchView.setOnSearchClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            String query = QueryPreferences.getStoredQuery(getActivity());</span><br><span class="line">            searchView.setQuery(query, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-使用-SharedPreferences-实现轻量级数据存储"><a href="#2-使用-SharedPreferences-实现轻量级数据存储" class="headerlink" title="2. 使用 SharedPreferences 实现轻量级数据存储"></a>2. 使用 SharedPreferences 实现轻量级数据存储</h1><p>shared preferences 本质上就是文件系统中的文件，可使用 SharedPreferences 类读写它。 SharedPreferences 实例用起来更像一个键值对仓库(类似于 Bundle)，但它可以通过持久化存储保存数据。键值对中的键为字符串，而值是原子数据类型。进一步查看 shared preferences 文件可知，它们实际上是一种简单的 XML 文件，但 SharedPreferences 类已屏蔽了读写文件的实现细节。shared preferences 文件保存在应用沙盒中，所以，类似密码这样的敏感信息不应该用它来保存。<br>要获得定制的 SharedPreferences 实例 ， 可使用 Context.getSharedPreferences (String,int)方法。然而，在实际开发中，我们并不关心具体是什么样的 SharedPreferences 实例，只要它能共享于整个应用就可以了。这种情况下，最好使用<code>PreferenceManager. getDefaultSharedPreferences(Context)</code>方法，该方法会返回具有私有权限和默认名称的实例(仅在当前应用内可用)。</p>
<p>一个示例的 SharedPreferences 操作类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryPreferences</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREF_SEARCH_QUERY = <span class="string">"searchQuery"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStoredQuery</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PreferenceManager.getDefaultSharedPreferences(context)</span><br><span class="line">                .getString(PREF_SEARCH_QUERY, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setStoredQuery</span><span class="params">(Context context, String query)</span> </span>&#123;</span><br><span class="line">        PreferenceManager.getDefaultSharedPreferences(context)</span><br><span class="line">                .edit()</span><br><span class="line">                .putString(PREF_SEARCH_QUERY, query)</span><br><span class="line">                .apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十四）—— 第24章 Looper、Handler 和 HandlerThread</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2024%20Looper%E3%80%81Handler%20%E5%92%8C%20HandlerThread-20170215.html</url>
    <content><![CDATA[<blockquote>
<p>本章顾名思义，讲了 Looper，Handler，以及线程之间的交互。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/c68af985ad2fed691ff399ec8ba4519dd4dcf8f7" target="_blank" rel="noopener">完成24章但未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/c001631637043bcaf1d288a06c81988e03ecec11" target="_blank" rel="noopener">完成24章挑战1</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/7323d8b21706f8398896f5fadd1a2612dd6c8b8b" target="_blank" rel="noopener">完成24章挑战2</a></p>
</blockquote>
<p>在本章，我们要使用一个新的线程，并且使用其中 Looper 来完成下载图片的工作。为什么不直接在 AsyncTask 的 doInBackground 中添加网络下载代码呢？那样就要每次下载一张，直到完成全部100张的下载。最后才会执行 onPostExecute(…)方法，让所有下载的图片全部显示在 RecyclerView 视图中，这样既耗时又耗内存。AsyncTask 是执行后台线程的最简单方式，但它不适用于那些重复且长时间运行的任务。</p>
<a id="more"></a>


<h1 id="1-各种定义"><a href="#1-各种定义" class="headerlink" title="1. 各种定义"></a>1. 各种定义</h1><h2 id="1-1-Looper"><a href="#1-1-Looper" class="headerlink" title="1.1 Looper"></a>1.1 Looper</h2><p>Android 系统中，线程有一个消息队列(message queue)。使用消息队列的线程叫作消息循环(message loop)。消息循环会循环检查队列上是否有新消息。消息循环由线程和 looper 组成。Looper 对象管理着线程的消息队列。<br>主线程就是个消息循环，因此也拥有 looper。主线程的所有工作都是由其 looper 完成的。looper 不断从消息队列中抓取消息，然后完成消息指定的任务。</p>
<h2 id="1-2-Message"><a href="#1-2-Message" class="headerlink" title="1.2 Message"></a>1.2 Message</h2><p>Message 类是 Handler 的子类用于 Handler 传递消息，它有好几个实例变量，其中有三个需在实现时定义。 </p>
<ul>
<li>what:用户定义的 int 型消息代码，用来描述消息。</li>
<li>obj:随消息发送的用户指定对象。</li>
<li>target:处理消息的 Handler。<br>Message 的 target 是 Handler 类的一个实例。创建 Message 时，它会自动与一个 Handler 相关联。Message 待处理时，Handler 对象负责触发消息处理事件。</li>
</ul>
<h2 id="1-3-Handler"><a href="#1-3-Handler" class="headerlink" title="1.3 Handler"></a>1.3 Handler</h2><p>Handler 可看作 message handler 的简称。Handler 不仅仅是处理 Message 的目标(target)，也是创建和发布 Message 的接口。创建 Handler 时，它会自动和该线程的 Looper 相关联。</p>
<h2 id="1-4-三者关系"><a href="#1-4-三者关系" class="headerlink" title="1.4 三者关系"></a>1.4 三者关系</h2><ul>
<li>一个 Thread 仅有一个 Looper，也就是一个消息队列</li>
<li>一个 Thread 可以有多个 Handler，共用一个消息队列</li>
<li>一个 Message 只对应一个 Handler，一个 Handler 可以有多个 Message</li>
</ul>
<h2 id="1-5-一个典型-Looper-的处理过程"><a href="#1-5-一个典型-Looper-的处理过程" class="headerlink" title="1.5 一个典型 Looper 的处理过程"></a>1.5 一个典型 Looper 的处理过程</h2><p>首先需要准备好 Looper，然后建立一个其他线程能引用的 Handler，在需要的时候让 Handler 发消息给 Looper 让其执行。</p>
<h1 id="2-HandlerThread"><a href="#2-HandlerThread" class="headerlink" title="2. HandlerThread"></a>2. HandlerThread</h1><p>HandlerThread 类帮我们完成了建立 Looper 的过程，因此，只要继承它就能省去一些工作，并且避免一些风险。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThumbnailDowloadler.java 省略了许多内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThumbnailDowloader</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">HandlerThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DOWNLOAD = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean mHasQuit = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Handler mRequestHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 新建一个 Handler</span></span><br><span class="line">        mRequestHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (msg.what == MESSAGE_DOWNLOAD) &#123;</span><br><span class="line">                    <span class="comment">// get a photo and refresh view</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueThumbnail</span><span class="params">(T target, String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 外部调用，发消息给 Handler</span></span><br><span class="line">        mRequestHandler.obtainMessage(MESSAGE_DOWNLOAD, target)</span><br><span class="line">                    .sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRequestHandler.removeMessages(MESSAGE_DOWNLOAD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主线程中是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mThumbnailDownloader = <span class="keyword">new</span> ThumbnailDownloader&lt;&gt;();</span><br><span class="line">mThumbnailDownloader.start();</span><br><span class="line">mThumbnailDownloader.getLooper();</span><br><span class="line"><span class="comment">// 在需要的时候调用</span></span><br><span class="line">mThumbnailDownloader.queueThumbnail(holder, url);</span><br></pre></td></tr></table></figure>

<h1 id="3-线程交互"><a href="#3-线程交互" class="headerlink" title="3. 线程交互"></a>3. 线程交互</h1><p>主线程现在能够适时调用这个线程的方法，用于下载图片了。但是还存在一个问题，那就是下载线程下载完一个任务以后如何更新视图呢？我们知道 UI 只能在主线程里更新，所以我们采用在主线程里声明一个 Handler，传递给下载线程，让下载线程在下载完成后在主线程执行更新操作。因为不能直接引用主线程的方法，故而在这里用到了回调。</p>
<h2 id="3-1-下载线程中"><a href="#3-1-下载线程中" class="headerlink" title="3.1 下载线程中"></a>3.1 下载线程中</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThumbnailDownloader，也就是下载线程中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员声明</span></span><br><span class="line"><span class="keyword">private</span> Handler mResponseHandler;</span><br><span class="line"><span class="keyword">private</span> ThumbnailDowloadListener&lt;T&gt; mThumbnailDownloadListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThumbnailDowloadListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onThumbnailDownloaded</span><span class="params">(T target, Bitmap thumbnail)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThumbnailDownloaderListener</span><span class="params">(ThumbnailDowloadListener&lt;T&gt; listener)</span> </span>&#123;</span><br><span class="line">    mThumbnailDownloadListener = listener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造函数传递主线程的 Handler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThumbnailDowloader</span><span class="params">(Handler responseHandler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(TAG);</span><br><span class="line">    mResponseHandler = responseHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，主线程通过调用这些方法，就能够让下载线程获取到主线程的 Handler 和回调接口实例。</p>
<h2 id="3-2-主线程中"><a href="#3-2-主线程中" class="headerlink" title="3.2 主线程中"></a>3.2 主线程中</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成员声明</span></span><br><span class="line"><span class="keyword">private</span> ThumbnailDowloader&lt;PhotoHolder&gt; mThumbnailDownloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递实例给下载线程</span></span><br><span class="line"><span class="comment">// 这个 Handler 在主线程中建立，所以是和主线程 Looper 相关联的</span></span><br><span class="line">Handler responseHandler = <span class="keyword">new</span> Handler(); </span><br><span class="line">mThumbnailDownloader = <span class="keyword">new</span> ThumbnailDowloader&lt;&gt;(responseHandler);</span><br><span class="line">mThumbnailDownloader.setThumbnailDownloaderListener(</span><br><span class="line">	<span class="keyword">new</span> ThumbnailDowloader.ThumbnailDowloadListener&lt;PhotoHolder&gt;() &#123;</span><br><span class="line">	   	<span class="meta">@Override</span></span><br><span class="line">	   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onThumbnailDownloaded</span><span class="params">(PhotoHolder target, Bitmap thumbnail)</span> </span>&#123;</span><br><span class="line">	   		Drawable drawable = <span class="keyword">new</span> BitmapDrawable(getResources(), thumbnail);</span><br><span class="line">			target.bindDrawable(drawable);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="3-3-在下载线程中给主线程-Looper-发送消息"><a href="#3-3-在下载线程中给主线程-Looper-发送消息" class="headerlink" title="3.3 在下载线程中给主线程 Looper 发送消息"></a>3.3 在下载线程中给主线程 Looper 发送消息</h2><p>现在，通过 mResponseHandler，下载线程能够访问与主线程 Looper 绑定的 Handler。同时，还有 ThumbnailDownloadListener 使用返回的 Bitmap 执行 UI 更新操作。具体来说， 就是通过 onThumbnailDownloaded 实现，使用新下载的 Bitmap 来设置 PhotoHolder 的 Drawable。<br>和在下载线程上把下载图片的请求放入消息队列类似，我们也可以返回定制 Message 给主线程，要求显示已下载图片。不过，这需要另一个 Handler 子类，以及一个 handleMessage(…) 覆盖方法。方便起见，我们转而使用另一个方便的 Handler 方法——post(Runnable)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mResponseHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestMap.get(target) != url ||</span><br><span class="line">                mHasQuit) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mRequestMap.remove(target);</span><br><span class="line">        mThumbnailDownloadListener.onThumbnailDownloaded(target, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在这里，新建的 Runnable 对象会被当成 Message 的回调方法，直接执行 run() 方法，所以相当于发送一个消息，里面写明了怎么做，而不是把对象和消息类型发给 Handler，让 Handler 决定怎么做。</p>
<h1 id="4-挑战练习"><a href="#4-挑战练习" class="headerlink" title="4. 挑战练习"></a>4. 挑战练习</h1><h2 id="4-1-缓存层的添加"><a href="#4-1-缓存层的添加" class="headerlink" title="4.1 缓存层的添加"></a>4.1 缓存层的添加</h2><p>首先我们能够意识到，这个缓存应该放在下载线程中，因为所有下载的处理都在其中。LruCache 是一种类似键值对的存在，在图片缓存中，我们理所应当地可以将图片的 url 作为键，对应的 Bitmap 作为值，在下载一张图片之前先检查 Cache 中是否存在这个图片，不存在再下载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其中省略了之前写过的大量过程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mCache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	……</span><br><span class="line">	<span class="comment">// 建立 Cache</span></span><br><span class="line">    <span class="keyword">int</span> maxCacheSize = <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 4MiB</span></span><br><span class="line">    mCache = <span class="keyword">new</span> LruCache&lt;&gt;(maxCacheSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(<span class="keyword">final</span> T target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String url = mRequestMap.get(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap;</span><br><span class="line">        <span class="keyword">if</span> (mCache.get(url) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bitmapBytes = <span class="keyword">new</span> FlickrFetchr().getUrlBytes(url);</span><br><span class="line">            bitmap = BitmapFactory</span><br><span class="line">                    .decodeByteArray(bitmapBytes, <span class="number">0</span>, bitmapBytes.length);</span><br><span class="line">            Log.i(TAG, <span class="string">"Bitmap created"</span>);</span><br><span class="line"></span><br><span class="line">            mCache.put(url, bitmap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bitmap = mCache.get(url);</span><br><span class="line">            Log.i(TAG, <span class="string">"Bitmap from cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Error downloading image"</span>, ioe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-预加载"><a href="#4-2-预加载" class="headerlink" title="4.2 预加载"></a>4.2 预加载</h2><p>我用了较为笨的方法实现简单的预加载，那就是在 onBindViewHolder 的时候挨个加载对应 item 的前十个和后十个并放到缓存中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载线程中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlePreload</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCache.get(url) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bitmapBytes = <span class="keyword">new</span> FlickrFetchr().getUrlBytes(url);</span><br><span class="line">            Bitmap bitmap = BitmapFactory</span><br><span class="line">                    .decodeByteArray(bitmapBytes, <span class="number">0</span>, bitmapBytes.length);</span><br><span class="line">            mCache.put(url, bitmap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Error preloading image"</span>, ioe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主线程中的调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(PhotoHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">	……</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = Math.max(<span class="number">0</span>, position - <span class="number">10</span>);</span><br><span class="line">            i &lt; Math.min(mGalleryItems.size() - <span class="number">1</span>, position + <span class="number">10</span>);</span><br><span class="line">            i ++ ) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Preload position"</span> + i);</span><br><span class="line">        mThumbnailDownloader.queuePreloadThumbnail(mGalleryItems.get(i).getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十三）—— 第23章 HTTP 与后台任务</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2023%20HTTP%20%E4%B8%8E%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1-20170211.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了如何使用 android 系统的网络连接，并介绍了格式化 JSON 和多线程编程 AsyncTask 的使用。另外，挑战练习里还结合了 Gson 库的使用。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/62310fed3abea3bb08151656539dffbf035a69f6" target="_blank" rel="noopener">完成23章但未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/4e47fb20d3285fe7cc61ccce140f467c5935a6d3" target="_blank" rel="noopener">完成23章挑战1：使用 Gson</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/5445c65491e29e2a6fd349667c8621b4bed903e6" target="_blank" rel="noopener">完成23章挑战2：添加分页</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/074e528d9160a82d9881e184f7132a1a8fa67b34" target="_blank" rel="noopener">完成23章挑战3：动态调整网格列</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-网络连接基本"><a href="#1-网络连接基本" class="headerlink" title="1. 网络连接基本"></a>1. 网络连接基本</h1><p>首先要在 Manifest 文件中请求网络权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们建立一个网络请求的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FlickrFetchr.java</span></span><br><span class="line"><span class="comment">// 参数是 url 字符串，并且需要抛出 IO 错误</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getUrlBytes(String urlSpec) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(urlSpec);</span><br><span class="line">    <span class="comment">// 打开连接</span></span><br><span class="line">    HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	<span class="comment">// 建立两个流对象</span></span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="comment">// 使用 getInputStream() 方法时才会真正发送 GET 请求</span></span><br><span class="line">        <span class="comment">// 如果要使用 POST 请求，需要调用 getOutputStream()</span></span><br><span class="line">        InputStream in = connection.getInputStream();</span><br><span class="line">		<span class="comment">// 如果连接失败就抛出错误</span></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() != HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(connection.getResponseMessage() +</span><br><span class="line">                    <span class="string">": with"</span> +</span><br><span class="line">                    urlSpec);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 建立一个计数器</span></span><br><span class="line">        <span class="keyword">int</span> bytesRead = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 建立一个缓存 buffer</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 用 InputStream.read 将数据读取到 buffer 中，</span></span><br><span class="line">        <span class="comment">// 然后写到 OutputStream 中</span></span><br><span class="line">        <span class="keyword">while</span> ((bytesRead = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 之后一定要关闭 OutputStream</span></span><br><span class="line">        out.close();</span><br><span class="line">        <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    	<span class="comment">// 最后要关闭连接</span></span><br><span class="line">        connection.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrlString</span><span class="params">(String urlSpec)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">// 将结果转换成 String</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(getUrlBytes(urlSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-线程与主线程"><a href="#2-线程与主线程" class="headerlink" title="2. 线程与主线程"></a>2. 线程与主线程</h1><p>网络连接需要时间，Web 服务器可能需要1~2秒的时间来响应访问请求，文件下载则耗时更久。考虑到这个因素，Android 禁止任何主线程网络连接行为。即使强行在主线程中进行网络连接，Android 也会抛出 NetworkOnMainThreadException 异常。</p>
<p>这是为什么呢?要想知道，首先要了解什么是线程，什么是主线程以及主线程的用途是什么。<br><strong>线程是个单一执行序列。单个线程中的代码会逐步执行。所有 Android 应用的运行都是从主线程开始的。然而，主线程不是线程那样的预定执行序列。相反，它处于一个无限循环的运行状态，等待着用户或系统触发事件的发生。事件触发后，主线程便负责执行代码，以响应这些事件。</strong></p>
<p>主线程运行着所有更新 UI 的代码，其中包括响应 activity 的启动、按钮的点击等不同 UI 相关事件的代码。(由于响应的事件基本都与用户界面相关，主线程有时也叫作 UI 线程。)<br>事件处理循环让 UI 代码得以按顺序执行。这可以保证任何事件处理都不会发生冲突，同时代码也能够快速响应执行。</p>
<p>而网络连接相比其他任务更耗时。等待响应期间，用户界面毫无反应，这可能会导致应用无响应(Application Not Responding,ANR)现象发生，也就是一个弹框，要求你关闭应用。<br>怎样使用后台线程最容易呢？答案就是使用 AsyncTask 类</p>
<h1 id="3-AsyncTask"><a href="#3-AsyncTask" class="headerlink" title="3. AsyncTask"></a>3. AsyncTask</h1><h2 id="3-1-AsyncTask-的生命"><a href="#3-1-AsyncTask-的生命" class="headerlink" title="3.1 AsyncTask 的生命"></a>3.1 AsyncTask 的生命</h2><p>AsyncTask 类可以重写的方法和一个进程的生命过程对应：</p>
<ul>
<li><code>onPreExecute()</code> 执行之前</li>
<li><code>onProgressUpdate()</code> 更新进展</li>
<li><code>doInBackground()</code> 在线程中真正要完成的事</li>
<li><code>onPostExecute()</code> 完成之后要做的事（在 UI 线程中执行）</li>
<li><code>onCancelled()</code>    退出之后</li>
</ul>
<h2 id="3-2-AsyncTask-的三个参数"><a href="#3-2-AsyncTask-的三个参数" class="headerlink" title="3.2 AsyncTask 的三个参数"></a>3.2 AsyncTask 的三个参数</h2><p>其中模板的三个类类型参数（不能是基础类型）分别是：输入、进度、结果。</p>
<h3 id="3-2-1-第一个参数：输入"><a href="#3-2-1-第一个参数：输入" class="headerlink" title="3.2.1 第一个参数：输入"></a>3.2.1 第一个参数：输入</h3><p>第一个类型参数可指定输入参数的类型。可参考以下示例使用该参数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AsyncTask&lt;String,Void,Void&gt; task = <span class="keyword">new</span> AsyncTask&lt;String,Void,Void&gt;() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Void <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span> (String parameter : params) &#123;</span><br><span class="line">			Log.i(TAG, <span class="string">"Received parameter: "</span> + parameter);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>输入参数传入 execute(…)方法(可接受一个或多个参数): task.execute(“第一个参数”, “第二个参数”, “……”);<br>然后，再把这些变量参数传递给 doInBackground(…)方法。 </p>
<h3 id="3-2-2-第二个参数：进度"><a href="#3-2-2-第二个参数：进度" class="headerlink" title="3.2.2 第二个参数：进度"></a>3.2.2 第二个参数：进度</h3><p>第二个类型参数可指定发送进度更新需要的类型。以下为示例代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ProgressBar gestationProgressBar = <span class="comment">/* 一个特定的进度条 */</span>;</span><br><span class="line">gestationProgressBar.setMax(<span class="number">42</span>); <span class="comment">/* 最大的进度 */</span></span><br><span class="line">AsyncTask&lt;Void,Integer,Void&gt; haveABaby = <span class="keyword">new</span> AsyncTask&lt;Void,Integer,Void&gt;() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (!babyIsBorn()) &#123;</span><br><span class="line">			Integer weeksPassed = getNumberOfWeeksPassed();</span><br><span class="line">          publishProgress(weeksPassed); <span class="comment">// 关键，将参数发送到 onProgressUpdate</span></span><br><span class="line">          patientlyWaitForBaby();</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> progress = params[<span class="number">0</span>];</span><br><span class="line">		gestationProgressBar.setProgress(progress);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* call when you want to execute the AsyncTask */</span></span><br><span class="line">haveABaby.execute();</span><br></pre></td></tr></table></figure>
<p>进度更新通常发生在执行的后台进程中。问题是，在后台进程中无法完成必要的 UI 更新。因此 AsyncTask 提供了 publishProgress(…)和 onProgressUpdate(…)方法。<br> 其工作方式是这样的 : 在后台线程中 , 从 doInBackground(…) 方法中调用 publishProgress(…)方法。这样 onProgressUpdate(…)方法便能够在 UI 线程上调用。因此，在 onProgressUpdate(…)方法中执行 UI 更新就可行了，但必须在 doInBackground(…) 方法中使用 publishProgress(…)方法对它们进行管控。</p>
<h3 id="3-2-3-第三个参数：结果"><a href="#3-2-3-第三个参数：结果" class="headerlink" title="3.2.3 第三个参数：结果"></a>3.2.3 第三个参数：结果</h3><p>第三个类型参数是处理结果返回的类型参数。下面是本章的示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhotoGalleryFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FetchItemsTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">List</span>&lt;<span class="title">GalleryItem</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;GalleryItem&gt; <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlickrFetchr().fetchItems(params[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(List&lt;GalleryItem&gt; galleryItems)</span> </span>&#123;</span><br><span class="line">        mItems = galleryItems;</span><br><span class="line">        setAdapter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第三个参数就是在 doInBackground 中返回的结果，我们需要从后台请求 API 返回的 JSON 数据，然后将其格式化，返回的就是我们需要的数据。</p>
<h1 id="4-JSON-数据解析"><a href="#4-JSON-数据解析" class="headerlink" title="4. JSON 数据解析"></a>4. JSON 数据解析</h1><p>什么是 JSON 数据呢？JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于 JavaScript 的一个子集。JSON 采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python 等）。这些特性使 JSON 成为理想的数据交换语言。</p>
<p>JSON 对象是一系列包含在{ }中的名值对。JSON 数组是包含在[ ]中用逗号隔开的 JSON 对象列表。对象彼此嵌套形成层级关系。详细的语法可以查看<a href="http://json.org/" target="_blank" rel="noopener">JSON 官网</a>。</p>
<p>JSON 这种数据格式在同样基于这些结构的编程语言之间交换十分方便，所以网络服务器端越来越多地开始用 JSON 来交换数据，我们在这章使用的 API 同样如此。</p>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为节省版面，去掉了无关的属性</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"photos"</span>: &#123;</span><br><span class="line">    <span class="string">"page"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"pages"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"photo"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"31987348504"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"Penny"</span>,</span><br><span class="line">        <span class="string">"url_s"</span>: <span class="string">"https://farm3.staticflickr.com/2915/31987348504_9a949c482d_m.jpg"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"31987352214"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"url_s"</span>: <span class="string">"https://farm1.staticflickr.com/455/31987352214_58428f3a9d_m.jpg"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"stat"</span>: <span class="string">"ok"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的解析代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析时用 try…catch，要抛出 JSONException 防止程序崩溃</span></span><br><span class="line"><span class="comment">// JSONObject 构造方法解析传入的 JSON 数据后</span></span><br><span class="line"><span class="comment">// 会生成与原始 JSON 数据对应的对象树</span></span><br><span class="line">JSONObject jsonBody = <span class="keyword">new</span> JSONObject(jsonString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶层 JSONObject 对应着原始数据最外层的&#123; &#125;。它包含了一个叫作 photos 的嵌套 JSONObject</span></span><br><span class="line">JSONObject photosJsonObject = jsonBody.getJSONObject(<span class="string">"photos"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个嵌套对象又包含了一个叫作 photo 的 JSONArray</span></span><br><span class="line">JSONArray photoJsonArray = photosJsonObject.getJSONArray(<span class="string">"photo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个嵌套数组中又包含了一组 JSONObject</span></span><br><span class="line"><span class="comment">// 这些 JSONObeject 就是要获取的一张张图片的元数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; photoJsonArray.length(); i++) &#123;</span><br><span class="line">    JSONObject photoJsonObject = photoJsonArray.getJSONObject(i);</span><br><span class="line">    GalleryItem item = <span class="keyword">new</span> GalleryItem();</span><br><span class="line">    item.setId(photoJsonObject.getString(<span class="string">"id"</span>));</span><br><span class="line">    item.setCaption(photoJsonObject.getString(<span class="string">"title"</span>));</span><br><span class="line">    <span class="keyword">if</span> (!photoJsonObject.has(<span class="string">"url_s"</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    item.setUrl(photoJsonObject.getString(<span class="string">"url_s"</span>));</span><br><span class="line">    items.add(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解析完成后就可以在 AsyncTask 的 onPostExecute 中对 UI 进行更新了。</p>
<h1 id="5-挑战练习"><a href="#5-挑战练习" class="headerlink" title="5. 挑战练习"></a>5. 挑战练习</h1><p>本章的挑战练习难度依次递增，考验了我们很多知识。</p>
<h2 id="5-1-使用-Gson-库解析-JSON-数据"><a href="#5-1-使用-Gson-库解析-JSON-数据" class="headerlink" title="5.1 使用 Gson 库解析 JSON 数据"></a>5.1 使用 Gson 库解析 JSON 数据</h2><p>Gson 是 Google 官方推荐的 JSON 解析库，使用 Gson 不用写任何解析代码，它能自动将 JSON 数据映射为 Java 对象。</p>
<h3 id="5-1-1-添加-Gson-依赖"><a href="#5-1-1-添加-Gson-依赖" class="headerlink" title="5.1.1 添加 Gson 依赖"></a>5.1.1 添加 Gson 依赖</h3><p>在 File -&gt; Project Structure -&gt; Dependencies 中添加 gson 依赖</p>
<h3 id="5-1-2-构建对应的-POJO-类"><a href="#5-1-2-构建对应的-POJO-类" class="headerlink" title="5.1.2 构建对应的 POJO 类"></a>5.1.2 构建对应的 POJO 类</h3><p>由于不想更改原本的 GalleryItem 类，并且想让成员变量的命名符合 java 的命名规范，我使用了 <code>@SerializedName()</code> 注解，这个注解注明了 Gson 在转换时对应的键名。并且构建了一个新的类，用于匹配对应的 API 结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PhotoBean.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STATUS_OK = <span class="string">"ok"</span></span><br><span class="line">            , STATUS_FAILED = <span class="string">"fail"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"photos"</span>)</span><br><span class="line">    <span class="keyword">private</span> PhotosInfo mPhotoInfo;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"stat"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mStatus;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"message"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mMessage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotosInfo</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SerializedName</span>(<span class="string">"photo"</span>)</span><br><span class="line">        List&lt;GalleryItem&gt; mPhoto;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;GalleryItem&gt; <span class="title">getPhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mPhoto;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略 getter 和 setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-1-3-使用-Gson"><a href="#5-1-3-使用-Gson" class="headerlink" title="5.1.3 使用 Gson"></a>5.1.3 使用 Gson</h3><p>Gson 的使用再简单不过了，与上面的代码相比有云泥之别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PhotoBean photoBean = (PhotoBean) <span class="keyword">new</span> Gson()</span><br><span class="line">        .fromJson(jsonString, PhotoBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>不过记得要抛出 JsonSyntaxException。</p>
<h2 id="5-2-分页显示"><a href="#5-2-分页显示" class="headerlink" title="5.2 分页显示"></a>5.2 分页显示</h2><p>这个挑战的需求是：如果我们下滑最底部，就在后面添加下一页的内容。<br>所以在 url 的生成中我们还要加入 page 这个参数。我加入了一个成员变量 mNextPage 用于记录下次要请求的页面， 然后添加了一个常量 MAX_PAGES 用于控制最大请求页数。</p>
<h3 id="5-2-1-RecyclerView-onScrollListener"><a href="#5-2-1-RecyclerView-onScrollListener" class="headerlink" title="5.2.1 RecyclerView.onScrollListener"></a>5.2.1 <code>RecyclerView.onScrollListener</code></h3><p>onScrollListener 有两个可以重写的方法，一个是 onScrollStateChanged()，还有一个是 onScrolled，对我们这个需求来说，显然 onScrollStateChanged 比较合适，ScrollState 也有三种：</p>
<ul>
<li><code>SCROLL_STATE_IDLE</code>: 视图没有被拖动，处于静止  </li>
<li><code>SCROLL_STATE_DRAGGING</code>： 视图正在拖动中 </li>
<li><code>SCROLL_STATE_SETTLING</code>： 视图在惯性滚动 </li>
</ul>
<p>这个挑战最关键的就是如何判断滑到最底端。首先滑动到最底端时前两个状态其实都可以，但是滑动到最底这个信息只有 LayoutManager 知道，我们可以直接看代码分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView.OnScrollListener onButtomListener = </span><br><span class="line">		<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</span><br><span class="line">        <span class="comment">// 首先获取 LayoutManager</span></span><br><span class="line">        GridLayoutManager layoutManager = (GridLayoutManager) recyclerView.getLayoutManager();</span><br><span class="line">        <span class="comment">// 然后可以找到最后显示的位置，一旦滚动就会获取该位置</span></span><br><span class="line">        mLastPosition = layoutManager.findLastCompletelyVisibleItemPosition();</span><br><span class="line">        <span class="comment">// 如果静止的时候最后的位置大于等于数据个数</span></span><br><span class="line">        <span class="comment">// 而且前一个任务完成时（防止多次重复）</span></span><br><span class="line">        <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE</span><br><span class="line">                &amp;&amp; mLastPosition &gt;= mPhotoAdapter.getItemCount() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mFetchItemsTask.getStatus() == AsyncTask.Status.FINISHED) &#123;</span><br><span class="line">            	<span class="comment">// 下一页加一，在小于最大页数时</span></span><br><span class="line">            	<span class="comment">// 弹出 Toast 表示正在加载</span></span><br><span class="line">            	<span class="comment">// 然后打开一个新任务，加载下一页</span></span><br><span class="line">                mNextPage++;</span><br><span class="line">                <span class="keyword">if</span> (mNextPage &lt;= MAX_PAGES) &#123;</span><br><span class="line">                    Toast.makeText(getActivity(), <span class="string">"waiting to load ……"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="comment">// AsyncTask 只能执行一次，所以需要新建</span></span><br><span class="line">                    mFetchItemsTask = <span class="keyword">new</span> FetchItemsTask();</span><br><span class="line">                    mFetchItemsTask.execute(mNextPage);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                	<span class="comment">// 滑到最底提示已经到头了</span></span><br><span class="line">                    Toast.makeText(getActivity(), <span class="string">"This is the end!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-添加数据并展示"><a href="#5-2-2-添加数据并展示" class="headerlink" title="5.2.2 添加数据并展示"></a>5.2.2 添加数据并展示</h3><p>我在 Adapter 中加入了一个 addData 方法，将新的数据加入到数据集中，然后使用 notifyDataSetChanged 方法更新视图。</p>
<p>然后修改了 setAdapter 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isAdded()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPhotoAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPhotoAdapter = <span class="keyword">new</span> PhotoAdapter(mItems);</span><br><span class="line">            mPhotoRecyclerView.setAdapter(mPhotoAdapter);</span><br><span class="line">            mPhotoRecyclerView.addOnScrollListener(onButtomListener);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPhotoAdapter.addData(mItems);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-动态调整网格列"><a href="#5-3-动态调整网格列" class="headerlink" title="5.3 动态调整网格列"></a>5.3 动态调整网格列</h2><p>使用 OnGlobalLayoutListener 即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mPhotoRecyclerView.getViewTreeObserver()</span><br><span class="line">.addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 计算列数，以 1080p 屏幕显示3列为基准</span></span><br><span class="line">        <span class="keyword">int</span> columns = mPhotoRecyclerView.getWidth() / <span class="number">350</span>;</span><br><span class="line">        <span class="comment">// 重新设置 LayoutManager、Adapter 和 Listener</span></span><br><span class="line">        mPhotoRecyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(getActivity(), columns));</span><br><span class="line">        mPhotoRecyclerView.setAdapter(mPhotoAdapter);</span><br><span class="line">        mPhotoRecyclerView.addOnScrollListener(onButtomListener);</span><br><span class="line">        <span class="comment">// 滚动到之前看到的位置</span></span><br><span class="line">        mPhotoRecyclerView.getLayoutManager().scrollToPosition(mLastPosition);</span><br><span class="line">        <span class="comment">//将 GlobalLayoutListener 去掉以避免多次触发</span></span><br><span class="line">        mPhotoRecyclerView.getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十二）—— 第22章 深入学习 intent 和任务</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2022%20%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%20intent%20%E5%92%8C%E4%BB%BB%E5%8A%A1-20170207.html</url>
    <content><![CDATA[<blockquote>
<p>本章构建了一个最简单的 Launcher 应用，可以让我们深入理解 intent，intent 过滤器以及 Android 应用间的交互，还介绍了进程和任务的联系与区别。<br>GitHub 地址：</p>
<p><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/fd445e40074aa92c9ff87d2881970b13f4556811" target="_blank" rel="noopener">完成第22章,未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/372285397ee0d30fa4e3f5d2787448d0fa29dd95" target="_blank" rel="noopener">完成挑战</a></p>
</blockquote>
<hr>
<a id="more"></a>


<p>我们要构建一个 Launcher 应用，它的大概形式是一个列表，通过点击可以进入相应的应用，这个时候我们需要获取所有的可启动主 activity。</p>
<h1 id="1-解析隐式-intent"><a href="#1-解析隐式-intent" class="headerlink" title="1. 解析隐式 intent"></a>1. 解析隐式 intent</h1><p>可启动的主 activity 都有包含 MAIN 操作和 LAUNCHER 类别的 intent 过滤器，一般在 AndroidManifest.xml 中的形式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".XXXXActivity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以我们要建立一个 intent，然后用 PackageManager 来解析这个 intent，获取所有匹配的 activity。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent startupIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">startupIntent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line"></span><br><span class="line">PackageManager pm = getActivity().getPackageManager();</span><br><span class="line">List&lt;ResolveInfo&gt; activities = pm.queryIntentActivities(startupIntent, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>startActivity(Intent intent) 方法会在 Intent 对象中添加 Intent.CATEGORY_DEFAULT ，而一般的应用主 activity 可能不包含 CATEGORY_DEFAULT 类别，所以并不能用 startActivity 启动。</p>
</blockquote>
<p>接下来要知道这些应用的名字，我们查询到的 ResolveInfo 对象中包含的 activity 标签都是可启动的主 activity， 那么其标签名一般也就是应用名。为了保证列表的美观，我们对这些 activity 的名字按首字母排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(activities, <span class="keyword">new</span> Comparator&lt;ResolveInfo&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ResolveInfo o1, ResolveInfo o2)</span> </span>&#123;</span><br><span class="line">        PackageManager pm = getActivity().getPackageManager();</span><br><span class="line">        <span class="keyword">return</span> String.CASE_INSENSITIVE_ORDER.compare(</span><br><span class="line">                o1.loadLabel(pm).toString(),</span><br><span class="line">                o2.loadLabel(pm).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="2-运行时创建显式-intent"><a href="#2-运行时创建显式-intent" class="headerlink" title="2. 运行时创建显式 intent"></a>2. 运行时创建显式 intent</h1><p>在点击列表中某项的时候，我们要响应并打开，所以在 onClickListener 中添加显式的 intent，打开对应的 activity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    ActivityInfo activityInfo = mResolveInfo.activityInfo;</span><br><span class="line"></span><br><span class="line">    Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN)</span><br><span class="line">            .setClassName(activityInfo.applicationInfo.packageName,</span><br><span class="line">                    activityInfo.name);</span><br><span class="line"></span><br><span class="line">    startActivity(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用了方法 setClassName ，使用包名和类名创建一个 Intent 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setClassName</span><span class="params">(String packageName, String className)</span></span></span><br></pre></td></tr></table></figure>
<p>该方法和一个 Intent 的构造方法 <code>public Intent(Context packageContext, Class&lt;?&gt; cls)</code>结果相同，都是为 Intent 添加了 ComponentName，当然，Intent 本身也有一个 setComponent 的方法。使用 setClassName 能够自动创建 ComponentName，所需要的实现代码相对较少。</p>
<h1 id="3-任务与后退栈"><a href="#3-任务与后退栈" class="headerlink" title="3. 任务与后退栈"></a>3. 任务与后退栈</h1><p>首先给出定义，<strong>任务</strong>：acivity 栈。</p>
<p>栈底部的 activity 通常称为基 activity。用户可以看到栈顶的 activity。用户点击后退键时，栈顶 activity 会弹出栈外。如果当前屏幕上显示的是基 activity，点击后退键，系统会退回主屏幕。默认情况下，新 activity 都在当前任务中启动。在 CriminalIntent 应用中，无论何时启动新 activity，它都会被添加到当前任务中。即使要启动的 activity 不属于本应用，它同样也在当前任务中启动。</p>
<h2 id="3-1-任务间切换"><a href="#3-1-任务间切换" class="headerlink" title="3.1 任务间切换"></a>3.1 任务间切换</h2><p>一般来说，我们使用 overview screen 在任务间切换，或者关闭某项任务。</p>
<blockquote>
<p>overview 的其他叫法还有：任务管理器、最近使用屏、最近应用、最近任务等，启动方法就是点击 Recents 按钮，一般是个方块或者连个重叠的长方形。</p>
</blockquote>
<h2 id="3-2-启动新任务"><a href="#3-2-启动新任务" class="headerlink" title="3.2 启动新任务"></a>3.2 启动新任务</h2><p>因为我们做一个 Launcher 应用，所以要为打开的 activity 新建一个任务。所以需要在建立 intent 的时候添加一个标志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    ActivityInfo activityInfo = mResolveInfo.activityInfo;</span><br><span class="line"></span><br><span class="line">    Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN)</span><br><span class="line">            .setClassName(activityInfo.applicationInfo.packageName,</span><br><span class="line">                    activityInfo.name)</span><br><span class="line">            <span class="comment">// 添加一个 New Task 的标识就能在启动时新建一个任务</span></span><br><span class="line">            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line"></span><br><span class="line">    startActivity(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-将应用作为设备的主界面"><a href="#3-3-将应用作为设备的主界面" class="headerlink" title="3.3 将应用作为设备的主界面"></a>3.3 将应用作为设备的主界面</h2><p>只要在 Manifest 文件中的 <code>&lt;intent-filter&gt;</code>标签中添加值为 HOME 和 DEFAULT 的 category 即可</p>
<h1 id="4-进程"><a href="#4-进程" class="headerlink" title="4 进程"></a>4 进程</h1><h2 id="4-1-进程是什么"><a href="#4-1-进程是什么" class="headerlink" title="4.1 进程是什么"></a>4.1 进程是什么</h2><p>对象需要内存和虚拟机的支持才能存在。进程是操作系统创建的、供应用对象生存以及应用运行的地方。进程通常占用由操作系统管理着的系统资源，如内存、网络端口以及打开的文件等。进程还拥有至少一个(可能多个)执行线程。在 Android 系统中，进程总会有一个运行的虚拟机。</p>
<p>尽管存在未知的异常情况，但总的来说，Android 世界里的每个应用组件都仅与一个进程相关联。应用伴随着自己的进程一起完成创建，该进程同时也是应用中所有组件的默认进程。<br>(虽然组件可以指派给不同的进程，但我们推荐使用默认进程。如果确实需要在不同进程中运行应用组件，通常也可以借助多线程来达到目的。相比多进程的使用，Android 多线程的使用更加简单。) </p>
<p>每一个 activity 实例都仅存在于一个进程和一个任务中。这也是进程与任务的唯一相似之处。任<br> 务只包含 activity，这些 activity 通常可以来自于不同的应用;而进程则包含了应用的全部运行代码和对象。 </p>
<h2 id="4-2-进程和任务的区别"><a href="#4-2-进程和任务的区别" class="headerlink" title="4.2 进程和任务的区别"></a>4.2 进程和任务的区别</h2><p>进程与任务很容易让人混淆，主要原因在于它们不仅在概念上有某种重叠，而且通常都是以其所属应用的名称被人提及的。我们以短信应用和联系人应用为例，看看以下具体场景就会明白了（首先清理掉 overview screen 中的所有任务）。</p>
<ul>
<li><strong>打开短信应用：</strong>这里我们新建了一个任务，也新建了一个短信的进程</li>
<li><strong>点击选择收件人，这会打开联系人应用让我们选择目标联系人：</strong> 我们仍然只有一个短信任务，其中包含了两个应用的 activity，也就是说新建了联系人的进程，这样便有了两个进程</li>
<li><strong>直接切回主界面（而不是后退回去），打开联系人应用：</strong>这样，我们多了一个联系人的任务，并且在联系人进程中新增了一个联系人 activity 的实例。</li>
</ul>
<p>此外，Android 并没有提供方法用来终止任务，不过，我们可以终止进程。应用商店中那些宣称自己是任务终止器的应用，实际上都是进程终止器。</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十一）—— 第21章 XML drawable</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2021%20XML%20drawable-20170204.html</url>
    <content><![CDATA[<blockquote>
<p>本章介绍了常用的 XML drawable，包括 shape，state list 和 layer list。还介绍了 9-patch 图片和 mipmap 目录等知识。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/b037c855ab0f8be47795982ea1b735b4573819d7" target="_blank" rel="noopener">完成第21章</a></p>
</blockquote>
<a id="more"></a>


<h1 id="1-XML-drawable"><a href="#1-XML-drawable" class="headerlink" title="1. XML drawable"></a>1. XML drawable</h1><p>在 Android 世界里，凡是要在屏幕上绘制的东西都可以叫作 drawable，比如抽象图形、 Drawable 类的子类、位图图像等。我们之前用来封装图片的 BitmapDrawable 就是一种 drawable。 本章我们使用的 drawable 都定义在 XML 文件中，可以归为一类，统称为 XML drawable。</p>
<h2 id="1-1-为什么要使用-XML-drawable"><a href="#1-1-为什么要使用-XML-drawable" class="headerlink" title="1.1 为什么要使用 XML drawable"></a>1.1 为什么要使用 XML drawable</h2><p>XML drawable 用起来方便灵活，不仅用法多样，还易于更新维护。搭配使用 shape drawable<br>和 layer list drawable 可以做出复杂的背景图，连图像编辑器都省了。更改应用的配色更是简单，直接修改 XML drawable 中的颜色就行了。<br>另外，XML drawable 独立于屏幕像素密度，它们直接定义在 drawable 目录中，不需要加屏幕密度资源修饰符。如果是普通图像，就需要准备多个版本，以适配不同屏幕像素密度的设备;而 XML drawable 只要定义一次，就能在任何设备的屏幕上表现出色。</p>
<h2 id="1-2-shape-drawable"><a href="#1-2-shape-drawable" class="headerlink" title="1.2 shape drawable"></a>1.2 shape drawable</h2><p>一个常见的圆形 shape drawable 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:color</span>=<span class="string">"@color/red"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">   		<span class="attr">android:width</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">   		<span class="attr">android:color</span>=<span class="string">"@color/dark_red"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该 shape drawable 定义了一个带有暗红色圆环的填充红色的椭圆。</p>
<ul>
<li>shape 标签中 android:shape 属性定义了其形状为椭圆（当然，如果需要是正圆，只需要把控件的高宽设为相等即可），还可以是长方形，线条，梯形等图形;</li>
<li>solid 标签定义填充，其中 android:color 定义其填充颜色（默认透明）</li>
<li>stroke 标签定义边框，属性都类似</li>
<li>还有更多标签和属性，可以在这里找到：<a href="https://developer.android.com/guide/topics/resources/drawable-resource.html#Shape" target="_blank" rel="noopener">shape drawable</a></li>
</ul>
<h2 id="1-3-state-list-drawable"><a href="#1-3-state-list-drawable" class="headerlink" title="1.3 state list drawable"></a>1.3 state list drawable</h2><p>为了在控件的不同状态下切换不同的 drawable， 我们用到了 state list drawable，它会根据按钮的状态改变使用的 drawable，一个例子如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/button_beat_box_pressed"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/button_beat_box_normal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将一个 drawable 资源文件定义为 selector，便是让系统根据状态选择。状态有按下，禁用，聚焦以及激活等状态，可以根据不同的状态使用不同的 drawable。</p>
<p>还有更多标签和属性，可以在这里找到：<a href="https://developer.android.com/guide/topics/resources/drawable-resource.html#StateList" target="_blank" rel="noopener">state list drawable</a></p>
<h2 id="1-4-layer-list-drawable"><a href="#1-4-layer-list-drawable" class="headerlink" title="1.4 layer list drawable"></a>1.4 layer list drawable</h2><p>layer list 可以将多个 drawable 组成一个 drawable 并可以指定其摆放层次和位置，可以组成一些复杂的效果。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:color</span>=<span class="string">"@color/red"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:width</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:color</span>=<span class="string">"@color/dark_red"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个 layer list 将一个矩形叠放在一个椭圆上。还有更多的属性可以查看 <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html#LayerList" target="_blank" rel="noopener">layer list drawable</a></p>
<h1 id="2-9-patch-图像（九宫格图像）"><a href="#2-9-patch-图像（九宫格图像）" class="headerlink" title="2. 9-patch 图像（九宫格图像）"></a>2. 9-patch 图像（九宫格图像）</h1><p>有时候，按钮背景图必须用到普通图片。那么，如果按钮需要以不同尺寸显示，背景图该如何变化呢?如果按钮的宽度大于背景图的宽度，图片会被拉伸。拉伸的图片会有很好的效果吗? 朝一个方向拉伸背景图很可能会让图片失去原样，所以得想个办法控制图片拉伸方式。</p>
<p>9-patch 就是这样一种方式，它将图像分成3×3的网格，即由9 patch 组成的网格。网格角落部分不会被缩放，边缘部分的4个 patch 只按一个维度缩放，而中间部分则按两个维度缩放，如下图：</p>
<img src="/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2021%20XML%20drawable-20170204/9-patch.png" class="" title="9-patch 示意图">

<p>9-patch 图像和普通 PNG 图像十分相似，只有两处不同:9-patch 图像文件名以.9.png 结尾，图像边缘具有1像素宽度的边框。这个边框用以指定9-patch 图像的中间位置。边框像素绘制为黑线， 以表明中间位置，边缘部分则用透明色表示。</p>
<p>在 Android Studio 中，右键单击想要转换为 9-patch 的图像文件选择创建 9-patch 文件，然后双击打开，画上黑边即可。旁边会显示不同方向拉伸后的效果。</p>
<img src="/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2021%20XML%20drawable-20170204/9-patch%E6%95%88%E6%9E%9C%E5%9B%BE.png" class="" title="9-patch 效果图">

<h1 id="3-mipmap-目录"><a href="#3-mipmap-目录" class="headerlink" title="3. mipmap 目录"></a>3. mipmap 目录</h1><p>应用要用到图像，就一般会针对不同的设备尺寸准备不同尺寸的图片，再分别放入 drawable-mdpi 和 drawable-hdpi 这样的文件夹。然后，按名字引用它们。 剩下的就交给 Android 了，它会根据当前设备的屏幕密度调用相应的图片。<br>这样就会存在一个问题：发布出去的 APK 文件包含了项目 drawable 目录里的所有图片，哪怕是从来不会用到的图片，这会让应用体积无意义地增大。为减轻负担，有人想到针对设备定制 APK，比如 mdpi APK 一个，hdpi APK 一个，等等。有关 APK 分包的详细信息，可参阅<a href="https://developer.android.com/studio/build/configure-apk-splits.html" target="_blank" rel="noopener">Build Multiple APKs</a></p>
<p>相反，设置分包以后，有的时候会需要不同分辨率的图标，比如启动器不同，需要的图标清晰度不同，所以，要用到 mipmap 目录。APK 分包时，mipmap 资源会全部包含在 APK 文件中。</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二十）—— 第20章 样式与主题</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2020%20%E6%A0%B7%E5%BC%8F%E4%B8%8E%E4%B8%BB%E9%A2%98-20170131.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了如何使用样式与主题（style and theme），使应用界面统一化标准化。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/7fd01a912f8e1de5314b08988925a044b839064a" target="_blank" rel="noopener">完成第20章</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-样式（Style）"><a href="#1-样式（Style）" class="headerlink" title="1. 样式（Style）"></a>1. 样式（Style）</h1><h2 id="1-1-样式的定义"><a href="#1-1-样式的定义" class="headerlink" title="1.1 样式的定义"></a>1.1 样式的定义</h2><h3 id="样式是一组能应用于视图组件的属性，用于复用相同的-UI-特性"><a href="#样式是一组能应用于视图组件的属性，用于复用相同的-UI-特性" class="headerlink" title="样式是一组能应用于视图组件的属性，用于复用相同的 UI 特性"></a>样式是一组能应用于视图组件的属性，用于复用相同的 UI 特性</h3><p>例如我们在 res/values/style.xml 中定义一个样式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BeatBoxButton"</span>&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@color/dark_blue<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--其中的 color 资源在 colors.xml 中定义--&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么使用这个样式的组件就会自动套用这个属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">	……</span></span><br><span class="line"><span class="tag">	<span class="attr">style</span>=<span class="string">"@style/BeatBoxButton"</span></span></span><br><span class="line">	&lt;!--这样就能自动套用这个背景的颜色--&gt;</span><br><span class="line">	……/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-样式的继承"><a href="#1-2-样式的继承" class="headerlink" title="1.2 样式的继承"></a>1.2 样式的继承</h2><h3 id="样式的继承可以在原有样式的基础上添加和覆盖属性"><a href="#样式的继承可以在原有样式的基础上添加和覆盖属性" class="headerlink" title="样式的继承可以在原有样式的基础上添加和覆盖属性"></a>样式的继承可以在原有样式的基础上添加和覆盖属性</h3><ul>
<li><p><strong>继承方式一</strong>：通过命名表示样式继承关系</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用点连接表示继承关系，只能在包内使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BeatBoxButton.Strong"</span>&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textStyle"</span>&gt;</span>bold<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>继承方式二</strong>：用指定父样式的方法继承</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用 parent 属性表示继承关系，可以跨库使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"StrongBeatBoxButton"</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">parent</span>=<span class="string">"@style/BeatBoxButton"</span>&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textStyle"</span>&gt;</span>bold<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="2-主题（Theme）"><a href="#2-主题（Theme）" class="headerlink" title="2. 主题（Theme）"></a>2. 主题（Theme）</h1><p>样式能让一些属性复用，看上去节省了许多工作，在 styles.xml 公共文件中，可以为所有组件定义一套样式属性共用。然而，如果组件多了，需要逐个为所有组件添加它们要用到的样式，工作量是很大的。</p>
<p>这个时候主题就可以派上用场了。可以把主题看作样式的进化加强版，同样是定义一套公共主题属性，样式属性需要逐个添加，而主题属性则会自动应用于整个应用。主题属性能引用颜色这样的外部资源，也能引用其他样式。使用主题，可以简单地说:“所有按钮都使用这个样式。”再也不用找到每个按钮，告诉它们要用哪个主题了。</p>
<h2 id="2-1-主题属性的更改"><a href="#2-1-主题属性的更改" class="headerlink" title="2.1 主题属性的更改"></a>2.1 主题属性的更改</h2><p>主题作用于某个 activity 或者整个应用，这和主题在 manifest 文件中的声明位置有关，如果在 <code>&lt;application&gt;</code> 标签中声明，则是作用于整个应用，在<code>&lt;activity&gt;</code>标签中声明，则是作用于单个 activity。</p>
<p>在 manifest 文件中我们看到整个应用的主题是<code>android:theme=&quot;@style/AppTheme&quot;</code>，按住 Command（Windows 下是 Ctrl），点击 AppTheme 就可以进入其声明的位置，可以看到以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>AppCompat 库自带三大主题</strong>:</p>
<ul>
<li>Theme.AppCompat——深色主题</li>
<li>Theme.AppCompat.Light——浅色主题</li>
<li>Theme.AppCompat.Light.DarkActionBar——带深色工具栏的浅色主题<br>我们把 AppTheme 的父主题修改为 Theme.AppCompat，以便于修改属性。</li>
</ul>
<h3 id="2-1-1-修改主题颜色"><a href="#2-1-1-修改主题颜色" class="headerlink" title="2.1.1 修改主题颜色"></a>2.1.1 修改主题颜色</h3><p>在空空的主题 style 标签中加入几个属性，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat"</span>&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/red<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/dark_red<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/gray<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>colorPrimary 属性主要用来设置工具栏背景色。由于应用名称是显示在工具栏上的，colorPrimary 也可以称为应用品牌色</li>
<li>colorPrimaryDark 用于屏幕顶部的状态栏。从名字可以看出，它是深色版 colorPrimary。 注意，只有 Lollipop 以后的系统支持状态栏主题色。对于之前的系统，无论指定什么主题色，状态栏都是不变的黑底色。</li>
<li>最后，将 colorAccent 设置为灰色的。这个主题色应该和 colorPrimary 形成反差效果，主要用于给 EditText 这样的组件着色。</li>
</ul>
<h2 id="2-2-主题的抽丝剥茧"><a href="#2-2-主题的抽丝剥茧" class="headerlink" title="2.2 主题的抽丝剥茧"></a>2.2 主题的抽丝剥茧</h2><p>完成了主题配色，我们继续来点深入的，比如可以看看可以覆盖的主题属性都有哪些。在研究诸如有哪些主题属性可用，哪些能覆盖，甚至是有某些属性究竟有什么作用等这样的问题时，几乎没有官方参考文档可以参考，所以要逐级往上查看。</p>
<p>例如，我想找到设置页面背景颜色的属性(随着时间的推移，主题继承关系和层次可能有变，但下面介绍的方法不会变。 想要知道该覆盖哪个属性，就沿着继承树找吧!)：</p>
<h3 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h3><p>也就是 AppTheme 主题，它原本是个 Android Studio 自动生成的空的主题。</p>
<blockquote>
<p>为什么要生成一个空主题，而不在 manifest 中直接使用<code>Theme.AppCompat.Light.DarkActionBar</code>呢？这就是设计模式的事情了，对于应用本身来说，使用的主题不管父主题是谁，引用的都是 AppTheme 这个主题，相当于定义主题的时候留出了一个 AppTheme 的接口。对于协作开发来说，你不用管我内部如何实现也不用操心该怎么引用，只要使用 AppTheme 就够了。</p>
</blockquote>
<p>我们继续往上找。</p>
<h3 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h3><p>进入 <code>Theme.AppCompat</code>，可以看到其也是一个空主题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.AppCompat"</span> <span class="attr">parent</span>=<span class="string">"Base.Theme.AppCompat"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>要进入上一层时，可以看到有好几个候选的父主题，这里我们选择 values-v21 目录下的父主题</p>
<h3 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h3><p>这一层仍然是空主题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Base.Theme.AppCompat"</span> <span class="attr">parent</span>=<span class="string">"Base.V21.Theme.AppCompat"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>那就再往上走</p>
<h3 id="第四层"><a href="#第四层" class="headerlink" title="第四层"></a>第四层</h3><p>终于出现了很多属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Base.V21.Theme.AppCompat"</span> <span class="attr">parent</span>=<span class="string">"Base.V7.Theme.AppCompat"</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是没有我们想要的设置背景的属性，所以要继续往上</p>
<h3 id="第五层"><a href="#第五层" class="headerlink" title="第五层"></a>第五层</h3><p>也定义了很多属性，但是也没有需要的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Base.V7.Theme.AppCompat"</span> <span class="attr">parent</span>=<span class="string">"Platform.AppCompat"</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>继续往上，这里 <code>Platform.AppCompat</code>也有多个版本，我们选择 values-v11 下的父主题</p>
<h3 id="第六层"><a href="#第六层" class="headerlink" title="第六层"></a>第六层</h3><p>空主题，继续往上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Platform.AppCompat"</span> <span class="attr">parent</span>=<span class="string">"Platform.V11.AppCompat"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第七层"><a href="#第七层" class="headerlink" title="第七层"></a>第七层</h3><p>终于看到了我们想要的属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以看到这个主题的 parent 是带有 android 命名空间的，表示其来源于 Android 系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Platform.V11.AppCompat"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Holo"</span>&gt;</span></span><br><span class="line">        ……</span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Window colors --&gt;</span></span></span><br><span class="line">        ……</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>@color/background_material_dark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">        ……</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以，最后我们可以在 AppTheme 中覆盖这个属性，设置背景颜色：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorBackground"</span>&gt;</span>@color/soothing_blue<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-修改按钮颜色"><a href="#2-3-修改按钮颜色" class="headerlink" title="2.3 修改按钮颜色"></a>2.3 修改按钮颜色</h2><p>同样的，我们再往上找，能在 <code>android:Theme.Holo</code> 中找到 buttonStyle 属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"buttonStyle"</span>&gt;</span>@style/Widget.Holo.Button<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，我们的 BeatBoxButton 可以继承 <code>Widget.Holo.Button</code> 这个样式，然后在 AppTheme 中使用 buttonStyle 属性。</p>
<h1 id="3-引用主题属性"><a href="#3-引用主题属性" class="headerlink" title="3. 引用主题属性"></a>3. 引用主题属性</h1><p>在主题中定义好属性后，可以在 XML 或代码中直接使用它们。<br>在 XML 中引用具体值时(如颜色值)，我们使用@符号。比如 @color/gray 指向某个特定资源。<br>在主题中引用资源时，我们使用?符号。<br>比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:id</span>=<span class="string">"@+id/list_item_sound_button"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_height</span>=<span class="string">"120dp"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:background</span>=<span class="string">"?attr/colorAccent"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">tools:text</span>=<span class="string">"Sound name"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="4-挑战练习"><a href="#4-挑战练习" class="headerlink" title="4. 挑战练习"></a>4. 挑战练习</h1><p>新建 values-v21 下的 styles.xml 文件，继承自 Widget.Material.Button 即可</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十九）—— 第19章 使用 SoundPool 播放音频</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2019%20%E4%BD%BF%E7%94%A8SoundPool%E6%92%AD%E6%94%BE%E9%9F%B3%E9%A2%91-20170122.html</url>
    <content><![CDATA[<blockquote>
<p>既然音频资源文件已准备就绪,现在就来学习如何播放这些.wav音频文件。Android的大部分音频API都比较低级,掌握它们不是那么容易。不过没关系,针对BeatBox应用,可以使用SoundPool这个特别定制的实用工具。 SoundPool能加载一批声音资源到内存中,并支持同时播放多个音频文件。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/4d670bf5680b3e2fbdc0a2ce46c5051cfad05fdc" target="_blank" rel="noopener">完成第19章</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-创建-SoundPool"><a href="#1-创建-SoundPool" class="headerlink" title="1. 创建 SoundPool"></a>1. 创建 SoundPool</h1><p>在 Lollipop 中引入了新的方式创建SoundPool:使用SoundPool.Builder。不过,为了兼容API 16 最低级别,只能选择使用SoundPool(int, int, int)这个老构造方法了。一个代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">    mSoundPool = <span class="keyword">new</span> SoundPool.Builder()</span><br><span class="line">            .setMaxStreams(MAX_SOUNDS)</span><br><span class="line">            .setAudioAttributes(<span class="keyword">new</span> AudioAttributes.Builder()</span><br><span class="line">                    .setLegacyStreamType(AudioManager.STREAM_MUSIC)</span><br><span class="line">                    .build())</span><br><span class="line">            .build();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// This old constructor is deprecated, but we need it for</span></span><br><span class="line">    <span class="comment">// compatibility.</span></span><br><span class="line">    mSoundPool = <span class="keyword">new</span> SoundPool(MAX_SOUNDS, AudioManager.STREAM_MUSIC, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于老的 API 来说，</p>
<ul>
<li>第一个参数指定同时播放多少个音频。这里指定了5个。在播放5个音频时,如果尝试再播放 第6个,SoundPool会停止播放原来的音频。</li>
<li>第二个参数确定音频流类型。Android有很多不同的音频流,它们都有各自独立的音量控制 选项。这就是调低音乐音量,闹钟音量却不受影响的原因。打开文档,查看AudioManager类的 <code>AUDIO_*</code>常量,还可以看到其他控制选项。<code>STREAM_MUSIC</code>使用的是同音乐和游戏一样的音量控制。</li>
<li>最后一个参数指定采样率转换品质。参考文档说这个参数不起作用,所以这里传入0值。</li>
</ul>
</blockquote>
<h1 id="2-加载音频文件"><a href="#2-加载音频文件" class="headerlink" title="2. 加载音频文件"></a>2. 加载音频文件</h1><p>对于 SoundPool，加载音频文件时在播放前必须预先加载音频。SoundPool加载的音频文件都有自己的Integer类型ID。所以要在Sound类中添加mSoundId实例变量,并添加相应的Getter 和 Setter 方法管理这些ID。</p>
<p>加载一个声音，我们用的是 SoundPool 的 <code>public int load(AssetFileDescriptor afd, int priority)</code> 方法，这个方法需要一个 AssetFileDescriptor 对象和一个整型的 priority（暂时没用，建议设为1）。</p>
<p>AssetFileDescriptor 对象使用 AssetManager 的 openFd() 方法获取，传入的参数是音频文件的 Asset 路径。</p>
<p>所以整个加载的方法就是这么写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BeatBox.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Sound sound)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    AssetFileDescriptor afd = mAssets.openFd(sound.getAssetPath());</span><br><span class="line">    <span class="keyword">int</span> soundId = mSoundPool.load(afd, <span class="number">1</span>);</span><br><span class="line">    sound.setSoundId(soundId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在添加 Sound 列表的时候，一一加载每个声音。</p>
<h1 id="3-播放音频"><a href="#3-播放音频" class="headerlink" title="3. 播放音频"></a>3. 播放音频</h1><p>添加这样的一个播放方法和释放方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Sound sound)</span> </span>&#123;</span><br><span class="line">    Integer soundId = sound.getSoundId();</span><br><span class="line">    <span class="comment">// Id 设置成 Integer 类就是为了判断 null 较为方便</span></span><br><span class="line">    <span class="keyword">if</span> (soundId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// play 函数的第一个参数是 sound 的 soundId</span></span><br><span class="line">    <span class="comment">// 应该是由 load() 方法返回的 id</span></span><br><span class="line">    <span class="comment">// 第二个是左声道的音量</span></span><br><span class="line">    <span class="comment">// 第三个是右声道的音量</span></span><br><span class="line">    <span class="comment">// 第四个是priority（无效）</span></span><br><span class="line">    <span class="comment">// 第五个是是否循环</span></span><br><span class="line">    <span class="comment">// 第六个是播放速度</span></span><br><span class="line">    mSoundPool.play(soundId, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSoundPool.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在点击 ViewHolder 的时候播放，在 onDestroy 的时候释放即可</p>
<h1 id="4-设备旋转和对象保存"><a href="#4-设备旋转和对象保存" class="headerlink" title="4.设备旋转和对象保存"></a>4.设备旋转和对象保存</h1><p>使用 retainInstance() 即可</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十八）—— 第18章 Assets</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2018%20Assets-20170121.html</url>
    <content><![CDATA[<blockquote>
<p>本章介绍了 assets。assets 是有别于 resources 的另一种资源打包方式，可以被看作随应用打包的微型文件系统，支持任意层次的文件目录结构。因为这个优点，类似游戏这样需要加载大量图片和声音资源的应用通常都会使用它。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/5d4a0a8544ae083af20fa265ee7a79a201865d8d" target="_blank" rel="noopener">完成18章</a></p>
</blockquote>
<p>这章需要用到一个 RecyclerView，其中每个 ViewHolder 对应一个音频文件。如果使用 resources 来管理声音文件，那么 Android 一个一个处理效率将极其低下（毕竟声音是时间敏感的），所以我们使用 Assets 来处理。</p>
<a id="more"></a>


<h1 id="1-导入-Assets"><a href="#1-导入-Assets" class="headerlink" title="1 导入 Assets"></a>1 导入 Assets</h1><p>在模块的根目录下新建 assets 文件（或者右键点击模块的根目录新建），然后建立需要的资源文件夹并放入资源。</p>
<h1 id="2-处理-Assets"><a href="#2-处理-Assets" class="headerlink" title="2 处理 Assets"></a>2 处理 Assets</h1><p>assets 导入后，我们还要能在应用中进行<strong>定位、管理记录以及播放</strong>。这需要新建一个名为 BeatBox 的资源管理类，代码和相应注释如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TAG 变量用于记录日志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BeatBox"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用于存储声音资源文件目录名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SOUNDS_FOLDER = <span class="string">"sample_sounds"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 访问 assets 需要用到 AssetManager 对象</span></span><br><span class="line">    <span class="keyword">private</span> AssetManager mAssets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeatBox</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在初始化的时候获取 assets 的管理对象</span></span><br><span class="line">    <span class="comment">// 不用在意 Context 是哪个，因为</span></span><br><span class="line">    <span class="comment">// 所有的 AssetManager 管理的都是一套 assets 资源</span></span><br><span class="line">        mAssets = context.getAssets();</span><br><span class="line">        loadSounds();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadSounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] soundNames = <span class="keyword">new</span> String[]&#123;&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	<span class="comment">// 获取所有文件的名字</span></span><br><span class="line">            soundNames = mAssets.list(SOUNDS_FOLDER);</span><br><span class="line">            Log.i(TAG, <span class="string">"Found "</span> + soundNames.length + <span class="string">" sounds"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Could not list assets"</span>, ioe);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-使用-Assets"><a href="#3-使用-Assets" class="headerlink" title="3 使用 Assets"></a>3 使用 Assets</h1><p>获取到资源文件名之后，要将其展示给用户，最终还需要播放这些声音文件。所以，我们得创建一个对象，让它管理<strong>资源文件名、用户应该看到的文件名以及其他一些相关信息</strong>。在这里，我们创建了一个叫 Sound 的类用来管理一个声音：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sound</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mAssetPath;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sound</span><span class="params">(String assetPath)</span> </span>&#123;</span><br><span class="line">        mAssetPath = assetPath;</span><br><span class="line">        <span class="comment">// 将文件路径用"/"分割</span></span><br><span class="line">        String[] components = assetPath.split(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">// 取最后一个，即文件名</span></span><br><span class="line">        String filename = components[components.length - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 在知道文件名结尾是 .wav 的情况下，直接将 .wav 替换为空</span></span><br><span class="line">        mName = filename.replace(<span class="string">".wav"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAssetPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAssetPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 BeatBox 类中获取所有的 Sound 对象，这样我们就有了 RecyclerView 的数据集，然后就能够绑定声音和 ViewHolder 了。</p>
<h1 id="4-访问-Assets"><a href="#4-访问-Assets" class="headerlink" title="4 访问 Assets"></a>4 访问 Assets</h1><p>Sound 对象定义了 assets 文件路径。但是尝试使用 File 对象打开资源文件是行不通的;<br>正确的方式是使用 AssetManager:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String assetPath = sound.getAssetPath();</span><br><span class="line">InputStream soundData = mAssets.open(assetPath);</span><br></pre></td></tr></table></figure>
<p>这样才能得到标准的 InputStream 数据流。随后，和 Java 中的其他 InputStream 一样，该怎么用就怎么用。<br>不过，有些 API 可能还会需要 FileDescriptor。(下一章的 SoundPool 类会用到。)这也好办， 如下列代码所示，改调用 AssetManager.openFd(String)方法就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String assetPath = sound.getAssetPath();</span><br><span class="line"><span class="comment">// AssetFileDescriptors are different from FileDescriptors,</span></span><br><span class="line">AssetFileDescriptor assetFd = mAssets.openFd(assetPath);</span><br><span class="line"><span class="comment">// but you get can a regular FileDescriptor easily if you need to.</span></span><br><span class="line">FileDescriptor fd = assetFd.getFileDescriptor();</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十七）—— 第17章 Master-Detail 用户界面</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2017%20Master-Detail%20%E7%95%8C%E9%9D%A2-20170115.html</url>
    <content><![CDATA[<blockquote>
<p>本章介绍了如何写一个双版面 fragment 的布局，并对符合要求的设备进行适配，还介绍了回调接口的使用。<br>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/6b11d46262c10d7a6a143e2e2be225bc99851852" target="_blank" rel="noopener">完成17章</a></p>
</blockquote>
<p>对平板设备来说，使用主从用户界面将会得到更好的体验，在这章我们将对其使用，传递数据的方式进行探究。</p>
<a id="more"></a>

<h1 id="1-增加布局灵活性"><a href="#1-增加布局灵活性" class="headerlink" title="1. 增加布局灵活性"></a>1. 增加布局灵活性</h1><p>要实现双版面的布局，需要完成如下任务：</p>
<ol>
<li>修改 SingleFragmentActivity，使其不再硬编码实例化布局</li>
<li>创建包含两个 fragment 容器的布局</li>
<li>修改 CrimeListActivity，实现在手机设备上实例化单版面布局，在平板设备上实例化双版面布局</li>
</ol>
<h2 id="1-1-修改抽象类-SingleFragmentActivity"><a href="#1-1-修改抽象类-SingleFragmentActivity" class="headerlink" title="1.1 修改抽象类 SingleFragmentActivity"></a>1.1 修改抽象类 SingleFragmentActivity</h2><p>在其中加入一个 protected 方法，返回 activity 需要的 ResId，这样对于继承 SingleFragmentActivity 的 activity 可以重写该函数以返回自己需要的 ResId。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LayoutRes</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getLayoutResId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> R.layout.activity_fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-使用别名资源"><a href="#1-2-使用别名资源" class="headerlink" title="1.2 使用别名资源"></a>1.2 使用别名资源</h2><p>我们想让最小屏幕宽度 600dp 的设备使用双版面界面，其他的使用单版面界面，那么对于不同的设备，使用的布局就不同。要让不同的设备使用不同的布局资源，有两种方法：</p>
<ol>
<li><p>让 res/layout/目录中的文件使用资源修饰符。如果想使用<code>activity_masterdetail.xml</code>布局文件， 就需要将<code>activity_fragment.xml</code>的内容复制到<code>res/layout/activity_masterdetail.xml</code>中，将<code>activity_twopane.xml</code>的内容复制到<code>res/layout-sw600dp/activity_masterdetail.xml</code>中。这样做最明显的缺点就是数据冗余，因为每个布局文件都要复制一份。</p>
</li>
<li><p>使用别名资源。别名资源是一种指向其他资源的特殊资源。它存放在 res/values/目录下，并按照约定定义在 refs.xml 文件中。比如在默认的 values 文件夹下面新建一个 refs.xml，然后写入代码：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"activity_masterdetail"</span> <span class="attr">type</span>=<span class="string">"layout"</span>&gt;</span>@layout/activity_fragment<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 再新建一个最小宽度600dp 的 refs.xml(即在 values-sw600dp 目录下)，写入双版面的 layout 资源：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"activity_masterdetail"</span> <span class="attr">type</span>=<span class="string">"layout"</span>&gt;</span>@layout/activity_twopane<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 这样，在 CrimeListActivity 中只要引用 <code>R.layout.activity_masterdetail</code> 即可</p>
</li>
</ol>
<h1 id="2-Activity：Fragment-的托管者"><a href="#2-Activity：Fragment-的托管者" class="headerlink" title="2. Activity：Fragment 的托管者"></a>2. Activity：Fragment 的托管者</h1><p>为了保证 fragment 的独立性，即不需要了解其托管者的工作，但要想在 fragment 生命周期没有结束的时候传递数据出去，就要使用回调接口。</p>
<blockquote>
<p>回调就相当于一个委托，首先 fragment 自己定义回调的接口，托管的 acitivity 来实现这个接口，接着 fragment 需要持有实现了自己定义接口的对象，以便自己可以实时调用。</p>
<p>对于一个回调接口而言，fragment 只要求实现这个接口的类在函数里要做的是什么，却不知道实现类到底会做什么，每个实现类有自己的方法来实现。</p>
</blockquote>
<h1 id="2-1-CrimeListFragment-的回调接口"><a href="#2-1-CrimeListFragment-的回调接口" class="headerlink" title="2.1 CrimeListFragment 的回调接口"></a>2.1 CrimeListFragment 的回调接口</h1><p>对于 CrimeListFragment，其所能响应的就是点击列表中的某一项，那么它的回调接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callbacks</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onCrimeSelected</span><span class="params">(Crime crime)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后应该在需要托管的 Activity 中实现该接口，在这里是 CrimeListActivity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 implement 以节约版面</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCrimeSelected</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 如果发现布局里没有包含详情 fragment 容器的 id，</span></span><br><span class="line">	<span class="comment">// 就启动单独的 activity 用于显示详情</span></span><br><span class="line">    <span class="keyword">if</span> (findViewById(R.id.detail_fragment_container) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Intent intent = CrimePagerActivity.newIntent(<span class="keyword">this</span>, crime.getId());</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则就将 detail 页面放到 fragment 容器中</span></span><br><span class="line">        Fragment newDetail = CrimeFragment.newInstance(crime.getId());</span><br><span class="line"></span><br><span class="line">        getSupportFragmentManager().beginTransaction()</span><br><span class="line">                .replace(R.id.detail_fragment_container, newDetail)</span><br><span class="line">                .commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 CrimeListFragment 中持有实现接口的 activity 的引用，然后在生命周期末去除引用以便内存的回收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeListFragment</span></span><br><span class="line"><span class="keyword">private</span> Callbacks mCallbacks;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    mCallbacks = (Callbacks) context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间的函数……</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDetach();</span><br><span class="line">    mCallbacks = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后修改 onClick 事件，调用 mCallbacks.onCrimeSelected(Crime crime) 即可。这样以后，在双版面视图中点击列表中的某一项，在详情版面中就会显示相应的信息。</p>
<p>但是有一个问题，那就是在详情页（CrimeFragment）更改信息，在列表页没有任何响应，因为 CrimeListFragment 不会暂停，所以也就不会刷新，所以下一步要在 CrimeFragment 中定义回调接口， 让托管 activity 去更新 CrimeListFragment。</p>
<h2 id="2-2-CrimeFragment-的回调接口"><a href="#2-2-CrimeFragment-的回调接口" class="headerlink" title="2.2 CrimeFragment 的回调接口"></a>2.2 CrimeFragment 的回调接口</h2><p>首先定义回调接口，这里想让托管者做的就是在 Crime 详情进行更新时更新列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment</span></span><br><span class="line"><span class="keyword">private</span> Callbacks mCallbacks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callbacks</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onCrimeUpdated</span><span class="params">(Crime crime)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    mCallbacks = (Callbacks) context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间的函数……</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDetach();</span><br><span class="line">    mCallbacks = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 CrimeListActivity 中实现该接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCrimeUpdated</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">    CrimeListFragment listFragment = (CrimeListFragment)</span><br><span class="line">            getSupportFragmentManager()</span><br><span class="line">                    .findFragmentById(R.id.fragment_container);</span><br><span class="line">    listFragment.updateUI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于只要托管 CrimeFragment 的 activity 都应该实现其回调接口，所以在 CrimePagerActivity 中提供一个空的接口实现</p>
<p>之后在每次数据发生更改时都调用 <code>mCallbacks.onCrimeUpdated(mCrime);</code>即可。书上将更新模型层也放到了一起。</p>
<h1 id="3-挑战的后遗症：删除-Crime"><a href="#3-挑战的后遗症：删除-Crime" class="headerlink" title="3. 挑战的后遗症：删除 Crime"></a>3. 挑战的后遗症：删除 Crime</h1><p>还记得我们在 ToolBar 那一章加入的挑战吗，就是删除一个 Crime，对于 CriminalIntent 这个应用来说，双版面和单版面的删除操作应该有着不同的结果，但这些行为在书上没有定义，所以我们再自己想一种解决方案，以便确立如何写接下来的补充程序。</p>
<ol>
<li>双版面的界面下，点击删除应该要让左边的列表中去掉删除的那一项，并且详情页也要改为已存在的某一项的详情，为了方便实现，我们在这里改为已存在的第一项。如果只有最后一项并且点击了删除，那么右边应该要变成空白。</li>
<li>单版面的界面下，点击删除就直接删去该条记录，然后结束 activity。</li>
</ol>
<p>在这里我在 CrimeFragment 的 Callbacks 接口中加入了 onCrimeDelete(Crime crime) 方法与 onCrimeAllDeleted(Crime crime) 方法，在 CrimeListActivity 中实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCrimeDeleted</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 如果只是删除了一个，而还有其他的 Crime 的话，</span></span><br><span class="line">	<span class="comment">// 就相当于选中一个 Crime，这里传过来的应该是第一个 Crime</span></span><br><span class="line">    onCrimeSelected(crime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCrimeAllDeleted</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 如果全部删除，就直接将该 fragment 移去</span></span><br><span class="line">    CrimeFragment fragment = (CrimeFragment)</span><br><span class="line">            getSupportFragmentManager()</span><br><span class="line">                    .findFragmentById(R.id.detail_fragment_container);</span><br><span class="line">    <span class="keyword">if</span> (fragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">        getSupportFragmentManager()</span><br><span class="line">                .beginTransaction()</span><br><span class="line">                .remove(fragment)</span><br><span class="line">                .commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 并且更新列表页</span></span><br><span class="line">    onCrimeUpdated(crime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 CrimePagerActivity 中也要实现这两个方法，但是对于这个 activity 来说只要进行 finish() 即可。</p>
<p>在删除按钮的选中监听中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CrimeLab.get(getActivity()).deleteCrime(mCrime);</span><br><span class="line"><span class="keyword">if</span> (CrimeLab.get(getActivity()).getCrimes().isEmpty()) &#123;</span><br><span class="line">    mCallbacks.onCrimeAllDeleted(mCrime);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mCrime = CrimeLab.get(getActivity()).getCrimes().get(<span class="number">0</span>);</span><br><span class="line">    mCallbacks.onCrimeDeleted(mCrime); <span class="comment">// 这里相当于选中第一个</span></span><br><span class="line">    updateCrime(); <span class="comment">// 这里面升级了数据层并且更新了列表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>

<p>整个程序就此完成啦~</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十六）—— 第16章 使用 intent 拍照</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2016%20%E4%BD%BF%E7%94%A8%20intent%20%E6%8B%8D%E7%85%A7-20170112.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了如何使用 intent 拍照，存储照片和展示照片</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/a3abc7009d2c225159c71e6d71e351eb6284bdfb" target="_blank" rel="noopener">完成16章，未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/acaa89b7be9f3b7f481a5e4c190bfaf224c3e3ee" target="_blank" rel="noopener">完成16章挑战1</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/2462577c3c4b4acb614b6e01a69124d235028cef" target="_blank" rel="noopener">完成16章挑战2</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-外部存储"><a href="#1-外部存储" class="headerlink" title="1. 外部存储"></a>1. 外部存储</h1><p>相机照片动辄几 MB 大小，直接保存在数据库中肯定不现实。很自然，大家会想到直接使用设备的文件系统。<br>一般来讲，应用都应该使用私有存储空间保存各类文件。还记得吗?在前面章节中，我们在私有存储空间保存过 SQLite 数据文件。使用类似 Context.getFileStreamPath(String)和 Context.getFilesDir()这样的方法，我们也可以实现这样的存储目标，下表所示：</p>
<table>
<thead>
<tr>
<th align="left">Context 类提供的方法</th>
<th align="left">使用目的</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>File getFilesDir()</code></td>
<td align="left">获取/data/data/<packagename>/files 目录</td>
</tr>
<tr>
<td align="left"><code>FileInputStream openFileInput(String name)</code></td>
<td align="left">打开现有文件进行读取</td>
</tr>
<tr>
<td align="left"><code>FileOutputStream openFileOutput(String name, int mode)</code></td>
<td align="left">打开文件进行写入，如不存在就创建它</td>
</tr>
<tr>
<td align="left"><code>File getDir(String name, int mode)</code></td>
<td align="left">获取/data/data/<packagename>/目录的子目录(如不存在就先创建它)</td>
</tr>
<tr>
<td align="left"><code>String[] fileList()</code></td>
<td align="left">获取/data/data/<packagename>/files 目录下的文件列表。可与其他方法配合使用，例如 openFileInput(String)</td>
</tr>
<tr>
<td align="left"><code>File getCacheDir()</code></td>
<td align="left">获取/data/data/<packagename>/cache 目录。应注意及时清理该目录，并节约使用空间</td>
</tr>
</tbody></table>
<p>如果想存储的文件仅供应用内部使用，使用上表中的各类方法就可以了。而如果想共享文件给其他应用或是接收其他应用的文件(如相机应用拍摄的照片)时，路只有一条:使用外部存储保存文件。<br>外部存储有两类:主外部存储和其他各类存储介质。所有的 Android 设备至少应有一个主外部存储地。使用<code>Environment.getExternalStorageDirectory()</code>可以返回这个外部存储目录。 以前，这个存储地通常是指 SD 卡，但现在都已基本整合至了设备内部。即使现在还有设备使用扩展外部存储，也应算作其他各类存储介质这一类了。<br>Context 也提供了一些访问外部存储空间要用到的方法，如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">使用目的</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>File getExternalCacheDir()</code></td>
<td align="left">获取主外部存储上的缓存文件目录。用法类似 getCacheDir()方法，但要注意，Android 一般不会自动清理该目录</td>
</tr>
<tr>
<td align="left"><code>File[] getExternalCacheDirs()</code></td>
<td align="left">获取多个外部存储上的缓存文件目录</td>
</tr>
<tr>
<td align="left"><code>File getExternalFilesDir(String)</code></td>
<td align="left">获取主外部存储上存放常规文件的文件目录。通过 String 参数，可访问特定内容类型的子目录。内容类型常量以 DIRECTORY_为前缀，定义在 Environment 中 。 例如 , 用于 图像 文件 的 Environment.DIRECTORY_ PICTURES</td>
</tr>
<tr>
<td align="left"><code>File[] getExternalFilesDirs(String)</code></td>
<td align="left">类似 getExternalFilesDir(String)方法，但该方法可获取指定类型的所有文件目录</td>
</tr>
<tr>
<td align="left"><code>File[] getExternalMediaDirs()</code></td>
<td align="left">获取 Android 存储图片、视频和音乐文件的所有外部文件目录。和 getExternalFilesDir(Environment.DIRECTORY_PICTURES) 方法 区别 在于，调用该方法，多媒体扫描器会自动扫描目标目录，并将存放的多媒体文件暴露给能够播放音乐、浏览视频和图片的应用。也就是说， getExternalMediaDirs()方法返回目录中存放的任何文件都会自动出现在多媒体应用中</td>
</tr>
</tbody></table>
<h2 id="1-1-指定照片存放位置"><a href="#1-1-指定照片存放位置" class="headerlink" title="1.1 指定照片存放位置"></a>1.1 指定照片存放位置</h2><p>首先，一张照片的文件名我们用一个 Crime 的 ID 来标识，所以在 Crime.java 中加入了获取文件名的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPhotoFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"IMG_"</span> + getId().toString() + <span class="string">".jpg"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 CrimeLab.java 中加入获取路径文件的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getPhotoFile</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">    File externalFilesDir = mContext</span><br><span class="line">            .getExternalFilesDir(Environment.DIRECTORY_PICTURES);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (externalFilesDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(externalFilesDir, crime.getPhotoFileName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-外部存储使用权限"><a href="#1-2-外部存储使用权限" class="headerlink" title="1.2 外部存储使用权限"></a>1.2 外部存储使用权限</h2><p>读写外部存储需要获得权限，一般在<code>AndroidManifest.xml</code>中使用<code>&lt;uses-permission&gt;</code>标签来使用。而对于 API 19（Android 4.4）及以后的新版系统来说，应用不需要再申请 <code>Context.getExternalFilesDir(String)</code> 所需要的权限了，所以这个权限申请是这么写的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxSdkVersion</span>=<span class="string">"18"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-使用相机-intent"><a href="#2-使用相机-intent" class="headerlink" title="2. 使用相机 intent"></a>2. 使用相机 intent</h1><p>实现拍照功能只需要使用一个隐式 intent，分为下面几步：</p>
<ul>
<li>获取保存图片的文件存储位置</li>
<li>处理拍照按钮，实现触发拍照，其实就是发送一个带有 <code>MediaStore.ACTION_IMAGE_CAPTURE</code>的 intent 即可。</li>
</ul>
<p>对于 intent 的操作，我们需要定义在 MediaStore 类中的<code>ACTION_CAPTURE_IMAGE</code>。MediaStore 类定义了一些公共接口，可用于处理图像、视频以及音乐这些常见的多媒体任务。当然，这也包括触发相机应用的拍照 intent。</p>
<p>如果只用<code>ACTION_IMAGE_CAPTURE</code>打开相机应用，默认只能拍摄缩略图这样的低分辨率照片，而且照片会保存在 onActivityResult(…)返回的 Intent 对象里。要想获得全尺寸照片，就要让它使用文件系统存储照片。这可以通过传入保存在 <code>MediaStore.EXTRA_OUTPUT</code> 中的指向存储路径的 Uri 来完成。<br>  编写用于拍照的隐式 intent，拍摄的照片应该保存在 mPhotoFile 指定的地方。同时，别忘了检查设备上是否安装有相机应用，以及是否有地方存储照片。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mPhotoButton = (ImageButton) v.findViewById(R.id.crime_camera);</span><br><span class="line"><span class="comment">// 首先创建一个用于拍照的 Intent 对象</span></span><br><span class="line"><span class="keyword">final</span> Intent captureImage = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line"><span class="comment">// 检查是否有可拍照的应用</span></span><br><span class="line"><span class="keyword">boolean</span> canTakePhoto = mPhotoFile != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        captureImage.resolveActivity(packageManager) != <span class="keyword">null</span>;</span><br><span class="line">mPhotoButton.setEnabled(canTakePhoto);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canTakePhoto) &#123;</span><br><span class="line">	<span class="comment">// 建立访问照片目录的 Uri</span></span><br><span class="line">    Uri uri = Uri.fromFile(mPhotoFile);</span><br><span class="line">    <span class="comment">// 将该 Uri 放入 intent 对象中</span></span><br><span class="line">    captureImage.putExtra(MediaStore.EXTRA_OUTPUT, uri);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mPhotoButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 使用 startActivityForResult 是为了拍完照后刷新视图</span></span><br><span class="line">        startActivityForResult(captureImage, REQUEST_PHOTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="3-缩放和显示位图"><a href="#3-缩放和显示位图" class="headerlink" title="3. 缩放和显示位图"></a>3. 缩放和显示位图</h1><p>有了照片，接下来就是找到并加载它，然后展示给用户看。在技术实现上，这需要加载照片到大小合适的 Bitmap 对象中。而要从文件生成 Bitmap 对象，我们需要 BitmapFactory 类:<br>    <code>Bitmap bitmap = BitmapFactory.decodeFile(mPhotoFile.getPath());</code></p>
<p>Bitmap 是个简单对象，它只存储实际像素数据。也就是说，即使原始照片已压缩过，但存入 Bitmap 对象时，文件并不会同样压缩。因此，如果有一个16万像素24位已压缩为5Mb 大小的 JPG 照片文件，一旦载入 Bitmap 对象，就会立即膨胀至48Mb 大小!<br>这个问题可以设法解决，但需要手工缩放位图照片。具体做法就是，首先确认文件到底有多大，然后考虑按照给定区域大小合理缩放文件。最后，重新读取缩放后的文件，创建 Bitmap 对象。<br>既然需要处理图像文件，我们建立一个通用的工具类，名为 PictureUtils.java。在其中添加 getScaledBitmap(String, int, int)缩放方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PictureUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getScaledBitmap</span><span class="params">(String path, <span class="keyword">int</span> destWidth, <span class="keyword">int</span> destHeight)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the dimensions of the image on disk</span></span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">        BitmapFactory.decodeFile(path, options);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> srcWidth = options.outWidth;</span><br><span class="line">        <span class="keyword">float</span> srcHeight = options.outHeight;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Figure out how much to scale down by</span></span><br><span class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (srcHeight &gt; destHeight || srcWidth &gt; destWidth) &#123;</span><br><span class="line">            <span class="keyword">if</span> (srcWidth &gt; srcHeight) &#123;</span><br><span class="line">                inSampleSize = Math.round(srcHeight / destHeight);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                inSampleSize = Math.round(srcWidth / destWidth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = inSampleSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in and create final bitmap</span></span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(path, options);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述方法中，inSampleSize 值很关键。它决定着缩略图像素的大小。假设这个值是1的话，就表明缩略图和原始照片的水平像素大小一样。如果是2的话，它们的水平像素比就是1∶2。因此，inSampleSize 值为2时，缩略图的像素数就是原始文件的四分之一。<br>问题总是接踵而来。解决了缩放问题，又冒出了新问题:fragment 刚启动时，PhotoView 究竟有多大无人知道。onCreate(…)、onStart()和 onResume()方法启动后，才会有首个实例化布局出现。也就在此时，显示在屏幕上的视图才会有大小尺寸。这也是出现新问题的原因。<br>解决方案有两个:要么等布局实例化完成并显示，要么干脆使用保守估算值。特定条件下， 尽管估算比较主观，但确实是一个切实可行的办法。再添加一个 getScaledBitmap(String, Activity)静态 Bitmap 估算方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getScaledBitmap</span><span class="params">(String path, Activity activity)</span> </span>&#123;</span><br><span class="line">    Point size = <span class="keyword">new</span> Point();</span><br><span class="line">    activity.getWindowManager().getDefaultDisplay()</span><br><span class="line">            .getSize(size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getScaledBitmap(path, size.x, size.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-功能声明"><a href="#4-功能声明" class="headerlink" title="4. 功能声明"></a>4. 功能声明</h1><p>应用的拍照功能用起来不错，但还有件事情要做:告诉目标用户应用具有拍照功能。</p>
<p>假如应用要用到诸如相机、NFC，或者任何其他的随设备走的功能时，都应该要让 Android 系统知道。否则，假如设备缺少这样的功能，类似 Google Play 商店的安装程序就会拒绝安装应用。<br>为声明需要使用相机，在 AndroidManifest.xml 中加入<code>&lt;uses-feature&gt;</code>标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"android.hardware.camera2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:required</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="5-布局文件中的-lt-include-gt-标签"><a href="#5-布局文件中的-lt-include-gt-标签" class="headerlink" title="5. 布局文件中的 &lt;include&gt; 标签"></a>5. 布局文件中的 <code>&lt;include&gt;</code> 标签</h1><p>如果有重复的布局可以使用，那么可以采用 include 标签，直接在不同的 layout 中引用。<br>然而，经验表明，布局文件的优点是可靠又好用。例如，直接查看布局文件内容，就可以快速准确地知道应用视图是如何构建的。然而，一旦用了 include 标签，一切就不好说了。还想明白视图构成的话，就得仔细翻看布局主文件以及所有 include 的布局文件。这种非直观的感觉，极易让人失去耐心。<br>用户界面是应用改动相对频繁的部分。既然这样，不顾一切地追求复用原则很可能会适得其反。因此，在视图层开发时，我们一定要多多考量，尽量做到审慎、合理地使用 include 标签。</p>
<h1 id="6-挑战练习"><a href="#6-挑战练习" class="headerlink" title="6. 挑战练习"></a>6. 挑战练习</h1><h2 id="6-1-优化照片显示"><a href="#6-1-优化照片显示" class="headerlink" title="6.1 优化照片显示"></a>6.1 优化照片显示</h2><p>新建一个 GlancePictureFragment，继承自 DialogFragment，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlancePictureFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PATH = <span class="string">"path"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView mImage;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 由于文件比较大，所以将文件路径传入即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlancePictureFragment <span class="title">newInstance</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putString(ARG_PATH, path);</span><br><span class="line">        GlancePictureFragment fragment = <span class="keyword">new</span> GlancePictureFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 使用 getArguments() 方法取出照片文件路径</span></span><br><span class="line">        String path = getArguments().getString(ARG_PATH);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 这个新的 style 其实就做了一件事，那就是使窗口全屏</span></span><br><span class="line">		<span class="comment">// 注意如果继承了 @android:Theme.Dialog 的话，窗口</span></span><br><span class="line">		<span class="comment">// 大小就限定了，所以我没有继承</span></span><br><span class="line">        <span class="keyword">final</span> Dialog dialog = <span class="keyword">new</span> Dialog(getActivity(), R.style.CustomDialogTheme);</span><br><span class="line">        <span class="comment">// 这个 layout 中只有一个 ImageView</span></span><br><span class="line">        dialog.setContentView(R.layout.dialog_image_glance);</span><br><span class="line"></span><br><span class="line">        mImage = (ImageView) dialog.findViewById(R.id.glance_image);</span><br><span class="line">        <span class="comment">// 仍然使用 PictureUtils 类的工具来获得缩放的 Bitmap</span></span><br><span class="line">        mImage.setImageBitmap(</span><br><span class="line">                PictureUtils.getScaledBitmap(path, getActivity()));</span><br><span class="line">        mImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 点击图片则退出该 dialog</span></span><br><span class="line">                dialog.dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在图片的点击事件中声明即可</p>
<h2 id="6-2-优化缩略图加载"><a href="#6-2-优化缩略图加载" class="headerlink" title="6.2 优化缩略图加载"></a>6.2 优化缩略图加载</h2><p>首先修改更新视图的函数，接受高宽的指定像素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updatePhotoView</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mPhotoFile == <span class="keyword">null</span> || !mPhotoFile.exists()) &#123;</span><br><span class="line">        mPhotoView.setImageDrawable(<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Bitmap bitmap = PictureUtils.getScaledBitmap(</span><br><span class="line">                mPhotoFile.getPath(), width, height);</span><br><span class="line">        mPhotoView.setImageBitmap(bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后，先获取 mPhotoView 的 ViewTreeObserver，然后设置 OnGlobalLayoutListener 监听器，在监听器中即可获取视图的高度和宽度，然后进行图片显示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mPhotoObserver = mPhotoView.getViewTreeObserver();</span><br><span class="line">mPhotoObserver.addOnGlobalLayoutListener(</span><br><span class="line">        <span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        updatePhotoView(</span><br><span class="line">                mPhotoView.getWidth(),</span><br><span class="line">                mPhotoView.getHeight());</span><br><span class="line">        Log.i(<span class="string">"CrimeFragment"</span>, <span class="string">"onGlobalLayout: Observed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十五）—— 第15章 隐式 Intent</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2015%20%E9%9A%90%E5%BC%8F%20intent-20170111.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要介绍了如何使用隐式 Intent 启动其他应用的 Activity，以及从用隐式 Intent 的方法启动的应用中获取数据</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/346d4aeceb125c5e52164af14afe023ecd713108" target="_blank" rel="noopener">完成15章但未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/c6641fc4fa5075bcc1d34d8c4a64f9d32f3ccd56" target="_blank" rel="noopener">完成15章挑战1</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/e24f4c1b65bd36a475b038cf051c3c5033c7a967" target="_blank" rel="noopener">完成15章挑战2</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-使用格式化字符串"><a href="#1-使用格式化字符串" class="headerlink" title="1. 使用格式化字符串"></a>1. 使用格式化字符串</h1><p>在<code>string.xml</code>中定义字符串时，我们可以先用占位符代替一些内容，然后在引用的时候用相应的字符串代替占位符，得到所需要的字符串。<br>比如一个定义好的字符串：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_name"</span>&gt;</span>我的名字叫%1$s，我有%2$d个苹果<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引用时可以这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = getResources()</span><br><span class="line">	.getString(R.string.string_name, <span class="string">"王大宝"</span>, <span class="number">512</span>);</span><br><span class="line"><span class="comment">// 结果应该是 s == "我的名字叫王大宝，我有512个苹果"</span></span><br></pre></td></tr></table></figure>
<p>这种字符串资源用作模板再方便不过了。</p>
<h1 id="2-使用隐式-intent"><a href="#2-使用隐式-intent" class="headerlink" title="2. 使用隐式 intent"></a>2. 使用隐式 intent</h1><p>Intent 对象用来向操作系统说明需要处理的任务。使用显式 intent，我们需指定要操作系统 启动哪个 activity。而使用隐式 intent，只需告诉操作系统我们想要做什么，操作系统就会去启动能够胜任工作任务的 activity。如果找到多个符合的 activity，用户会看到一个可选应用列表，然后就看用户如何选择了。</p>
<h2 id="2-1-隐式-intent-的组成"><a href="#2-1-隐式-intent-的组成" class="headerlink" title="2.1 隐式 intent 的组成"></a>2.1 隐式 intent 的组成</h2><p>下面是一个隐式 intent 的主要组成部分：</p>
<ol>
<li><strong>要执行的操作</strong>。通常以 Intent 类中的常量来表示。例如，要访问查看某个 URL，可以使用 Intent.ACTION_VIEW;要发送邮件，可以使用 Intent.ACTION_SEND。</li>
<li><strong>要访问数据的位置</strong>。这可能是设备以外的资源，如某个网页的 URL，也可能是指向某个文件的 URI，或者是指向 ContentProvider 中某条记录的某个内容 URI(content URI)。</li>
<li><strong>操作涉及的数据类型</strong>。 这指的是 MIME 形式的数据类型，如<code>text/html</code>或<code>audio/mpeg3</code>。如果一个 intent 包含数据位置，那么通常可以从中推测出数据的类型。 </li>
<li><strong>可选类别</strong>。如果操作用于描述具体要做什么，那么类别通常用来描述我们是何时、何地或者如何使用某 个 activity 的。例如，Android 的<code>android.intent.category.LAUNCHER</code>类别表明，activity 应该显示在顶级应用启动器中;而<code>android.intent.category.INFO</code>类别表明，虽然 activity 向用户显示了包信息，但它不应该显示在启动器中。</li>
</ol>
<p>和显式 intent 一样，隐式 intent 也可以包含 extra 信息。不过，操作系统在寻找适用的 activity 时， 不会使用附加在隐式 intent 上的任何 extra。<br>注意，显式 intent 也可以使用隐式 intent 的操作和数据部分。这相当于要求特定 activity 去处理特定任务。</p>
<h2 id="2-1-发送消息"><a href="#2-1-发送消息" class="headerlink" title="2.1 发送消息"></a>2.1 发送消息</h2><p>如果我们要发送一段文字消息，应该创建一个用于发送文字消息的 intent：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先指定动作为 Intent.ACTION_SEND</span></span><br><span class="line">Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line"><span class="comment">// 设置文字类别，这里是纯文本</span></span><br><span class="line">i.setType(<span class="string">"text/plain"</span>);</span><br><span class="line"><span class="comment">// 设置文字内容</span></span><br><span class="line">i.putExtra(Intent.EXTRA_TEXT, getCrimeReport());</span><br><span class="line"><span class="comment">// 设置主题内容</span></span><br><span class="line">i.putExtra(Intent.EXTRA_SUBJECT,</span><br><span class="line">        getString(R.string.crime_report_subject));</span><br><span class="line"><span class="comment">// 每一次都会弹出选择发送的应用弹框</span></span><br><span class="line">i = Intent.createChooser(i, getString(R.string.send_report));</span><br><span class="line">startActivity(i);</span><br></pre></td></tr></table></figure>

<p>没错，使用一个隐式的 intent 就是这么简单，对于不同的需求，查询文档，使用相应的方法调用隐式 intent 就可以啦。</p>
<h2 id="2-2-获取联系人信息"><a href="#2-2-获取联系人信息" class="headerlink" title="2.2 获取联系人信息"></a>2.2 获取联系人信息</h2><p>现在，创建另一个隐式 intent，实现让用户从联系人应用里选择嫌疑人。新建的隐式 intent 将 由操作以及数据获取位置组成。</p>
<ul>
<li>操作为<code>Intent.ACTION_PICK</code>。</li>
<li>联系人数据获取位置为 <code>ContactsContract.Contacts.CONTENT_URI</code>。</li>
</ul>
<p>简而言之，就是请 Android 帮忙从联系人数据库里获取某个具体联系人。<br>因为要获取启动 activity 的返回结果，我们调用 startActivityForResult(…)方法并传 入 intent 和 RequestCode。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CONTACT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">Intent pickContact = <span class="keyword">new</span> Intent(Intent.ACTION_PICK, </span><br><span class="line">	ContactsContract.Contacts.CONTENT_URI);</span><br><span class="line">startActivityForResult(pickContact, REQUEST_CONTACT);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-1-从联系人列表中获取联系人数据"><a href="#2-2-1-从联系人列表中获取联系人数据" class="headerlink" title="2.2.1 从联系人列表中获取联系人数据"></a>2.2.1 从联系人列表中获取联系人数据</h3><p>现在，我们需要从联系人应用中获取返回结果。很多应用都会共享联系人信息，因此 Android 提供了一个深度定制的 API 用于处理联系人信息，这主要是通过 ContentProvider 类来实现的。 该类的实例封装了联系人数据库并提供给其他应用使用。</p>
<p>我们可以通过一个 ContentResolver 访问 ContentProvider。<br>前面，我们以 ACTION_PICK 启动了 activity 并要求返回结果，因此调用 onActivityResult (…)方法会接收到一个 intent。该 intent 包括了数据 URI。这个 URI 是个数据定位符，指向用户所选联系人。<p id="inline_code"></p></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resultCode != Activity.RESULT_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_CONTACT &amp;&amp; data != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Uri contactUri = data.getData();</span><br><span class="line">        <span class="comment">// Specify which fields you want your query to return</span></span><br><span class="line">        <span class="comment">// values for. 就相当于要请求的数据域</span></span><br><span class="line">        String [] queryFields = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                ContactsContract.Contacts._ID,</span><br><span class="line">                ContactsContract.Contacts.DISPLAY_NAME</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// Perform your query - the contactUri is like a "where"</span></span><br><span class="line">        <span class="comment">// clause here 相当于一个查询数据库的语句</span></span><br><span class="line">        <span class="comment">// 首先 contactUri 定位了数据库的表，queryFields 定义了要查的语句</span></span><br><span class="line">        Cursor c = getActivity().getContentResolver()</span><br><span class="line">                .query(contactUri, queryFields, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Double-check that you actually got results</span></span><br><span class="line">            <span class="keyword">if</span> (c.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Pull out the first column of the first row of data -</span></span><br><span class="line">            <span class="comment">// that is your suspect's name.</span></span><br><span class="line">            c.moveToFirst();</span><br><span class="line">            <span class="comment">// 获得嫌疑人的名字</span></span><br><span class="line">            String suspect = c.getString(</span><br><span class="line">                    c.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));</span><br><span class="line">            <span class="comment">// 获得嫌疑人的 ID</span></span><br><span class="line">            String suspectId = c.getString(</span><br><span class="line">                    c.getColumnIndex(ContactsContract.Contacts._ID));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 最后不要忘了关闭 cursor</span></span><br><span class="line">            c.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-联系人信息的使用权限"><a href="#2-2-2-联系人信息的使用权限" class="headerlink" title="2.2.2 联系人信息的使用权限"></a>2.2.2 联系人信息的使用权限</h3><p>我们如何获得读取联系人数据库的权限呢?实际上，这是联系人应用将其权限临时赋给了我们。联系人应用具有使用联系人数据库的全部权限。</p>
<p>联系人应用返回包含在 intent 中的 URI 数据给父 activity 时 , 会添加一个 <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code> 标志。该标志告诉 <code>Android,CriminalIntent</code> 应用中的父 activity 可以使用联系人数据一次。这很有用，因为不需要访问整个联系人数据库，我们只需要访问其中的一条联系人信息。</p>
<h3 id="2-2-3-检查可响应任务的-activity"><a href="#2-2-3-检查可响应任务的-activity" class="headerlink" title="2.2.3 检查可响应任务的 activity"></a>2.2.3 检查可响应任务的 activity</h3><p>有些设备上根本就没有联系人应用，这时如果操作系统找不到匹配的 activity，应用就会崩溃！<br>解决办法是在调用最开始的时候通过操作系统中的 PackageManager 类进行自检，然后决定是否禁用这个按钮。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PackageManager packageManager = getActivity().getPackageManager();</span><br><span class="line">Intent pickContact = <span class="keyword">new</span> Intent(Intent.ACTION_PICK, </span><br><span class="line">	ContactsContract.Contacts.CONTENT_URI);</span><br><span class="line"><span class="keyword">if</span> (packageManager.resolveActivity(pickContact,</span><br><span class="line">        PackageManager.MATCH_DEFAULT_ONLY) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mSuspectButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Android 设备上安装了哪些组件以及包括哪些 activity,PackageManager 类全都知道。调用<code>resolveActivity(Intent, int)</code>方法，我们可以找到匹配给定 Intent 任务的 activity。flag 标志<code>MATCH_DEFAULT_ONLY</code>限定只搜索带<code>CATEGORY_DEFAULT</code>标志的 activity。这和 startActivity(Intent)方法类似。</p>
<h1 id="3-挑战联系"><a href="#3-挑战联系" class="headerlink" title="3. 挑战联系"></a>3. 挑战联系</h1><h2 id="3-1-ShareCompat"><a href="#3-1-ShareCompat" class="headerlink" title="3.1 ShareCompat"></a>3.1 ShareCompat</h2><p>使用 ShareCompat.IntentBuilder 内部类用于创建发送消息的 Intent。<br>将原来的代码替换如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ShareCompat.IntentBuilder.from(getActivity())</span><br><span class="line">        .setType(<span class="string">"text/plain"</span>)</span><br><span class="line">        .setSubject(getString(R.string.crime_report_subject))</span><br><span class="line">        .setText(getCrimeReport())</span><br><span class="line">        .setChooserTitle(R.string.send_report)</span><br><span class="line">        .startChooser();</span><br><span class="line"><span class="comment">/*  Intent i = new Intent(Intent.ACTION_SEND);</span></span><br><span class="line"><span class="comment">  i.setType("text/plain");</span></span><br><span class="line"><span class="comment">  i.putExtra(Intent.EXTRA_TEXT, getCrimeReport());</span></span><br><span class="line"><span class="comment">  i.putExtra(Intent.EXTRA_SUBJECT,</span></span><br><span class="line"><span class="comment">          getString(R.string.crime_report_subject));</span></span><br><span class="line"><span class="comment">  i = Intent.createChooser(i, getString(R.string.send_report));</span></span><br><span class="line"><span class="comment">  startActivity(i);*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-又一个隐式-Intent"><a href="#3-2-又一个隐式-Intent" class="headerlink" title="3.2 又一个隐式 Intent"></a>3.2 又一个隐式 Intent</h2><p>这个问题分三步解决：</p>
<ol>
<li>获取选择的联系人的 _ID （在 ContactsContract.Contacts 表中）</li>
<li>通过获取到的联系人 ID 在 CommonDataKinds.Phone 表中查询联系人的电话</li>
<li>通过电话创建隐式 Intent</li>
</ol>
<p>在开始之前，数据库中要加入 suspect 的 PhoneNumber 这一列，按照之前的步骤更改 Model 层和数据库建表语句以及数据库操作函数。</p>
<p>然后要加入一个拨打电话的按钮，我的想法是，在选择联系人之前或者联系人没有电话的时候，这个按钮是不能点击的，并会显示相应的文字。</p>
<h3 id="3-2-1-获取联系人-ID"><a href="#3-2-1-获取联系人-ID" class="headerlink" title="3.2.1 获取联系人 ID"></a>3.2.1 获取联系人 ID</h3><p>在按下选择联系人的那一步的 queryField 里面加入请求联系人 Id 的列即可。最后再从 Cursor 中取出。代码在 <a href="#inline_code">2.2.1节</a></p>
<h3 id="3-2-2-通过获取到的联系人-ID-查询电话"><a href="#3-2-2-通过获取到的联系人-ID-查询电话" class="headerlink" title="3.2.2 通过获取到的联系人 ID 查询电话"></a>3.2.2 通过获取到的联系人 ID 查询电话</h3><ol>
<li><p>首先要在 AndroidManifest.xml 中，<application> 标签前面加上申请权限的标签</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_CONTACTS"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意这里有个坑在</strong>，由于 Android 6.0 新加入了运行时权限，所有 targetAPI 为23及以上的应用都需要在使用时申请权限，如果不加入申请权限的代码，应用将崩溃。为了节约时间和代码量，我在完成这个挑战的时候将 Project 的 targetAPI 设为22以避免这种情况的发生。</p>
</blockquote>
</li>
<li><p>在获取到 suspect 的 ID 的之后，通过 ID 查询其第一个电话号码，我写了一个方法用于获取</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getPhoneNumberById</span><span class="params">(String contactId)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 首先找到需要查找的表的 URI</span></span><br><span class="line">      Uri phoneUri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;</span><br><span class="line">      <span class="comment">// 然后还是通过 ContentResolver 对数据进行请求</span></span><br><span class="line">      <span class="comment">// 跟数据库的操作十分类似</span></span><br><span class="line">      Cursor c = getActivity().getContentResolver().query(</span><br><span class="line">              phoneUri,</span><br><span class="line">              <span class="comment">// 要请求的数据是 NUMBER，即电话号码</span></span><br><span class="line">              <span class="keyword">new</span> String[] &#123; ContactsContract.CommonDataKinds.Phone.NUMBER &#125;,</span><br><span class="line">              <span class="comment">// 相当于 Where 语句，注意这里不是 _ID，应该是 CONTACT_ID</span></span><br><span class="line">              <span class="comment">// 对于 Phone 表来说，CONTACT_ID 应该是其外键，_ID 是主键</span></span><br><span class="line">              ContactsContract.CommonDataKinds.Phone.CONTACT_ID + <span class="string">"= ? "</span>,</span><br><span class="line">              <span class="keyword">new</span> String[] &#123; contactId &#125;,</span><br><span class="line">              <span class="keyword">null</span></span><br><span class="line">      );</span><br><span class="line">      String phoneNumber = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (c.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> phoneNumber;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 只取第一个数据</span></span><br><span class="line">          c.moveToFirst();</span><br><span class="line">          phoneNumber = c.getString(<span class="number">0</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          c.close();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> phoneNumber;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>还要根据电话号码的值来决定拨打电话按钮的状态</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCallSuspectButton</span><span class="params">(String phoneNumber)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (phoneNumber == <span class="keyword">null</span> || phoneNumber.isEmpty()) &#123;</span><br><span class="line">           mCallSuspectButton.setText(getString(R.string.crime_call_no_phone_number));</span><br><span class="line">           mCallSuspectButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           mCallSuspectButton.setText(getString(R.string.crime_call_suspect, phoneNumber));</span><br><span class="line">           mCallSuspectButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-2-3-建立拨打电话的隐式-Intent"><a href="#3-2-3-建立拨打电话的隐式-Intent" class="headerlink" title="3.2.3 建立拨打电话的隐式 Intent"></a>3.2.3 建立拨打电话的隐式 Intent</h3><p>这个就和书上的差不多啦~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mCallSuspectButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Uri number = Uri.parse(<span class="string">"tel:"</span> + mCrime.getPhoneNumber());</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL, number);</span><br><span class="line">        startActivity(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十四）—— 第14章 SQLite 数据库</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2014%20SQLite%20%E6%95%B0%E6%8D%AE%E5%BA%93-20170109.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了如何使用 SQLite 进行持久化存储，包含了 CRUD 四个操作，使用基础的 SQLiteOpenHelper 与 Cursor 构造程序</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/2927544a20495b24a5c834b447af8b6afc2723e9" target="_blank" rel="noopener">完成14章所有内容</a></p>
</blockquote>
<a id="more"></a>

<hr>
<blockquote>
<p><strong>为什么要用数据库而不是文本文件来存储数据呢？</strong><br>因为如果用普通的文本文件（比如 txt）存储数据，每次读取时都要读取整个文件的内容，完成修改后再全部保存，一旦数据量较大，将十分耗费时间和资源。</p>
</blockquote>
<p>SQLite是类似于MySQL的开源关系型数据库。不同于其他数据库的是,SQLite使用单个文件存储数据,使用SQLite库读取数据。Android标准库包含SQLite库以及配套的一些Java辅助类。</p>
<h1 id="1-定义-Schema（架构）"><a href="#1-定义-Schema（架构）" class="headerlink" title="1. 定义 Schema（架构）"></a>1. 定义 Schema（架构）</h1><p>本应用需要保存的应该是一个 Crime 的全部数据，比如一个表格可以下表这样。</p>
<table>
<thead>
<tr>
<th align="center">_id</th>
<th align="center">uuid</th>
<th align="center">title</th>
<th align="center">date</th>
<th align="center">solved</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">13090624138324</td>
<td align="center">Stolen yougurt</td>
<td align="center">13090636733242</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">13090274859392</td>
<td align="center">Dirty sink</td>
<td align="center">13090732131909</td>
<td align="center">1</td>
</tr>
</tbody></table>
<blockquote>
<p>程序员的一个目标，或者说信条，就是“不要重复造轮子”，也就是说，多花时间思考复用代码的编写和调用，避免在应用中到处使用重复代码。<br>基于上述准则，我们可以使用能统一定义模型层对象的高级 ORM（对象关系映射）工具，不过对于本章代码来说，因为需要掌握更加基础的内容，将会自己实现数据库操作。</p>
</blockquote>
<p>首先创建一个 Package，名为 database， 然后定义数据架构类 CrimeDbSchema.java </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeDbSchema.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeDbSchema</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeTable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"crimes"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cols</span> </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UUID = <span class="string">"uuid"</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"title"</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE = <span class="string">"date"</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SOLVED = <span class="string">"solved"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里有一个小 Tip，Android Studio 中有输入一长串前缀的 Live Template，比如要输入<code>public static final String</code>，只需要打 psfs 即可。</p>
</blockquote>
<h1 id="2-初始创建数据库"><a href="#2-初始创建数据库" class="headerlink" title="2. 初始创建数据库"></a>2. 初始创建数据库</h1><p>一般来说，在实际开发中，打开一个数据库之前，由于不知道其是否存在，是否有更新，所以要经过如下步骤：</p>
<ol>
<li>确认目标数据库是否存在。</li>
<li>如果不存在，首先创建数据库，然后创建数据库表以及必需的初始化数据。</li>
<li>如果存在，打开并确认数据库架构是否为最新版本</li>
<li>如果是旧版，就运行相关代码升级到最新版本</li>
</ol>
<p>在 Android 中，提供了一个<code>SQLiteOpenHelper</code>类用于处理这些打开数据库时繁杂的工作。我们可以创建一个<code>SQLiteOpenHelper</code>的子类用于对自己的数据库进行处理，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeBaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"crimeBase.db"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrimeBaseHelper</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, VERSION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果数据库不存在，就调用该函数创建一个数据库</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">    	 <span class="comment">// 一定要注意语句之间的空格，因为语句是一个字符串</span></span><br><span class="line">    	 <span class="comment">// 如果没有空格，对于 SQL 来说，就是无意义的语句</span></span><br><span class="line">    	 <span class="comment">// 比如下面的 table 后面一定要接一个空格</span></span><br><span class="line">        db.execSQL(<span class="string">"create table "</span> + CrimeTable.NAME + <span class="string">"("</span> +</span><br><span class="line">                <span class="string">" _id integer primary key autoincrement, "</span> +</span><br><span class="line">                CrimeTable.Cols.UUID + <span class="string">", "</span> +</span><br><span class="line">                CrimeTable.Cols.TITLE + <span class="string">", "</span> +</span><br><span class="line">                CrimeTable.Cols.DATE + <span class="string">", "</span> +</span><br><span class="line">                CrimeTable.Cols.SOLVED +</span><br><span class="line">                <span class="string">")"</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果版本升级了，就调用 onUpgrade() 函数</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于数据库结构调整太麻烦，在实际开发中最好的做法应该是直接删除数据库文件（最方便的就是卸载程序） :)</p>
</blockquote>
<h1 id="3-打开数据库"><a href="#3-打开数据库" class="headerlink" title="3. 打开数据库"></a>3. 打开数据库</h1><p>然后在 Model 层（在这里是 CrimeLab 单例）中打开数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mContext = context.getApplicationContext();</span><br><span class="line">mDataBase = <span class="keyword">new</span> CrimeBaseHelper(mContext)</span><br><span class="line">		.getWritableDatabase();</span><br></pre></td></tr></table></figure>

<h1 id="4-写入数据库（插入与更新）"><a href="#4-写入数据库（插入与更新）" class="headerlink" title="4. 写入数据库（插入与更新）"></a>4. 写入数据库（插入与更新）</h1><h2 id="4-1-使用-ContentValues"><a href="#4-1-使用-ContentValues" class="headerlink" title="4.1 使用 ContentValues"></a>4.1 使用 ContentValues</h2><p>负责处理数据库写入和更新操作的辅助类是 ContentValues 类。它是个键值存储类，类似于 Java 的 HashMap（查看源码可以发现它就是一个 HashMap）和前面用过的 Bundle。不同的是, ContentValues 专门用于处理SQLite数据。我们需要一个 Model 层的方法，把 Model 层数据转换为ContentValues，由于在 Model 层外，对数据的操作应该只有对 Model 对象的操作，所以这个方法应该是私有的。示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ContentValues <span class="title">getContentValues</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    values.put(Cols.UUID, crime.getId().toString());</span><br><span class="line">    values.put(Cols.TITLE, crime.getTitle());</span><br><span class="line">    values.put(Cols.DATE, crime.getDate().getTime());</span><br><span class="line">    values.put(Cols.SOLVED, crime.isSolved() ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-插入和更新记录"><a href="#4-2-插入和更新记录" class="headerlink" title="4.2 插入和更新记录"></a>4.2 插入和更新记录</h2><h3 id="4-2-1-插入记录"><a href="#4-2-1-插入记录" class="headerlink" title="4.2.1 插入记录"></a>4.2.1 插入记录</h3><p>准备好了 ContentValues，就可以进行写入数据了，调用<code>SQLiteDatabase.insert(…)</code>方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCrime</span><span class="params">(Crime c)</span> </span>&#123;</span><br><span class="line">    ContentValues values = getContentValues(c);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQLiteDatabase.insert(String table, String nullColumnHack, ContentValues values)</span></span><br><span class="line"><span class="comment">     * 第一个参数是表名，第三个参数是键值对</span></span><br><span class="line"><span class="comment">     * 第二个参数则是当 values 为全空时插入空行</span></span><br><span class="line"><span class="comment">     * 如果设为 null，则 values 为全空时不插入空行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mDatabase.insert(CrimeTable.NAME, <span class="keyword">null</span>, values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2-更新记录"><a href="#4-2-2-更新记录" class="headerlink" title="4.2.2 更新记录"></a>4.2.2 更新记录</h3><p>更新记录使用的是<code>SQLiteDatabase.update(…)</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCrime</span><span class="params">(Crime crime)</span> </span>&#123;</span><br><span class="line">    String uuidString = crime.getId().toString();</span><br><span class="line">    ContentValues values = getContentValues(crime);</span><br><span class="line"></span><br><span class="line">    mDatabase.update(CrimeTable.NAME, values,</span><br><span class="line">            Cols.UUID + <span class="string">"=?"</span>,</span><br><span class="line">            <span class="keyword">new</span> String[] &#123;uuidString&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>update 方法的原型是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SQLiteDatabase.update(String table, <span class="comment">// 表名</span></span><br><span class="line">				ContentValues values, <span class="comment">// 键值对</span></span><br><span class="line">				<span class="comment">// where 后面接的语句，一般是 "columnName = ?"</span></span><br><span class="line">				String whereClause, </span><br><span class="line">				<span class="comment">// whereClause 中 ? 代表的语句，可以有多个</span></span><br><span class="line">				String[] whereArgs</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>可以看到，实际上后面两个参数的意思就是 where columnName = columnValue，那么为什么要留出两个参数而不用一个参数解决呢?</p>
<blockquote>
<p>这样做是为了防范 SQL 脚本注入，因为 String 如果本身就带了 SQL 语句，如果不加处理放进数据库执行，就有可能造成灾难性的后果（比如直接 drop 掉所有的表）</p>
</blockquote>
<h1 id="5-读取数据库"><a href="#5-读取数据库" class="headerlink" title="5. 读取数据库"></a>5. 读取数据库</h1><p>读取数据库用到的是 query() 方法，这个方法有许多个重载版本，我们使用下面的版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	String table, 			// 表名</span></span></span><br><span class="line"><span class="function"><span class="params">	String[] columns,		// 选中的列名，为 <span class="keyword">null</span> 时选中所有列</span></span></span><br><span class="line"><span class="function"><span class="params">	String where,			// where 语句</span></span></span><br><span class="line"><span class="function"><span class="params">	String[] whereArgs,		// where 语句的参数</span></span></span><br><span class="line"><span class="function"><span class="params">	String groupBy,			// 分组</span></span></span><br><span class="line"><span class="function"><span class="params">	String having,			// 与合计函数一起使用的 having</span></span></span><br><span class="line"><span class="function"><span class="params">	String orderBy,			// 顺序</span></span></span><br><span class="line"><span class="function"><span class="params">	String limit)</span>			<span class="comment">// 限制数量</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到返回的是一个 Cursor 对象，下面来探究一下 Cursor 对象</p>
<h2 id="5-1-Cursor-与-CursorWrapper"><a href="#5-1-Cursor-与-CursorWrapper" class="headerlink" title="5.1 Cursor 与 CursorWrapper"></a>5.1 Cursor 与 CursorWrapper</h2><p>Cursor 是个神奇的表数据处理工具，其任务就是封装数据表中的原始字段值。从Cursor获取数据的代码大致如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String uuidString = cursor.getString(cursor.getColumnIndex(CrimeTable.Cols.UUID));</span><br></pre></td></tr></table></figure>
<p>每次要取出一条记录中的一列，都要重复写一次上述代码，所以我们使用 CursorWrapper 建立一个 Cursor 的子类，在其中封装可以转换对象的方法。<br>比如一个类可以这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeCursorWrapper</span> <span class="keyword">extends</span> <span class="title">CursorWrapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrimeCursorWrapper</span><span class="params">(Cursor cursor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Crime <span class="title">getCrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//这里是从得到的 CursorWrapper 中取出数据</span></span><br><span class="line">        String uuidString = getString(getColumnIndex(Cols.UUID));</span><br><span class="line">        String title = getString(getColumnIndex(Cols.TITLE));</span><br><span class="line">        <span class="keyword">long</span> date = getLong(getColumnIndex(Cols.DATE));</span><br><span class="line">        <span class="keyword">int</span> isSolved = getInt(getColumnIndex(Cols.SOLVED));</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 然后生成一个 Model 层对象返回，免去了重复写的繁琐</span></span><br><span class="line">        Crime crime = <span class="keyword">new</span> Crime(UUID.fromString(uuidString));</span><br><span class="line">        crime.setTitle(title);</span><br><span class="line">        crime.setDate(<span class="keyword">new</span> Date(date));</span><br><span class="line">        crime.setSolved(isSolved != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> crime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-创建-Model-层对象"><a href="#5-2-创建-Model-层对象" class="headerlink" title="5.2 创建 Model 层对象"></a>5.2 创建 Model 层对象</h2><p>首先封装一个数据库查询方法，返回的是自定义的 CrimeCursorWrapper 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> CrimeCursorWrapper <span class="title">queryCrimes</span><span class="params">(String whereClause, String[] whereArgs)</span> </span>&#123;</span><br><span class="line">    Cursor cursor = mDatabase.query(</span><br><span class="line">            CrimeTable.NAME,</span><br><span class="line">            <span class="keyword">null</span>, <span class="comment">// Columns -- use null to select all columns</span></span><br><span class="line">            whereClause,</span><br><span class="line">            whereArgs,</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CrimeCursorWrapper(cursor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再从 CursorWrapper 中获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Crime&gt; <span class="title">getCrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Crime&gt; crimes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    CrimeCursorWrapper cursor = queryCrimes(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cursor.moveToFirst();</span><br><span class="line">        <span class="keyword">while</span> (!cursor.isAfterLast()) &#123;</span><br><span class="line">            crimes.add(cursor.getCrime());</span><br><span class="line">            cursor.moveToNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> crimes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取单个记录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Crime <span class="title">getCrime</span><span class="params">(UUID id)</span> </span>&#123;</span><br><span class="line">    CrimeCursorWrapper cursor = queryCrimes(</span><br><span class="line">            Cols.UUID + <span class="string">" = ?"</span>,</span><br><span class="line">            <span class="keyword">new</span> String[] &#123; id.toString() &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cursor.moveToFirst();</span><br><span class="line">        <span class="keyword">return</span> cursor.getCrime();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-Application-Context-应用上下文"><a href="#6-Application-Context-应用上下文" class="headerlink" title="6 Application Context(应用上下文)"></a>6 Application Context(应用上下文)</h1><p>前面,我们在CrimeLab的构造方法中使用了Application Context。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CrimeLab</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">	mContext = context.getApplicationContext();</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Application Context 有什么特别呢?就上例来看,为什么要用 Application Context ,而不直接用activity 作为 context 呢?</p>
<p>要回答上述问题,关键就在于考虑它们的生命周期。只要有 activity 在,Android 肯定也创建 有 application 对象。用户在应用的不同界面间导航时,各个 activity 时而存在时而消亡,但 application 对象不会受任何影响。可以说,它的生命周期要比任何 activity 都要长。</p>
<p>CrimeLab 是个单例。这表明,一旦创建,它就会一直存在直至整个应用进程被销毁。由代码可知, CrimeLab 引用着 mContext 对象。显然,如果把 activity 作为 mContext 对象保存的话,这个由 CrimeLab 一直引用着的 activity 肯定会免遭垃圾回收器的清理,即便用户跳转离开这个 activity 时也是如此。</p>
<p>为了避免资源浪费,我们使用了应用程序上下文。这样, CrimeLab 仍可以引用 Context 对象, 而 activity 的存在和消亡也不用受它束缚了。</p>
<h1 id="7-挑战练习：删除-Crime-记录"><a href="#7-挑战练习：删除-Crime-记录" class="headerlink" title="7 挑战练习：删除 Crime 记录"></a>7 挑战练习：删除 Crime 记录</h1><p>在上一章中，我们为 CrimeFragment 的 ToolBar 中添加了删除按钮，这一章我们改用数据库来存储数据，需要对代码进行相应的改写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeLab.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCrime</span><span class="params">(Crime c)</span> </span>&#123;</span><br><span class="line">    mDatabase.delete(</span><br><span class="line">            CrimeTable.NAME,</span><br><span class="line">            Cols.UUID + <span class="string">" = ?"</span>,</span><br><span class="line">            <span class="keyword">new</span> String[] &#123;c.getId().toString()&#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.menu_item_delete_crime:</span><br><span class="line">            CrimeLab.get(getActivity()).deleteCrime(mCrime);</span><br><span class="line">            getActivity().finish();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十三）—— 第13章 工具栏（Toolbar）</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2013%20ToolBar-20161124.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲了如何使用 ToolBar，顺便普及了 AppCompat 的由来和 app 命名空间的知识</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/62060a5d9c3ba3edda36db99befda973d175ede9" target="_blank" rel="noopener">完成13章,未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/7c0e3e71cac0d8c400d1cc4fbbd5ef9a79e0055a" target="_blank" rel="noopener">完成13章挑战1</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/ea6a018b767644ce400eeee44afda18b9f9fca94" target="_blank" rel="noopener">完成13章挑战2，3</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-ToolBar-与-ActionBar"><a href="#1-ToolBar-与-ActionBar" class="headerlink" title="1. ToolBar 与 ActionBar"></a>1. ToolBar 与 ActionBar</h1><p>首先，两者给我们最直观的印象就是 ToolBar 界面更美观。ToolBar 左边不再放置图标，右边菜单项的间距也更小。另外就是向上的导航按钮， ActionBar 上的这个按钮不够醒目，只是旁边按钮的附属物。除了感官上的差异，在使用上，ToolBar 比 ActionBar 更灵活。 ActionBar 的使用限制多多，比如，整个应用只能配置一个 ActionBar 且位置及尺寸必须固定(在屏幕顶部)，而 ToolBar 就没有这些限制。</p>
<p>本章使用的 ToolBar 应用了 AppCompat 主题。如有需要，也可以通过 activity 和fragment布局定制标准视图的 ToolBar 。<strong>我们可以在屏幕的任何位置摆放 ToolBar ，甚至可以在同一屏配置多个 ToolBar</strong>。 应用设计的自由度由此大大提高了，例如，可以为每个fragment定制专用 ToolBar 。可以想象，在同一个用户界面托管多个fragment时，每个fragment都由自己的 ToolBar 控制，这比所有 fragment 共享一个位于屏幕顶部的 ToolBar 方便多了。</p>
<p>此外， ToolBar 还能支持内嵌视图和调整高度，这极大丰富了应用的交互使用模式。毫不夸张 地说，应用设计最大的局限就是我们的想象空间。</p>
<h1 id="2-引入-AppCompat"><a href="#2-引入-AppCompat" class="headerlink" title="2. 引入 AppCompat"></a>2. 引入 AppCompat</h1><h2 id="2-1-使用-AppCompat-库"><a href="#2-1-使用-AppCompat-库" class="headerlink" title="2.1 使用 AppCompat 库"></a>2.1 使用 AppCompat 库</h2><p>完全整合 AppCompat 库，我们需要:</p>
<ol>
<li>添加AppCompat依赖项;（在前面的章节已经做过）</li>
<li>使用一种AppCompat主题;</li>
<li>确保所有的activitiy都是AppCompatActivity子类。</li>
</ol>
<h3 id="2-1-1-更新主题"><a href="#2-1-1-更新主题" class="headerlink" title="2.1.1 更新主题"></a>2.1.1 更新主题</h3><p>添加了依赖库，接下来至少要使用一种 AppCompat 主题。</p>
<p>AppCompat库自带以下三种主题：</p>
<ul>
<li>Theme.AppCompat:黑色主题</li>
<li>Theme.AppCompat.Light:浅色主题</li>
<li>Theme.AppCompat.Light.DarkActionBar:带黑色工具栏的浅色主题</li>
</ul>
<p>应用级别的主题设置在<code>AndroidManifest.xml</code>文件中。主题也可按 activity 配置。打开 <code>AndroidManifest.xml</code> 文件，更改 application 标签的<code>android:theme</code>属性，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-使用-AppCompatActivity"><a href="#2-1-2-使用-AppCompatActivity" class="headerlink" title="2.1.2 使用 AppCompatActivity"></a>2.1.2 使用 AppCompatActivity</h3><p>将所有继承 FragmentActivity 的 activity 更换成继承 AppCompatActivity。</p>
<h1 id="3-ToolBar-菜单"><a href="#3-ToolBar-菜单" class="headerlink" title="3. ToolBar 菜单"></a>3. ToolBar 菜单</h1><p>工具栏菜单由操作项(又称为菜单项)组成，它占据着工具栏的右上方区域。操作项的操作应用于当前屏幕，甚至整个应用。</p>
<h2 id="3-1-在-XML-文件中定义菜单"><a href="#3-1-在-XML-文件中定义菜单" class="headerlink" title="3.1 在 XML 文件中定义菜单"></a>3.1 在 XML 文件中定义菜单</h2><p>菜单是一种类似于布局的资源。创建菜单定义文件并放置在res/menu目录下，Android会自动 生成相应的资源ID。随后，在代码中实例化菜单时，就可以直接使用。</p>
<h4 id="例子：fragment-crime-list-xml"><a href="#例子：fragment-crime-list-xml" class="headerlink" title="例子：fragment_crime_list.xml"></a>例子：fragment_crime_list.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/menu_item_new_crime"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_menu_add"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/new_crime"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom|withText"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可能注意到了上面的 app:showAsAction 属性，下面来分析一下：</p>
<h3 id="3-1-1-showAsAction-属性的作用"><a href="#3-1-1-showAsAction-属性的作用" class="headerlink" title="3.1.1 showAsAction 属性的作用"></a>3.1.1 showAsAction 属性的作用</h3><p>showAsAction属性用于指定菜单选项是显示在工具栏上，还是隐藏于溢出菜单(overflow menu)。该属性当前设置为 ifRoom 和 withText 的组合值。因此，只要空间足够，菜单项图标及其文字描述都会显示在工具栏上。如空间仅够显示菜单项图标，文字描述就不会显示。如空间大小不够显示任何项，菜单项就会隐藏到溢出菜单中。</p>
<h3 id="3-1-2-应用命名空间"><a href="#3-1-2-应用命名空间" class="headerlink" title="3.1.2 应用命名空间"></a>3.1.2 应用命名空间</h3><p>注意，不同于常见的android命名空间声明，fragment_crime_list.xml文件使用xmlns标签定义了全新的app命名空间。指定showAsAction属性时，就用了这个新定义的命名空间。<br><strong>基于历史代码的原因，AppCompat库需要使用app命名空间</strong>。操作栏API随Android 3.0引入。 为支持各种旧系统版本设备，早期创建的AppCompat库捆绑了兼容版操作栏。在运行Android 2.3 或更早版本系统的设备上，菜单及其相应的XML文件是确实存在的，但是android:showAsAction属性是随着操作栏的发布才添加的。<br>AppCompat库不希望使用原生showAsAction属性，因此，它提供了定制版showAsAction属性(app:showAsAction)。</p>
<h2 id="3-2-创建菜单"><a href="#3-2-创建菜单" class="headerlink" title="3.2 创建菜单"></a>3.2 创建菜单</h2><p>在代码中,Activity类提供了管理菜单的回调函数。需要选项菜单时,Android会调用 Activity 的onCreateOptionsMenu(Menu)方法。</p>
<p>Fragment 也有一套自己的选项菜单回调函数。以下为创建菜单和响应菜单项选择事件的两个回调方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-1-实例化菜单"><a href="#3-2-1-实例化菜单" class="headerlink" title="3.2.1 实例化菜单"></a>3.2.1 实例化菜单</h3><p>在CrimeListFragment.java中,覆盖onCreateOptionsMenu(Menu, MenuInflater)方法,实例化fragment_crime_list.xml中定义的菜单，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</span><br><span class="line">    inflater.inflate(R.menu.fragment_crime_list, menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-使-Fragment-初始化菜单"><a href="#3-2-2-使-Fragment-初始化菜单" class="headerlink" title="3.2.2 使 Fragment 初始化菜单"></a>3.2.2 使 Fragment 初始化菜单</h3><p>要通知FragmentManager,需调用以下方法:<br><code>public void setHasOptionsMenu(boolean hasMenu)</code></p>
<p>在CrimeListFragment.onCreate(…)方法中,让FragmentManager知道CrimeListFragment<br>需接收选项菜单方法回调。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setHasOptionsMenu(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-让菜单发挥作用"><a href="#3-2-3-让菜单发挥作用" class="headerlink" title="3.2.3 让菜单发挥作用"></a>3.2.3 让菜单发挥作用</h3><p>在初始化菜单后，我们已经能在应用界面上看到菜单了，现在需要让菜单能够有实际的作用，比如新增一个 Crime，要达到这个目的，我们需要做下面几件事：</p>
<ol>
<li><p>在 Model 层增加一个新增的函数</p>
</li>
<li><p>在 Controller 层增加菜单监听</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">   <span class="keyword">case</span> R.id.menu_item_new_crime:</span><br><span class="line">   		Crime crime = <span class="keyword">new</span> Crime();</span><br><span class="line">         CrimeLab.get(getActivity()).addCrime(crime);</span><br><span class="line">         Intent intent = CrimePagerActivity</span><br><span class="line">                 .newIntent(getActivity(), crime.getId());</span><br><span class="line">         startActivity(intent);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3-3-实现层级式导航"><a href="#3-3-实现层级式导航" class="headerlink" title="3.3 实现层级式导航"></a>3.3 实现层级式导航</h2><p>目前为止,CriminalIntent 应用主要靠后退键在应用内导航。后退键导航又称为临时性导航, 只能返回到上一次浏览过的用户界面;而层级式导航(hierarchical navigation,有时又称为ancestral navigation)可在应用内逐级向上导航。</p>
<p>有了层级式导航,用户可点击工作栏左边的向上按钮向上导航。在Jelly Bean(API 16级)设备 上,可轻松实现层级式导航。但在这之前,开发者只能自己动手处理向上按钮的显示和点击事件。<br>打开 AndroidManifest.xml , 添加 parentActivityName 属性 , 开启 CriminalIntent应用的层级式导航。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:name</span>=<span class="string">".CrimePagerActivity"</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:parentActivityName</span>=<span class="string">".CrimeListActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="层级导航的工作原理"><a href="#层级导航的工作原理" class="headerlink" title="层级导航的工作原理"></a>层级导航的工作原理</h3><p>在CrimePagerActivity 界面,无论按哪个按钮导航,都是回到CrimeListActivity界面。虽然结果一样,但它们各自的后台实现机制却大不相同。</p>
<p>知道这一点很重要,因为取决于具体应用,向上导航很可能会让用户迷失在众多activity中(这里指回退栈内的众多activity)。用户点击向上按钮自CrimePagerActivity界面向上导航时,如下的intent会被创建:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, CrimeListActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">startActivity(intent);</span><br><span class="line">finish();</span><br></pre></td></tr></table></figure>
<p><code>FLAG_ACTIVITY_CLEAR_TOP</code>指示Android在回退栈中寻找指定的activity实例。如存在,则弹出栈内所有其他activity,让启动的目标activity出现在栈顶(显示在屏幕上)。</p>
<h1 id="4-挑战练习"><a href="#4-挑战练习" class="headerlink" title="4. 挑战练习"></a>4. 挑战练习</h1><h2 id="4-1-删除-crime-记录"><a href="#4-1-删除-crime-记录" class="headerlink" title="4.1 删除 crime 记录"></a>4.1 删除 crime 记录</h2><p>与增加 Crime 记录差不多，首先在 Model 中增加删除方法，然后在 CrimeFragment 中增加菜单（在这之前先建立一个菜单）</p>
<ol>
<li>在 onCreate 中添加 <code>setHasOptionsMenu(true);</code></li>
<li>重写 onCreateOptionsMenu() 方法</li>
<li>重写 onOptionsItemSelected() 方法</li>
</ol>
<h2 id="4-2-优化字符串资源显示"><a href="#4-2-优化字符串资源显示" class="headerlink" title="4.2 优化字符串资源显示"></a>4.2 优化字符串资源显示</h2><p>书上已经写了方法，我就不赘述了</p>
<h2 id="4-3-用于-RecyclerView-的空视图"><a href="#4-3-用于-RecyclerView-的空视图" class="headerlink" title="4.3 用于 RecyclerView 的空视图"></a>4.3 用于 RecyclerView 的空视图</h2><p>在 CrimeListFragment 的根布局中加入和列表同级的一个 TextView，此时其中<code>fragment_crime_list.xml</code> 中代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/crime_recycler_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/crime_set_empty_text_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/empty_crime_set"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在 CrimeListFragment 中引用该 TextView，并设置和添加 Crime 菜单选项相同的 ClickListener 的内容。</p>
<p>最后，在 updateUI() 方法中，获取到数据集时，判断一下数据集的长度，如果大于零， 隐藏这个 TextView，然后执行之前一系列显示的操作；如果为零，就隐藏 RecyclerView，显示该 TextView。</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十二）—— 第12章 对话框</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2012%20%E4%BD%BF%E7%94%A8%20Dialog-20161123.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要介绍了如何使用内嵌在 fragment 中的对话框，以及 fragment 之间如何传递数据</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/20c265c6dd9e122fc169eed8dc90da60f275f360" target="_blank" rel="noopener">完成第12章</a></p>
</blockquote>
<a id="more"></a>

<h1 id="1-使用-DialogFragment"><a href="#1-使用-DialogFragment" class="headerlink" title="1. 使用 DialogFragment"></a>1. 使用 DialogFragment</h1><h2 id="1-1-AppCompat-兼容库"><a href="#1-1-AppCompat-兼容库" class="headerlink" title="1.1 AppCompat 兼容库"></a>1.1 AppCompat 兼容库</h2><blockquote>
<p>Google 推出 AppCompat 兼容库是为了让所有Android用户都能体验到新特性。AppCompat兼容库能通过支持库的方式将部分最新系统的特色功能移植到Android旧版本系统中。</p>
</blockquote>
<p>应该在 Porject Structure 中添加 appcompat-v7 的依赖。</p>
<h2 id="1-2-创建-DialogFragment"><a href="#1-2-创建-DialogFragment" class="headerlink" title="1.2 创建 DialogFragment"></a>1.2 创建 DialogFragment</h2><blockquote>
<p>建议将 <code>AlertDialog</code> 封装在 <code>DialogFragment</code> (Fragment的子类)实例中使用。当然，不使用<code>DialogFragment</code> 也可显示 <code>AlertDialog</code> 视图,但不推荐这样做。使用 <code>FragmentManager</code> 管理对话框,可以更灵活地显示对话框。</p>
</blockquote>
<p>如果旋转设备，单独使用的 <code>AlertDialog</code> 会消失，而封装在 fragment 中的 <code>AlertDialog</code> 则不会有此问题(旋转后,对话框会被重建恢复)。</p>
<ul>
<li>首先需要一个针对 dialog 的布局文件，如 DatePicker 作为根元素的 Dialog 用于选择日期。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:id</span>=<span class="string">"@+id/dialog_date_date_picker"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:calendarViewShown</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--旧版系统会使用 calenderViewShown 属性--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后新建一个父类是 <code>DialogFragment</code> 的类 <code>DatePickerFragment</code>，重写其中的 <code>onCreateDialog</code> 方法，返回一个<code>AlertDialog</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 使用 LayoutInflater 引用布局文件创建用于显示 Dialog 的 View</span></span><br><span class="line">	View v = LayoutInflater.from(getActivity())</span><br><span class="line">                .inflate(R.layout.dialog_date, <span class="keyword">null</span>);</span><br><span class="line">                </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">		.setView(v) <span class="comment">// 设置视图</span></span><br><span class="line">		.setTitle(R.string.date_picker_title) <span class="comment">//设置标题</span></span><br><span class="line">		<span class="comment">// 设置 OK 按钮，OnClickListener 暂时留空</span></span><br><span class="line">		.setPositiveButton(android.R.string.ok, <span class="keyword">null</span>)</span><br><span class="line">		<span class="comment">// 使用 Builder 的 create() 方法创建 Dialog 并返回</span></span><br><span class="line">		.create(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用 DialogFragment 时，使用成员方法 show 来显示 dialog：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Fragment 中为 DatePickerFragment 添加一个 Tag</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIALOG_DATE = <span class="string">"DialogDate"</span>;</span><br><span class="line">……</span><br><span class="line"><span class="comment">// 在 Fragment 内部获取 FragmentManager</span></span><br><span class="line">FragmentManager manager = getFragmentManager(); </span><br><span class="line">DatePickerFragment dialog = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line"><span class="comment">// 显示对话框</span></span><br><span class="line">dialog.show(manager, DIALOG_DATE);</span><br></pre></td></tr></table></figure>

<h1 id="2-fragment-之间的数据传递"><a href="#2-fragment-之间的数据传递" class="headerlink" title="2. fragment 之间的数据传递"></a>2. fragment 之间的数据传递</h1><p>我们之前实现了 activity 之间以及基于 fragment 的 activity 之间的数据传递。现在需实现同一 activity 托管的两个 fragment 之间的数据传递。<br><img src="http://img.blog.csdn.net/20161124133415509" alt="一个 activity 托管的不同 fragment 之间数据的传递"></p>
<h2 id="2-1-将数据传递到对话框"><a href="#2-1-将数据传递到对话框" class="headerlink" title="2.1 将数据传递到对话框"></a>2.1 将数据传递到对话框</h2><p>显然，要达到目的，只需要在 DatePickerFragment 中建立获取实例的 newInstance 方法，其中需要的参数是传递的信息即可，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatePickerFragment <span class="title">newInstance</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 新建一个 Bundle 对象用于存放数据</span></span><br><span class="line">	Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">	args.putSerializable(ARG_DATE, date);</span><br><span class="line">    DatePickerFragment fragment = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">    <span class="comment">// 使用 fragment arguments 来传递参数</span></span><br><span class="line">    fragment.setArguments(args);</span><br><span class="line">    <span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记得把使用 DatePickerFragment 的构造方法的地方改成 newInstance 方法获取实例。</p>
<p>在获得数据之后，要先将 DatePicker 初始化为原本的日期，首先用 Fragment 的 <code>getArguments().getSeriallizable(String key)</code> 方法获取数据，然后用 Calendar 对象取出 date 中的年月日，最后使用 DatePicker 类的 <code>init(int year, int month, int dayOfMonth, OnDateChangedListener listener)</code> 方法 初始化默认日期</p>
<h2 id="2-2-从对话框回传数据"><a href="#2-2-从对话框回传数据" class="headerlink" title="2.2 从对话框回传数据"></a>2.2 从对话框回传数据</h2><h3 id="2-2-1-设置目标-fragment"><a href="#2-2-1-设置目标-fragment" class="headerlink" title="2.2.1 设置目标 fragment"></a>2.2.1 设置目标 fragment</h3><p>类似于 activity 间的关联，可将 CrimeFragment 设置成 DatePickerFragment 的目标 fragment。 即使是在 CrimeFragment 和 DatePickerFragment 被销毁和重建后，操作系统也会重新关联它们。调用以下 Fragment 方法可建立这种关联:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetFragment</span><span class="params">(Fragment fragment, <span class="keyword">int</span> requestCode)</span></span></span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：目标 fragment 以及请求代码。需要时，目标 fragment 使用请求代码确认是哪个 fragment 在回传数据。</p>
<p>目标 fragment 和请求代码由 FragmentManager 负责跟踪管理,我们可调用设置目标的 fragment 的 <code>getTargetFragment()</code> 和 <code>getTargetRequestCode()</code> 方法获取它们。</p>
<h3 id="2-2-2-传递数据给目标-Fragment"><a href="#2-2-2-传递数据给目标-Fragment" class="headerlink" title="2.2.2 传递数据给目标 Fragment"></a>2.2.2 传递数据给目标 Fragment</h3><p>处理由同一 activity 托管的两个 fragment 间的数据返回时，可借用<code>Fragment.onActivityResult(...)</code>方法。因此，直接调用目标 fragment 的<code>Fragment.onActivityResult(...)</code>方法,，就能实现数据的回传。该方法恰好有我们需要的如下信息：</p>
<ul>
<li>请求代码：与传入<code>setTargetFragment(...)</code>方法相匹配,告诉目标 fragment 返回结果来 自哪里。</li>
<li>结果代码：决定下一步该采取什么行动。 </li>
<li>Intent：包含 extra 数据。</li>
</ul>
<p>所以从 CrimeFragment 中显示 DatePickerFragment，用户选择日期以后，想要回传信息，可以写一个 sendResult 方法，该方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatePickerFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE =</span><br><span class="line">	<span class="string">"com.kniost.criminalintent.date"</span>;</span><br><span class="line"> ……                </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 防止出错</span></span><br><span class="line">	<span class="keyword">if</span> (getTargetFragment() == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">	<span class="comment">// 放置数据到 Intent 中</span></span><br><span class="line">	intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">	<span class="comment">// 获取目标 fragment，调用其 onActivityResult 方法，其中 RequestCode 是用 getTargetRequestCode 方法获取的，resultCode 是传入参数，intent 包含了数据</span></span><br><span class="line">	getTargetFragment()</span><br><span class="line">		.onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 CrimeFragment 中则应该重写 onActivityResult 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CrimeFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 如果一切正常，调用 sendResult 的方法时传入的参数应该就是 Activity.RESULT_OK，所以不会直接 return</span></span><br><span class="line">    <span class="keyword">if</span> (resultCode != Activity.RESULT_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 如此判断方便有多个回传时使用</span></span><br><span class="line">	<span class="keyword">if</span> (requestCode == REQUEST_DATE) &#123;</span><br><span class="line">		Date date = (Date) data</span><br><span class="line">			.getSerializableExtra(DatePickerFragment.EXTRA_DATE);</span><br><span class="line">		mCrime.setDate(date); mDateButton.setText(mCrime.getDate().toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-挑战练习"><a href="#3-挑战练习" class="headerlink" title="3. 挑战练习"></a>3. 挑战练习</h1><p><code>//待完成</code></p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十一）—— 第11章 使用 ViewPager</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2011%20%E4%BD%BF%E7%94%A8%20ViewPager-20161117.html</url>
    <content><![CDATA[<blockquote>
<p>本章介绍了如何使用 ViewPager（准确地说，应该是使用了 FragmentStatePagerAdapter 的简单的 ViewPager）。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/4e8b9cd914207d976b38d957375418d8d75b551b" target="_blank" rel="noopener">完成第十一章</a></p>
</blockquote>
<a id="more"></a>
<p>#1. ViewPager 和 PagerAdapter</p>
<p>ViewPager 在某种程度上类似于 RecyclerView，它们都需要借助于 Adapter 来支持，ViewPager 需要的是 PagerAdapter。</p>
<p>ViewPager 与 PagerAdapter 之间的配合比 RecyclerView 与其 Adapter 之间复杂得多。但是对于本章而言，因为使用的是 PagerAdapter 的子类 <code>FragmentStatePagerAdapter</code>，它能协助处理很多细节问题.</p>
<p><code>FragmentStatePagerAdapter</code> 化繁为简，提供了两个有用的方法：<code>getCount()</code> 和 <code>getItem (int)</code>。</p>
<p>调用  <code>getCount()</code> 方法顾名思义就是获取数据集的大小。调用 <code>getItem(int)</code> 方法，返回的是应该是和数据绑定的Fragment，一般来说会将其和数据集的位置相对应。</p>
<p>##使用步骤：</p>
<ul>
<li>布局文件，使用 ViewPager（因为只有支持包而没有内置，所以不像 fragment 需要选择）</li>
<li>在代码中声明 ViewPager 变量并引用</li>
<li>本书中使用的是匿名 FragmentStatePagerAdapter 类，在其中直接重写了两个关键方法，然后就可以使用了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 ViewPager</span></span><br><span class="line">mViewPager = (ViewPager) findViewById(R.id.activity_crime_pager_view_pager);</span><br><span class="line"><span class="comment">// 获取数据集</span></span><br><span class="line">mCrimes = CrimeLab.get(<span class="keyword">this</span>).getCrimes();</span><br><span class="line"><span class="comment">// 获取 FragmentManager</span></span><br><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line"><span class="comment">// 使用匿名内部类来引用 FragmentStatePagerAdapter，构造方法的参数是 FragmentManager</span></span><br><span class="line">mViewPager.setAdapter(<span class="keyword">new</span> FragmentStatePagerAdapter(fragmentManager) &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">		Crime crime = mCrimes.get(position);</span><br><span class="line">		<span class="keyword">return</span> CrimeFragment.newInstance(crime.getId());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mCrimes.size();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置完 Adapter 以后，就要选择当前的数据啦~这就是上一个  Activity 传递进来的数据，我就不予赘述了。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mCrimes.size(); i++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (mCrimes.get(i).getId().equals(crimeId)) &#123;</span><br><span class="line">		mViewPager.setCurrentItem(i);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-FragmentStatePagerAdapter-与-FragmentPagerAdapter"><a href="#2-FragmentStatePagerAdapter-与-FragmentPagerAdapter" class="headerlink" title="2. FragmentStatePagerAdapter 与 FragmentPagerAdapter"></a>2. FragmentStatePagerAdapter 与 FragmentPagerAdapter</h1><p><code>FragmentPagerAdapter</code> 是另外一种可用的 PagerAdapter , 其用法与 <code>FragmentStatePagerAdapter</code> 基本一致。<strong>唯一的区别在于：卸载不再需要的 fragment 时，各自采用的处理方法有所不同。</strong></p>
<p><strong><code>FragmentStatePagerAdapter</code>会销毁不需要的 fragment</strong>。事务提交后，activity 的 <code>FragmentManager</code> 中的 fragment 会被彻底移除。<code>FragmentStatePagerAdapter</code> 类名中的“state”表明：在销毁 fragment 时，可在 <code>onSaveInstanceState(Bundle)</code> 方法中保存 fragment 的 Bundle 信息。用户切换回来时，保存的实例状态可用来恢复生成新的fragment。</p>
<p>相比之下，<code>FragmentPagerAdapter</code> 有不同的做法。对于不再需要的 fragment，<code>FragmentPagerAdapter</code> 会选择调用事务的 detach(Fragment) 方法来处理它,而非 remove(Fragment) 方 法。也就是说，<strong><code>FragmentPagerAdapter</code> 只是销毁了 fragment 的视图，fragment 实例还保留在 <code>FragmentManager</code> 中</strong>。因此，<code>FragmentPagerAdapter</code> 创建的 fragment 永远不会被销毁。</p>
<p>选择哪种adapter取决于应用的要求。通常来说，使用 <code>FragmentStatePagerAdapter</code> 更节省内存。CriminalIntent 应用需显示大量crime记录,每份记录最终还会包含图片。在内存中保存所有信息显然不合适,因此我们选择使用 <code>FragmentStatePagerAdapter</code> 。</p>
<p>另一方面,如果用户界面只需要少量固定的fragment，则 <code>FragmentPagerAdapter</code> 是个安全、 合适的选择。</p>
<p>最常见的例子为分页显示用户界面。例如，某些应用的明细视图所含内容较多，通 常需分两页显示。这时就可以将这些明细信息分拆开来，以多页面的形式展现。显然,为用户界面添加支持滑动切换的 ViewPager，能增强应用的触摸体验。此外，将 fragment 保存在内存中，更易于管理控制层的代码。对于这种类型的用户界面，每个 activity 通常只有两三个 fragment，基本不用担心有内存不足的风险。</p>
<h1 id="3-深入学习：ViewPager-的工作原理"><a href="#3-深入学习：ViewPager-的工作原理" class="headerlink" title="3. 深入学习：ViewPager 的工作原理"></a>3. 深入学习：ViewPager 的工作原理</h1><p>什么时候需要自己实现PagerAdapter接口呢？需要ViewPager托管非 fragment 视图时,就需要实现原生 PagerAdapter 接口。</p>
<p>PagerAdapter 要比 RecyclerView 的 Adapter复杂得多，因为它要处理更多的视图管理工作。<br>PagerAdapter 不使用可返回视图的<code>onBindViewHolder(...)</code>方法，而是使用下列方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>PagerAdapter.instantiateItem(ViewGroup, int)</code>方法告诉 PagerAdapter 创建指定位置的列表项视图，然后将其添加给 ViewGroup 视图容器，而 <code>destroyItem(ViewGroup, int, Object)</code> 方法则告诉 PagerAdapter 销毁已建视图。（注意，<code>instantiateItem(ViewGroup, int)</code> 方法并不要求立即创建视图。因此，PagerAdapter 可自行决定何时创建视图。）</p>
</li>
<li><p>视图创建完成后，ViewPager 会在某个时间点注意到它。为确定该视图所属的对象，ViewPager 会调用 <code>isViewFromObject(View, Object)</code> 方法。这 里 , Object 参数是 <code>instantiateItem(ViewGroup,int)</code> 方法返回的对象。因此,假设 ViewPager 调用<code>instantiateItem(ViewGroup, 5)</code> 方法返回一个 A 对象,那么只要传入的 View 参数是第5个对象的视图，<code>isViewFromObject(View, A)</code> 方法就应返回true值,否则返回false值。</p>
</li>
</ul>
<p>对 ViewPager 来说，这是一个复杂的过程，但对于PagerAdapter来说,这算不上什么。因为PagerAdapter只要能够创建、销毁视图以及识别视图来自哪个对象即可。这样的要求显然很宽松，因而PagerAdapter 能够比较自由地通过 <code>instantiateItem(ViewGroup, int)</code> 方法创建并添加新的fragment ,然后返回可以跟踪管理的 Object(fragment) 。</p>
<p>以下为isViewFromObject (View, Object)方法的具体实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((Fragment)object).getView() == view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到,每次需要使用ViewPager时,都要覆盖实现PagerAdapter的这些方法,这真是一种磨难。所幸我们有 <code>FragmentPagerAdapter</code> 和 <code>FragmentStatePagerAdapter</code> 这么便利的类。</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（十）—— 第10章 使用 fragment argument</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%2010%20%E4%BD%BF%E7%94%A8%20fragment%20arguments-20161021.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要介绍了如何使用 fragment 的 arguments 来传递信息</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/293ebe3320fc6201384132b247dffce9d9f40654" target="_blank" rel="noopener">完成第十章</a></p>
</blockquote>
<h1 id="1-从-fragment-中启动-activity"><a href="#1-从-fragment-中启动-activity" class="headerlink" title="1. 从 fragment 中启动 activity"></a>1. 从 fragment 中启动 activity</h1><h2 id="1-1-直接启动"><a href="#1-1-直接启动" class="headerlink" title="1.1 直接启动"></a>1.1 直接启动</h2><p>从 fragment 中直接启动 acitivity 的方法一般如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(getActivity(), TargetActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>
<p>Fragment 中也带有 startActivity()方法，其中 Intent 构造方法需要的 Context 对象可以通过 getActivity() 方法获得。</p>
<h2 id="1-2-附加-extra-信息"><a href="#1-2-附加-extra-信息" class="headerlink" title="1.2 附加 extra 信息"></a>1.2 附加 extra 信息</h2><p>一般来说，为了保证类之间的独立，启动一个 activity 的 intent 及其需要的参数应该写在目标 activity 中，对于 fragment 同样如此。</p>
<p>对需要启动的目标 activity 可以如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个 key 以便识别</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_KEY = <span class="string">"com.kniost.appname.activity_name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后定义一个获取专用的 Intent 的静态公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context context, Object data)</span> </span>&#123;</span><br><span class="line">	Intent intent = <span class="keyword">new</span> Intent(context, TargetActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	intent.putExtra(EXTRA_KEY, data);</span><br><span class="line">	<span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要的时候调用这个方法得到 Intent 并启动即可。</p>
<h2 id="1-3-获取-extra-信息"><a href="#1-3-获取-extra-信息" class="headerlink" title="1.3 获取 extra 信息"></a>1.3 获取 extra 信息</h2><p>activity 可以通过 getIntent().getExtra() 方法直接获取信息，然而真正需要信息的是 fragment。fragment 可不能用 intent 启动。</p>
<p>在 fragment 中有两种方法可以获取信息：</p>
<ul>
<li>一是从 activity 的 extra 中获取信息。这种方法比较简单，但是不推荐，因为它破怪了 fragment 的封装性，不利于解耦（在一个类中用到另一个类的变量），不便于复用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object data = (Object) getActivity().getIntent().getSerializable(EXTRA_KEY);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第二个就是比较好的做法，那就是将数据存放在 fragment 的 argument bundle 中，这样无需托管的 activity 的 intent 内指定 extra 的存在，fragment 本身就能获取自己所需的 extra 数据。</p>
<p>  和给一个 activity 传递 extra 信息类似，一般也会在目标fragment 中添加一个公有的静态方法 newInstance()，参数则是需要的 extra 信息</p>
</li>
</ul>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先也要定义一个 key 用于获取数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_EXTRA_KEY = <span class="string">"data_I_need"</span>;</span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TargetFragment <span class="title">newInstance</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">	Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">	args.putSerializable(ARG_EXTRA_KEY, data);</span><br><span class="line">	TargetFragment fragment = <span class="keyword">new</span> TargetFragment();</span><br><span class="line">	fragment.setArguments(args);</span><br><span class="line">	<span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

这样，在托管的 activity 中新建 TargetFragment 类的时候只要调用 TargetFragment.newInstance(Object data) 来获取实例即可。

在 fragment 里获取 argument 的方法比较简单，直接调用 getArguments().getX() 方法即可，其中 X 表示可以从 Bundle 中获取的类型，Serializable 是比较常用的传递复杂参数的方法。</code></pre><h1 id="2-刷新显示列表项"><a href="#2-刷新显示列表项" class="headerlink" title="2. 刷新显示列表项"></a>2. 刷新显示列表项</h1><p>由于书上的例子中使用的是单例，也就是说对于 Adapter 和 Fragment 来说使用的数据都是指向同一地址的，只要在某处修改了，所有使用该数据的地方实际都改变了。这样的话，修改数据之后只需要使用 RecyclerView.Adatper 的方法 notifyDataSetChanged() 即可刷新 RecyclerView 了。</p>
<h1 id="3-挑战练习：实现高效的-RecyclerView-刷新"><a href="#3-挑战练习：实现高效的-RecyclerView-刷新" class="headerlink" title="3. 挑战练习：实现高效的 RecyclerView 刷新"></a>3. 挑战练习：实现高效的 RecyclerView 刷新</h1><p>使用 notifyItemChanged(int position) 方法可以高效地刷新单个被修改的 ViewHolder。</p>
<p>对于本书的这个问题，有特殊的做法。因为这个 RecyclerView 和 fragment 是写在一个类中的，而且一次只会有一个 ViewHolder 被改变，所以可以通过读写同一个成员变量来判断修改的 item 的位置。 </p>
<p>以下是具体解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CrimeListFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> positionClicked;</span><br></pre></td></tr></table></figure>

<p>然后在 ViewHolder 的构造函数建立 Listener 的时候用 getAdapterPosition() 方法记录下被点击的 ViewHolder 的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">	Intent intent = CrimeActivity.newInent(getActivity(), mCrime.getId());</span><br><span class="line">	positionClicked = getAdapterPosition();</span><br><span class="line">	startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 updateUI() 函数中直接调用 mAdapter.notifyItemChanged(positionClicked);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">   mAdapter = <span class="keyword">new</span> CrimeAdapter(crimes);</span><br><span class="line">   mCrimeRecyclerView.setAdapter(mAdapter);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   mAdapter.notifyItemChanged(positionClicked);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（九）—— 第9章 使用 RecyclerView 显示列表</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%209%20%E4%BD%BF%E7%94%A8%20RecyclerView%20%E6%98%BE%E7%A4%BA%E5%88%97%E8%A1%A8-20161021.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲述了 RecyclerView 的基础使用，单例设计模式以及通过抽象的统一的 activity 来托管 fragment（以减少重复代码量）。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/42ccc8c20dbe84c17a53691ec2dc905ced4fdff9" target="_blank" rel="noopener">完成第九章</a></p>
</blockquote>
<h1 id="1-单例-SingleInstance"><a href="#1-单例-SingleInstance" class="headerlink" title="1. 单例(SingleInstance)"></a>1. 单例(SingleInstance)</h1><p>单例是特殊的 JAVA 类，在创建实例的时候，一个单例类仅允许创建一个实例。应用能在内存里多久，单例就能存在多久，因此将对象列表保存在单例里的话，就能随时获取到数据，而不用管 activity 和 fragment 的生命周期怎么变化。不过当应用被从内存里移除的时候，单例对象就不复存在了。</p>
<p>要创建单例，需要创建一个带有私有构造方法及 get() 方法的类，如果实例已经存在了，get() 方法就直接返回它，如果还不存在，就需要调用构造方法创建它。书上的代码是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeLab</span> </span>&#123;</span><br><span class="line">	<span class="comment">//下面这个静态对象只会创建一次</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CrimeLab sCrimeLab;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> List&lt;Crime&gt; mCrimes;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//程序的其他部分需要使用时，调用下列方法，当第一次使用的时候创建这个对象，如果不是第一次使用的时候就直接返回静态对象。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrimeLab <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (sCrimeLab == <span class="keyword">null</span>) &#123;</span><br><span class="line">			sCrimeLab = <span class="keyword">new</span> CrimeLab(context);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sCrimeLab;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//私有的构造方法，只在 get 方法中使用</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">CrimeLab</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		mCrimes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">//初始化数据的语句</span></span><br><span class="line">		………………</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//由于对象只创建了一次，故而数据只有一份</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Crime&gt; <span class="title">getCrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mCrimes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Crime <span class="title">getCrime</span><span class="params">(UUID id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Crime crime : mCrimes) &#123;</span><br><span class="line">			<span class="keyword">if</span> (crime.getId().equals(id)) &#123;</span><br><span class="line">				<span class="keyword">return</span> crime;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>单例能方便地控制模型层对象，由一个单例类来控制数据，所有的修改都由它处理，会使数据的一致性控制更加简便。</strong></p>
<p>但是万事总有缺点，</p>
<ul>
<li>首先，单例无法做到持久的存储，应用的内存被回收时，单例就不复存在了。</li>
<li>其次，单例还不利于单元测试。</li>
<li>最后，单例还容易被滥用，需要注意的是有充足的理由时才使用单例模式存储共享数据。</li>
</ul>
<h1 id="2-使用抽象-activity-托管-fragment"><a href="#2-使用抽象-activity-托管-fragment" class="headerlink" title="2. 使用抽象 activity 托管 fragment"></a>2. 使用抽象 activity 托管 fragment</h1><blockquote>
<p>由于书中大部分 FragmentActivity 的是类似的，所以可以直接创建一个抽象的类用于被继承，简化代码。</p>
</blockquote>
<p>回忆一下使用 fragment 的步骤：</p>
<ol>
<li>在托管的 activity 的 onCreate() 方法中新建一个 FragmentManager 对象（getSupportFragmentManager() 方法或者 getFragmentManager() 方法）。</li>
<li>使用该对象的 findFragmentById() 方法找到放置 fragment 的位置。</li>
<li>如果 fragment 没有建立，就新建一个 fragment 对象，并使用 FragmentManager 对象的 beginTransaction().add().commit() 的连续方法将 fragment 事务提交到队列中</li>
</ol>
<p>在这其中，只有新建 fragment 对象是与具体 fragment 有关的，那么我们可以将其写成一个抽象的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Fragment <span class="title">createFragment</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="3-RecyclerView-Adapter-和-ViewHolder"><a href="#3-RecyclerView-Adapter-和-ViewHolder" class="headerlink" title="3. RecyclerView, Adapter 和 ViewHolder"></a>3. RecyclerView, Adapter 和 ViewHolder</h1><blockquote>
<p>对于一个列表，之前有 ListView，网格有 GridView，但要实现更加复杂的布局和功能，比如瀑布流的时候，就有些力不从心了。RecyclerView 是 Google 推出 Android 5.0 时一并推出的控件，其具有强大的功能和高度的解耦，有助于开发者实现更加多变具有拓展能力的布局。</p>
</blockquote>
<h2 id="3-1-RecyclerView-简介及工作原理"><a href="#3-1-RecyclerView-简介及工作原理" class="headerlink" title="3.1 RecyclerView 简介及工作原理"></a>3.1 RecyclerView 简介及工作原理</h2><p>要使用 RecyclerView 显示视图，需要三样东西，即RecyclerView，Adapter， ViewHolder，它们的任务各不相同：</p>
<ul>
<li>RecyclerView 是视图层对象，负责回收和定位屏幕上的 ViewHolder</li>
<li>ViewHolder 只负责容纳 View 视图</li>
<li>Adapter 是控制器对象，负责创建必要的 ViewHolder，从模型层获取数据并与 ViewHolder 绑定，然后提供给 RecyclerView 显示</li>
</ul>
<p>RecyclerView 需要显示视图对象时，就会去找它的 Adapter，然后会有如下调用。</p>
<ol>
<li>首先，调用 Adapter 的 getItemCount() 方法，RecyclerView 询问数组列表中包含多少个对象。</li>
<li>接着，调用 Adapter 的 createViewHolder(ViewGroup, int) 方法创建 ViewHolder 以及 ViewHolder 要显示的视图。</li>
<li>最后，RecyclerView 会传入 ViewHolder 及其位置，调用 onBindViewHolder(ViewHolder, int) 方法。Adapter 会找到目标位置的数据并用数据填充到 ViewHolder 的视图上。</li>
</ol>
<p>过程图示如下：<br><img src="http://img.blog.csdn.net/20161109154759638" alt="这里写图片描述"></p>
<blockquote>
<p>需要注意的是，相对于 onBindViewHolder(ViewHolder, int) 方法，createViewHolder(ViewGroup, int) 方法的调用并不频繁。一旦创建了够用的 ViewHolder，RecyclerVIew 就会停止调用 createViewHolder() 方法，然后通过回收旧的 ViewHolder 来节约时间和内存。</p>
</blockquote>
<h2 id="3-2-使用-RecyclerView"><a href="#3-2-使用-RecyclerView" class="headerlink" title="3.2 使用 RecyclerView"></a>3.2 使用 RecyclerView</h2><p>介绍了 RecyclerView 的各种细节，我们来看看它具体怎么使用吧。</p>
<h3 id="3-2-1-添加-RecyclerView-依赖库"><a href="#3-2-1-添加-RecyclerView-依赖库" class="headerlink" title="3.2.1 添加 RecyclerView 依赖库"></a>3.2.1 添加 RecyclerView 依赖库</h3><p>在 File - Project Structure 菜单项，选择 app 模块，然后单击 Dependencies 选项页，单击加号，找到并添加 recyclerview-v7 支持库。</p>
<h3 id="3-2-2-在布局文件中使用-RecyclerView-并在-JAVA-代码中声明"><a href="#3-2-2-在布局文件中使用-RecyclerView-并在-JAVA-代码中声明" class="headerlink" title="3.2.2 在布局文件中使用 RecyclerView 并在 JAVA 代码中声明"></a>3.2.2 在布局文件中使用 RecyclerView 并在 JAVA 代码中声明</h3><p>示例 JAVA 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mCrimeRecyclerView = (RecyclerView) view.findViewById(R.id.crime_recycler_view);</span><br><span class="line">mCrimeRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</span><br></pre></td></tr></table></figure>

<p>RecyclerView 视图创建完成后，就立即转交给了 LayoutManager 对象。LayoutManager 实际上负责定位列表项和定义屏幕滚动行为，因此如果没有 LayoutManger 的支持，不仅 RecyclerView 无法工作，还会导致应用崩溃。在示例中使用的 LinearLayoutManager 是以竖直列表的方式展示列表项，内置的还有GridLayoutManager ，还有很多第三方的库可以使用。</p>
<h3 id="3-2-3-实现-Adapter-和-ViewHolder"><a href="#3-2-3-实现-Adapter-和-ViewHolder" class="headerlink" title="3.2.3 实现 Adapter 和 ViewHolder"></a>3.2.3 实现 Adapter 和 ViewHolder</h3><p>ViewHolder 需要做的事情很简单，就是将自定义的 view 中的组件找出来并绑定在这个 ViewHolder 的成员变量上。</p>
<p>比如定义了一个有标题和图片的 item，那么这个 Holder 可以这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> TextView mTitle;</span><br><span class="line">	<span class="keyword">public</span> ImageView mImg;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ItemHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(itemView);</span><br><span class="line"></span><br><span class="line">		mTitle = (TextView) itemView.findViewById(R.id.tv_item_title);</span><br><span class="line">		mImg = (ImageView) itemView.findViewById(R.id.iv_item_img);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有监听器的话，也可以写在构造函数中</p>
</blockquote>
<p>对于 Adapter 来说，要做的事就更多了，我来一一梳理：</p>
<ul>
<li><p><strong>从模型层获取数据</strong><br> 一般在 Adapter 内部声明一个数据模型的成员变量，在 Adapter 的构造函数中进行初始化</p>
</li>
<li><p><strong>重写 ViewHolder 这个父类的三个方法</strong></p>
<ul>
<li><p><code>onCreateViewHolder(ViewGroup parent, int viewType)</code><br>每当 RecyclerView 需要新的 View 视图来显示列表项的时候就会调用这个方法。在这其中，我们创建 View 视图，然后封装到 ViewHolder 中，此时并不需要向视图加载数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个典型的 onCreateViewHolder 方法的内部</span></span><br><span class="line">LayoutInflater layoutInflater = LayoutInflater.from(getActivity());</span><br><span class="line">View view = layoutInflater.inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ItemHolder(view);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>onBindViewHolder(ItemHolder holder, int position)</code><br>这个方法负责将 ViewHolder 的 View 视图和模型层的数据绑定起来。拿到 ViewHolder 和列表项在数据集中的索引位置后，我们通过索引位置找到要显示的数据进行绑定。绑定完毕后，刷新显示 View 视图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;典型的 onBindViewHolder 方法内部</span><br><span class="line">Data data &#x3D; mDataList.get(position); </span><br><span class="line">&#x2F;&#x2F; 注意上面的 mDataList 就是在 Adatper 的构造函数中初始化的 Adapter 的成员变量</span><br><span class="line">holder.mTitle.setText(data.getTitle(position));</span><br><span class="line">holder.mImg.setImageResource(data.getImgRes(position));</span><br></pre></td></tr></table></figure></li>
<li><p><code>getItemCount()</code><br>返回要展示的数据的数量，一般是数据集的 size</p>
</li>
</ul>
</li>
</ul>
<p>到此一个基本的 Adapter 就创建完了，在主程序中声明并初始化 Adapter，调用 RecyclerView 的 setAdapter 方法即可显示出列表了~</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（八）—— 第8章 使用布局与组件创建用户界面</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%208%20%E4%BD%BF%E7%94%A8%E5%B8%83%E5%B1%80%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2-20161021.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要介绍了一些进阶的界面设计知识，以及如何用图形化界面设计 UI （虽然不推荐日常使用，但是至少要知道，特别是在 Android Studio 2.2 推出之后，可以直接查看设计蓝图，更为直观并且容易调整细节）。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/e6f879af23dfa599f09292d35b6a884647db93e8" target="_blank" rel="noopener">完成第八章，未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/1c91e7688a9810dfb032b76bc4615ff8aa239816" target="_blank" rel="noopener">完成第八章的挑战</a></p>
</blockquote>
<h2 id="1-样式（style）-与-主题（theme）"><a href="#1-样式（style）-与-主题（theme）" class="headerlink" title="1. 样式（style） 与 主题（theme）"></a>1. 样式（style） 与 主题（theme）</h2><blockquote>
<p>为什么我们需要样式（style）？ 因为当界面有统一风格时，就不需要针对每一个控件单独写属性了，规定几种样式（style）即可。</p>
</blockquote>
<p>style 是 XML 资源文件，含有用来描述组件行为和外观的属性定义。例如，下面的样式能让其显示的文字大小大于一般的值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BigTextStyle"</span>&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:padding"</span>&gt;</span>3dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以在 res/values/ 目录下的样式文件中写入自己需要的属性定义，然后再布局文件中以 <code>@style/my_own_style(file name)</code> 的形式引用</p>
<blockquote>
<p>什么是主题（theme）呢？主题是各种样式的集合，从结构上来说，主体本身也是一种样式资源，不过它的属性指向了其他样式资源</p>
</blockquote>
<p> <em>主题属性引用</em> 顾名思义就是将预定义的应用主题样式添加给指定组件，比如给 TextView 控件定义下面的属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style="?android:listSeparatorTextViewStyle"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>意味着告诉 Android 运行资源管理器：“在应用主题里找到名为 listSeparatorTextViewStyle 的属性。该属性指向其他样式资源，请将其资源的值放在这里。”</p>
<h2 id="2-margin-与-padding"><a href="#2-margin-与-padding" class="headerlink" title="2. margin 与 padding"></a>2. margin 与 padding</h2><p>Android 布局文件中的 margin 和 padding 跟 Web 编程的一样，具体定义如下：</p>
<ul>
<li>margin 指的是外边距，即指定视图组件之间的距离</li>
<li>padding 指的是内边距，即指定视图外边框与其内容间的距离</li>
</ul>
<p>两者之间区别如下图：<br><img src="http://img.blog.csdn.net/20161027171304182" alt="margin 和 padding"></p>
<h2 id="3-dp、sp-及屏幕像素密度"><a href="#3-dp、sp-及屏幕像素密度" class="headerlink" title="3. dp、sp 及屏幕像素密度"></a>3. dp、sp 及屏幕像素密度</h2><p>Android 使用密度修饰 drawable 目录（如 drawable-xhdpi）下的图像文件会自动适配不同像素密度的屏幕。那么问题来了，加入图像完成了自动适配，但是边距无法缩放适配，或者用户配置了大于默认值的文字大小，会出现什么意外呢？</p>
<p>为了解决这些可能的问题，Android 提供了密度无关的尺寸单位（density-independent dimension unit）。使用这种单位，可在不同屏幕密度的设备上获得同样的尺寸。无需进行麻烦的转换计算，应用运行时，Android 会自动将这种单位转换成像素单位。</p>
<h3 id="1-dp-dip-density-independent-pixel-密度无关像素"><a href="#1-dp-dip-density-independent-pixel-密度无关像素" class="headerlink" title="1. dp (dip, density-independent pixel) 密度无关像素"></a>1. dp (dip, density-independent pixel) 密度无关像素</h3><p>所谓密度无关，即和屏幕的像素密度没有关系。1dp 单位在设备的屏幕上总是等于 1/160 英寸。使用 dp 的好处是，无论屏幕密度如何，总能获得同样的尺寸。</p>
<blockquote>
<p>px = dp * (dpi / 160)</p>
</blockquote>
<p>其中，dpi 即等于我们常说的 ppi，计算公式即为</p>
<blockquote>
<p>ppi = sqrt(屏幕横向像素数的平方 + 屏幕纵向像素数的平方）/ 屏幕对角线英寸数</p>
</blockquote>
<p>那么常见的 mdpi， hdpi 是什么呢？对应关系如下图：<br><img src="http://img.blog.csdn.net/20161107141648322" alt="ppi 对应尺寸"></p>
<p>也就是说 160ppi 像素密度的屏幕，又叫 mdpi 的屏幕，程序中写的 1dp 在上面呈现的就是 1 像素（pixel，px）。</p>
<h3 id="2-sp-scale-independent-pixel-缩放无关像素"><a href="#2-sp-scale-independent-pixel-缩放无关像素" class="headerlink" title="2. sp (scale-independent pixel) 缩放无关像素"></a>2. sp (scale-independent pixel) 缩放无关像素</h3><p>这种像素也与屏幕无关，但是与设置有关，一般用来设置文本的大小。</p>
<h2 id="4-android-layout-weight-属性"><a href="#4-android-layout-weight-属性" class="headerlink" title="4. android:layout_weight 属性"></a>4. android:layout_weight 属性</h2><p>在 LinearLayout 中，有这样一个特殊属性，它能让你自由分配摆放部件后的空间，避免大量留白。它就是 android:layout_weight，这里的 weight 是权重的意思，也就是说，每个部件都有自己的权重，用于分配摆放部件后<strong>剩余的空间</strong>。也就是说，如果两个部件权重都是 1 时，它们平分摆放它们之后的剩余空间。</p>
<p>但是这样就会出现一个问题，由于分配的是剩余的空间，所以在两个部件 layout_width 属性不一致（wrap_content 不算一致）时，layout_weight 属性不能使部件平分整块屏幕。如果想要平分怎么办呢？把两个部件的 layout_width 都设为 0dp 再保持其 weight 相等，也就是把整块屏幕都当做剩余空间，就能平分整块屏幕了。</p>
<h2 id="5-挑战练习：日期格式化"><a href="#5-挑战练习：日期格式化" class="headerlink" title="5. 挑战练习：日期格式化"></a>5. 挑战练习：日期格式化</h2><p>我使用的是 SimpleDateFormat 类，它能通过字符串来直接格式化 Date 类型的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"EEEE, MMM d, y"</span>, Locale.US);</span><br><span class="line">mDateButton = (Button) v.findViewById(R.id.crime_date);      mDateButton.setText(sdf.format(mCrime.getDate()));</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（七）—— 第7章 UI fragment 与 fragment 管理器</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%207%20UI%20fragment%20%E4%B8%8E%20fragment%20%E7%AE%A1%E7%90%86%E5%99%A8-20161021.html</url>
    <content><![CDATA[<blockquote>
<p>本章介绍了 fragment 的来由，activity 与 fragment 的关系，及其基础使用</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/0917ea242f26e72902e574860432fa7eb0bfaff8" target="_blank" rel="noopener">完成第七章</a></p>
</blockquote>
<h1 id="1-为何要使用-fragment"><a href="#1-为何要使用-fragment" class="headerlink" title="1. 为何要使用 fragment ?"></a>1. 为何要使用 fragment ?</h1><p>使用 fragment 而不是 activity 来管理应用UI，可以绕开 Android 系统 activity 使用规则的限制。</p>
<blockquote>
<p>fragment 是一种控制器对象， activity 可委派它完成一些任务，通常是管理 UI，可以是一整屏也可以是一部分， 管理 UI 的 fragment 又叫 UI fragment。它自己也有产生于布局文件的视图。 fragment 视图包含了用户可以交互的可视化 UI 元素。</p>
</blockquote>
<p>利用 fragment，可以轻松实现选择不同的列表项就显示对应的明细视图， activity 用一个明细 fragment 替换另一个明细 fragment， 这样就可以避免销毁 activity 了。</p>
<ul>
<li>在 Android Studio 的 Project Structure 中设置依赖项，即 Fragment 和 FragmentActivity</li>
</ul>
<blockquote>
<p>build.gradle 文件中依赖项字符串使用了 <a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a> 坐标模式：groupId:artifactId:version。 groupId 是类库的基础包名，artifactId 是包中的特定库名，其中 *-vX 指所支持的最低 API 级别，比如 appcompat-v7 就是说此兼容库可以应用到 Android API 7 及以上级别的设备上。</p>
</blockquote>
<h1 id="2-fragment-的生命周期"><a href="#2-fragment-的生命周期" class="headerlink" title="2. fragment 的生命周期"></a>2. fragment 的生命周期</h1><p><img src="http://img.blog.csdn.net/20161026113629866" alt="fragment 的生命周期"></p>
<p>可以看出，fragment 的生命周期在许多地方对应着 activity 的生命周期方法，<strong>因为 fragment 的生命周期方法是由托管的 activity 调用的，而非像 activity 一样是由操作系统调用，fragment 仅仅是 activity 的内部事务</strong></p>
<blockquote>
<h3 id="fragment-的生命周期方法与-activity-的异同"><a href="#fragment-的生命周期方法与-activity-的异同" class="headerlink" title="fragment 的生命周期方法与 activity 的异同"></a><strong>fragment 的生命周期方法与 activity 的异同</strong></h3><ul>
<li><code>Fragment.onCreate(Bundle)</code> 是 public 的，而 <code>Activity.onCreate(Bundle)</code>则是 protected 的，因为前者是被 activity 调用，而后者是被系统调用。</li>
<li>fragment 仍然有类似的 <code>onSaveInstanceState(Bundle)</code> 函数用于保存状态</li>
<li>fragment 的视图建立不是在 <code>onCreate(…)</code> 中完成，而是在 <code>onCreateView(…)</code> 中完成（如下）。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span></span></span><br></pre></td></tr></table></figure>
<p>该方法实例化 fragment 视图的布局，然后将实例化的 View 返回给托管的 activity。 LayoutInflater 及 ViewGroup 是实例化布局的必要参数。Bundle 用来存储恢复数据，可供该方法从保存状态下重建视图。</p>
<h2 id="3-管理-fragment-的-FragmentManager-类"><a href="#3-管理-fragment-的-FragmentManager-类" class="headerlink" title="3. 管理 fragment 的 FragmentManager 类"></a>3. 管理 fragment 的 FragmentManager 类</h2><blockquote>
<p>activity 通过 FragmentManager 类管理 fragment 的队列和事务回退栈。</p>
</blockquote>
<h2 id="3-1-FragmentManager-的获取"><a href="#3-1-FragmentManager-的获取" class="headerlink" title="3.1 FragmentManager 的获取"></a>3.1 FragmentManager 的获取</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 support 依赖包的情况下，用下面语句</span></span><br><span class="line">FragmentManager fm = getSupportFragmentManager();</span><br><span class="line"><span class="comment">//如果使用系统原生的 Fragment 类，即不考虑向后兼容时，使用：</span></span><br><span class="line">FragmentManager fm = getFragmentManager();</span><br></pre></td></tr></table></figure>

<h2 id="3-2-获取-fragment-并交由-FragmentManager-处理"><a href="#3-2-获取-fragment-并交由-FragmentManager-处理" class="headerlink" title="3.2 获取 fragment 并交由 FragmentManager 处理"></a>3.2 获取 fragment 并交由 FragmentManager 处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Fragment fragment = fm.findFragmentById(R.id.fragment_container);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">	fragment = <span class="keyword">new</span> CrimeFragment();</span><br><span class="line">	<span class="comment">//下列代码创建、添加并提交了一个 fragment 事务</span></span><br><span class="line">	fm.beginTransaction()</span><br><span class="line">		.add(R.id.fragment_container, fragment)</span><br><span class="line">		.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>fragment 事务用来添加、移除、附加、分离或者替换 fragment 队列中的 fragment。 这是使用 fragment 在运行时组装和重新组装 UI 的关键。 Fragment Manager 管理着 fragment 事务回退栈。</p>
</blockquote>
<p>在上述代码中， FragmentManager.beginTransaction() 方法创建并返回 FragmentTransaction 实例，然后加入 FragmentTransaction 队列。add(…) 方法是整个事务的核心，它含有两个参数：容器视图资源 ID 和新创建的 CrimeFragment 。</p>
<p><strong>容器视图资源 ID 的作用是</strong>：</p>
<ul>
<li>告诉FragmentManager， fragment 视图应该出现在 activity 视图的什么位置。</li>
<li>用作 FragmentManager 队列中 fragment 的唯一标识符。</li>
</ul>
<p>如果要从 FragmentManager 中获取 CrimeFragment，直接使用容器视图资源 ID 即可（即上面代码的第一句）。初始时 FragmentManager 队列为空，故而需要下面的语句用于创建提交 fragment 至队列中，如果是恢复性地调用（如 activity 被销毁），则直接引用即可。</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（六）—— 第6章 Android SDK 版本与兼容</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%206%20Android%20%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9-20161020.html</url>
    <content><![CDATA[<blockquote>
<p>Android 开发的部分难度来源于系统版本的破碎分离。与 iOS 的极速占有不同，Android 手机的系统更新较慢，Android 的各大厂商各自为政，为了与友商形成差异化，对 AOSP 的修改各不相同；又因为产品线较多，开发难度增强，故而很多设备得不到更新的系统，有的只能依赖移植，大名鼎鼎的 CyanogenMod 的崛起即来源于此。</p>
<p>本章无代码</p>
</blockquote>
<a id="more"></a>
<p>问题就在于如何使自己的应用能够更多地兼容设备呢？</p>
<ul>
<li><p>选择最小的 SDK 版本时，应该选择份额较大的，比如 15~19</p>
</li>
<li><p>使用较新 API 带来的东西时，使用引入兼容库的方法，而非直接使用原生 API</p>
</li>
<li><p>在写代码时，如果不加以检查地直接使用minSdk版本不能使用的 API， Android Lint 会给出版本警告，此时不要忽略，尽量加入版本检查或者提高最低支持版本</p>
</li>
</ul>
<blockquote>
<p>直接在程序中查询设备的 SDK 版本，使用 <code>Build.VERSION.SDK_INT</code></p>
</blockquote>
<blockquote>
</blockquote>
<p>Google 官方有一个 <a href="https://developer.android.com/about/dashboards/index.html" target="_blank" rel="noopener">Android 各版本份额实时报告</a> ，可以实时查看各版本所占比例</p>
<p>下图是截至2016年10月20日，Android Studio 显示 Android 各 API 版本支持设备的比例：</p>
<p><img src="http://img.blog.csdn.net/20161020170131167" alt="Android 各 API 版本支持设备的比例"></p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（五）—— 第5章 第二个 Activity</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%205%20%E7%AC%AC%E4%BA%8C%E4%B8%AA%20Activity-20161007.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讲述了如何新建一个 Acitivity ，并在两个 Activity 之间传递数据，最后挑战练习是如何在重建 Activity 时保留数据。</p>
<p>GitHub 地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/0124102dcf27020a51341eaf48ac870b315e7bd4" target="_blank" rel="noopener">第五章未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/2c1de49585be793c2395635bcc0ce55e40cd1ac9" target="_blank" rel="noopener">第五章完成挑战问题1，2</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/1bf8869969409edd10ac1566446fb9a04a03dd2b" target="_blank" rel="noopener">第五章完成所有挑战问题</a></p>
</blockquote>
<a id="more"></a>
<h1 id="1-新建一个-Activity"><a href="#1-新建一个-Activity" class="headerlink" title="1. 新建一个 Activity"></a>1. 新建一个 Activity</h1><p>最好的方法是使用 Android Studio 自带的创建方法，若要手动创建，一定要有三个环环相扣的地方需要建立：</p>
<ul>
<li>一个 JAVA 类：即 Activity 类， 可以视需求继承 Activity 或者其他的衍生类</li>
<li>一个布局文件：对于任意一个 Activity 来说，都需要加载一个布局文件，在 res/layout 文件夹下新建一个布局文件，并在代码中使用 setContentView() 方法加载布局</li>
<li>★★★★★ <strong>一定要在 AndroidManifest.xml 中声明新的 Activity!</strong></li>
</ul>
<h1 id="2-启动Activity"><a href="#2-启动Activity" class="headerlink" title="2. 启动Activity"></a>2. 启动Activity</h1><p>Activity 类中的一个函数 <code>public void startActivity(Intent intent)</code>， 调用该方法时，启动 Activity 的请求直接发给了操作系统的 ActivityManager。ActivityManager 负责创建 Activity 实例并调用其 onCreate()方法。示意图如下：</p>
<p><img src="http://img.blog.csdn.net/20161021101552925" alt="基于 Intent 的交互"></p>
<blockquote>
<p>###基于Intent的通信<br>Intent 对象是 component 用来与操作系统通信的一种媒介工具。Intent 类提供了多种构造方法以满足不同的使用需求， 这章使用的就是最简单的启动一个新的 Activity 的构造方法。</p>
</blockquote>
<blockquote>
<p>component 就是四大组件：Activity, Service, Broadcast Receiver, Content Provider</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Intent</span><span class="params">(Context packageContext, Class&lt;?&gt; cls)</span></span></span><br><span class="line"><span class="function"><span class="comment">//Class 对象必须已经在 AndroidManifest.xml 中声明才可以使用，否则将抛出 ActivityNotFoundException</span></span></span><br></pre></td></tr></table></figure>

<h1 id="3-Activity-间的数据传递"><a href="#3-Activity-间的数据传递" class="headerlink" title="3. Activity 间的数据传递"></a>3. Activity 间的数据传递</h1><h2 id="3-1-使用-Intent-Extra"><a href="#3-1-使用-Intent-Extra" class="headerlink" title="3.1 使用 Intent Extra"></a>3.1 使用 Intent Extra</h2><p>在使用 Intent 对象启动另一个 Activitiy 的时候使用了其构造方法，如果要让另一个 Activity 知道前一个 component 需要展示什么（比如用户到底点击了哪个按钮随之要展示什么详情），就需要在 Intent 中说明。使用 Intent 对象方法<code>public Intent putExtra(String name, &lt;Type&gt; data)</code> 将数据存到 Intent 对象内部，然后给操作系统。</p>
<p>这整个过程有点像送信：</p>
<ul>
<li>一个 component 应该先准备一个信封（Intent），在信封上写好发件人和收件人（显式 Intent 的构造方法）。</li>
<li>接着写信（Intent Extra），装到信封里（Intent），用 startActivity() 方法把信投递给操作系统的 ActivityManager。</li>
<li>ActivityManager 看到收件人的地址，去找到收件人，敲他家的门（调用其 onCreate() 方法），然后把信给他。</li>
</ul>
<p>这样，一个 Activity 就被启动了。</p>
<blockquote>
<p>一般来说，我们会在一个 Activity 中写入自己的启动方法或者一个『用于获取启动本 Activity 的 Intent 对象』的方法，因为这样的话，其他 component 在启动时能够清楚地知道需要什么参数。比如可以写一个 <code>public static void actionStart(Context, Extra)</code>函数，传入参数是本 Activity 的上下文，和需要传递的额外信息，这样别的 component 在启动时，只需要调用该静态方法即可。</p>
</blockquote>
<h2 id="3-2-从子-Activity-获取返回结果"><a href="#3-2-从子-Activity-获取返回结果" class="headerlink" title="3.2 从子 Activity 获取返回结果"></a>3.2 从子 Activity 获取返回结果</h2><p>还是用送信来类比，如果一封信被另一个 Activity 收到了，他拆了信看完以后就丢弃了，并不会回信。那么如果发信者想要收信者回信，需要先跟 ActivityManager 说好，而且还要约定一个暗号，以便回信时不会弄错，然后 ActivityManager 再投递信，敲门并告诉另一个 Activity 应该回信。</p>
<p>也就是说，如果启动另一个 Activity 并希望其在退出时返回结果，那么应该使用下面的方法，即先跟 ActivityManager 说好，暗号就是 requestCode 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode)</span></span></span><br><span class="line"><span class="function">``` </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">自己也要做好准备接受消息，即重写方法 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span></span><br></pre></td></tr></table></figure>

<p>这个多出来的 resultCode 顾名思义，就是结果的正确与否，一般会使用 Activity.RESULT_OK 或者 Activity.RESULT_CANCELED 来标志， 或者自定义常量 Activity.RESULT_FIRST_USER 以便根据 Activity 返回结果来做出不同操作。如果下一个 Activity 不设置结果的话（也就是不回信），用户退出该 Activity 时会默认返回 RESULT_CANCELED。</p>
<p>而回信的人只需要写信即可，直接使用 Activity 的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(<span class="keyword">int</span> requestCode, Intent data)</span></span></span><br><span class="line"><span class="function"><span class="comment">//或者</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(<span class="keyword">int</span> requestCode)</span></span></span><br></pre></td></tr></table></figure>
<p>回传的数据也是使用 Intent 封装的。</p>
<h2 id="3-3-最后大概总结一下这个过程："><a href="#3-3-最后大概总结一下这个过程：" class="headerlink" title="3.3 最后大概总结一下这个过程："></a>3.3 <strong>最后大概总结一下这个过程</strong>：</h2><ul>
<li><p>如果需要在启动另一个 Activity 时传递数据，就使用 Intent 的 putExtra() 方法</p>
</li>
<li><p>如果还需要返回结果，就要使用 startActivityForResult() 函数， 需要事先规定好 requestCode</p>
</li>
<li><p>同时父 Activity 需要重写 onActivityResult() 函数，对返回的结果进行处理</p>
</li>
<li><p>子 Activity 若要回传数据，调用 setResult() 方法将数据放入即可。</p>
</li>
</ul>
<blockquote>
<p>注： SharedPreferences 有时也能起到传递信息的作用，但是一般只用来保存基本类型的数据，所以作用有限，就像把东西放在一个共有的环境里，大家都知道那里有东西，谁需要都可以去取。</p>
</blockquote>
<h1 id="4-Activity-的使用与管理"><a href="#4-Activity-的使用与管理" class="headerlink" title="4.  Activity 的使用与管理"></a>4.  Activity 的使用与管理</h1><p>对于一个应用来说，启动时系统只是先启动了其中的一个 Activity，这个 Activity 理应已经在 AndroidManifest.xml 文件中声明为 Launcher Activity。</p>
<p>对于所有应用，其 Activity 共享同一个『回退栈』。如果没有重写 onBackPressed() 函数的话，按下返回键就将当前 Activity 弹出栈顶，或者自己调用了 Activity.finish() 函数时也同样会弹出栈顶。</p>
<h1 id="5-章末挑战"><a href="#5-章末挑战" class="headerlink" title="5. 章末挑战"></a>5. 章末挑战</h1><ol>
<li><p>用户作弊后，可以旋转 CheatActivity 来清除作弊痕迹。</p>
<blockquote>
<p>这个问题比较好处理，问题原因是由于旋转时需使用新的布局文件，重新调用了 onCreate() 方法，从而导致作弊痕迹丢失。那么重写 onSaveInstanceState() 方法，将其保存，在 onCreate() 中对数据进行恢复即可。</p>
</blockquote>
</li>
<li><p>作弊返回后， 用户可以旋转 QuizActivity 来清除 mIsCheater 变量值。</p>
<blockquote>
<p>同上</p>
</blockquote>
</li>
<li><p>用户可以不断单击NEXT按钮，跳到偷看过答案的问题，从而使作弊记录丢失。</p>
<blockquote>
<p>由于每道题有每道题的作弊记录，所以我的思路是采用一个 boolean 数组记录作弊情况，并且这个数组也应该在旋转的时候进行保存，在应用启动期间长期存在即可。如果有长期保存的需求，就要用到 SharedPreferences 或者数据库了。</p>
</blockquote>
</li>
</ol>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（四）—— 第4章 Android 应用的调试</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%204%20Android%20%E5%BA%94%E7%94%A8%E7%9A%84%E8%B0%83%E8%AF%95-20161007.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要说明了如何调 bug，有 LogCat 法、Lint 法以及断点调试法。</p>
<p><del>本章无新增代码</del></p>
</blockquote>
<a id="more"></a>
<h1 id="1-LogCat-大法"><a href="#1-LogCat-大法" class="headerlink" title="1. LogCat 大法"></a>1. LogCat 大法</h1><p>将代码中的一句关联控件语句（即 findViewById() 语句）注释掉之后运行程序将会出现下列错误：</p>
<p><img src="http://pic.kniost.top/logcat-20181125.jpg-highqual" alt="logcat-20181125"></p>
<p>从图中可以看到是错误由 NullPointerException 引起，并且在 Caused… 那一行下方标明了具体出错的位置，此时如果下面出现自己的代码（如图中紫色字的 QuizActivity.java），基本上可以直接定位错误从而修改代码。其他的运行时错误也是用类似的方法修改。</p>
<p><strong>另外可以在关键的方法里写 Log，这样使用 Log filter 查看调试日志就会非常方便。</strong></p>
<h1 id="2-Android-Lint-大法"><a href="#2-Android-Lint-大法" class="headerlink" title="2. Android Lint 大法"></a>2. Android Lint 大法</h1><p>Android Lint 是 Android 应用代码的静态分析器(static analyzer)。它是无需代码运行就能够检查代码错误的特殊程序。凭着对Android框架知识的掌握，Android Lint 深入检查代码，找出编译器无法发现的问题。在大多数情况下，Android Lint 检查出的问题都值得关注。</p>
<p>Android Lint 还能够检查定义在 XML 文件中的对象类型与控件对象的匹配。如果使用了错误的资源 ID，代码运行时，会导致类型转换出现错误。显然，Java编译器无法检查到该错误，但Android Lint却可以捕获到该错误。</p>
<p>假如想主动查看项目中的所有潜在问题，可以选择Analyze → Inspect Code…菜单项手动运行 Lint。在被问及检查项目的哪部分时，选择Whole project。Android Studio 会立即运行 Lint 和其他 一些静态分析器开始分析代码。</p>
<p>检查完毕后,所有的潜在问题会按类别列出，展开Android Lint 类别即可看到项目的具体Lint信息。</p>
<h1 id="3-断点大法"><a href="#3-断点大法" class="headerlink" title="3. 断点大法"></a>3. 断点大法</h1><p>顾名思义……程序员基本素养，不赘述了。<br>补充一点，那就是在 debug 模式下可以直接把某个变量放到 WatchWindow 中进行实时观察，非常好用~</p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（三）—— 第3章 日志跟踪理解 Activity 生命周期</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%203%20%E6%97%A5%E5%BF%97%E8%B7%9F%E8%B8%AA%E7%90%86%E8%A7%A3%20Activity%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-20161006.html</url>
    <content><![CDATA[<blockquote>
<p>本章主要讨论了 Activity 的生命周期，用 Log 工具来观察它，以及如何在设备配置改变时保存之前的状态</p>
</blockquote>
<blockquote>
<p>GitHub地址：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/d6a3dfd1e087e5484e6c7dc022f76799ac12cc7d" target="_blank" rel="noopener">GeoQuiz 第三章</a></p>
</blockquote>
<a id="more"></a>
<h1 id="1-Activity-的生命周期"><a href="#1-Activity-的生命周期" class="headerlink" title="1. Activity 的生命周期"></a>1. Activity 的生命周期</h1><img src="http://img.blog.csdn.net/20161007150307614" width="20%" alt= "Activity 生命周期" align=center />


<p>在设备运行中，设备配置（如屏幕方向、屏幕密度、屏幕尺寸、语言、键盘类型等）发生改变时，Android 需要自动完成最佳匹配资源的调用， 某些时候（如屏幕旋转时）它必须通过新建一个 Activity 来实现，所以需要重新调用 onCreate() 方法，从而设备配置改变前对 Activity 的更改将消失。</p>
<p><strong>如何在设备配置改变发生时保存数据，在之后返回到改变前的状态呢？</strong></p>
<p>就是通过复写 onSaveInstanceState() 方法保存需要保留的数据，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">	Log.i(TAG, <span class="string">"onSaveInstanceState"</span>);</span><br><span class="line">	outState.putInt(KEY_INDEX,mCurrentIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 onCreate() 方法中加入对 savedInstanceState 这个 Bundle 变量的非空判定然后获取其中的数据对 Activity 的数据进行赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>）&#123;</span><br><span class="line">	mCurrentIndex = savedInstanceState.getInt(KEY_INDEX, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个完整的包含暂存状态的 Acitvity 生命周期图示如下：</p>
<img src="http://img.blog.csdn.net/20161007153711019" width="40%" alt="完整的 Activity 生命周期" />

<h1 id="2-Log-工具"><a href="#2-Log-工具" class="headerlink" title="2. Log 工具"></a>2. Log 工具</h1><p>使用 Log 方式跟踪程序是一个比较好的习惯，而不是使用 <code>System.out.println()</code></p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（二）—— 第2章 Android 与 MVC 设计模式</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%202%20Android%20%E4%B8%8E%20MVC%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-20161006.html</url>
    <content><![CDATA[<blockquote>
<p>本章扩展了 GeoQuiz 程序，并介绍了 MVC 设计模式</p>
<p>GitHub 地址 ：<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/ac96c63ab29527f5e4e50764a7d6fa91800c3067" target="_blank" rel="noopener">GeoQuiz 第二章未完成挑战</a><br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/8e1d5c0d84cd013b655a671736c664409583a03c" target="_blank" rel="noopener">GeoQuiz 完成第二章所有挑战</a></p>
</blockquote>
<a id="more"></a>
<p>#1. MVC 设计模式<br>Android 应用基于模型-控制器-视图(Model - View - Controller, MVC)的架构模式进行设计。MVC 设计模式表明：应用的任何对象，归根结底都属于模型对象、视图对象以及控制对象中的一种。</p>
<ul>
<li><strong>模型对象存储着应用的数据和业务逻辑</strong>。<br>模型类通常用来映射与应用相关的一些事物，如 用户、商店里的商品、服务器上的图片或者一段电视节目；又或是 GeoQuiz 应用里的地理知识问题。<br>模型对象不关心用户界面，它存在的唯一目的就是存储和管理应用数据。</li>
</ul>
<p>** Android 应用里的模型类通常就是我们创建的定制类。应用的全部模型对象组成了模型层。**</p>
<ul>
<li><p><strong>视图对象知道如何在屏幕上绘制自己以及如何响应用户的输入，如用户的触摸等</strong>。<br>一个简单的经验法则是，凡是能够在屏幕上看见的对象，就是视图对象。Android 默认自带了很多可配置的视图类。当然，也可以定制开发自己的视图类。应用的 全部视图对象组成了视图层。 </p>
</li>
<li><p><strong>控制对象含有应用的逻辑单元，是视图与模型对象的联系纽带</strong>。<br>控制对象响应视图对象 触发的各类事件，此外还管理着模型对象与视图间的数据流动。 在 Android 的世界里，控制器通常是 Activity 、Fragment 或 Service 的一个子类。</p>
</li>
</ul>
<blockquote>
<p><img src="http://img.blog.csdn.net/20161007143005576" alt="MVC 模式图"></p>
</blockquote>
<blockquote>
<p>上图展示了在响应用户单击按钮等事件时，对象间的交互控制数据流。<em>注意，模型对象与 视图对象不直接交互。控制器作为它们之间的联系纽带，接收对象发送的消息，然后向其他对象发送操作指令。</em></p>
</blockquote>
<p>随着应用功能的持续扩展，应用往往会变得过于复杂而让人难以理解。把 Java 类以模型、视图和控制层进行分类组织，也有助于我们设计和理解应用。这样，我们就可以按层而非一个个类来考虑设计开发了。</p>
<p>使用 MVC 模式还可以让类的复用更加容易。相比功能多而全的类，功能单一的专用类更加有利于代码复用。</p>
<p>尽管 GeoQuiz 应用不复杂，但以 MVC 分层模式设计它的好处还是显而易见的。举例来说，模型类 Question 与用作显示问题的组件毫无代码逻辑关联。这样，就很容易在应用里按需使用 Question 类。假设现在想显示所有地理知识问题列表，很简单，直接复用 Question 对象逐条显示就可以了。</p>
<p>#2. 具体实现</p>
<ul>
<li>GeoQuiz 的模型层由 Question 类组成。</li>
<li>GeoQuiz 应用的视图层是由 activity_quiz.xml 文件中定义的各类组件构成的。</li>
<li>GeoQuiz 应用的控制层仅由 QuizActivity 类组成。</li>
</ul>
<p>构建模型层 Question 类，成员有文本的资源 ID 变量 mTextResId 和标记问题答案是否正确的 mAnswerTrue 变量。重写构造方法，添加了两个成员变量的 Getter 与 Setter 函数。</p>
<blockquote>
<p>Tip: <strong>如何在 Android Studio 中优雅地生成 Getter 和 Setter</strong><br>使用快捷键 Cmd + N</p>
</blockquote>
<ul>
<li>修改视图层，增加 Next 按钮。</li>
</ul>
<p>修改控制层，增加题目库 mQuestionBank 数组、 updateQuestion() 函数与 checkAnswer() 函数。并完成实现逻辑</p>
<p>添加箭头的图标资源放在 Next 按钮右侧。</p>
<p>#3. 挑战</p>
<p>本章挑战的难度较低，难点主要在于添加 Prev 按钮时要注意数组越界的问题。可以有以下几种实现：</p>
<ul>
<li>单独拎出越界的情况</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mCurrentIndex == <span class="number">0</span>) &#123;</span><br><span class="line">	mCurrentIndex = mQuestionBank.length - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	mCurrentIndex = mCurrentIndex - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">updateQuestion();</span><br></pre></td></tr></table></figure>

<ul>
<li>直接避免越界情况</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mCurrentIndex = (mCurrentIndex + mQuestionBank.length - <span class="number">1</span>) % mQuestionBank.length;</span><br></pre></td></tr></table></figure>

<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记（一）——第1章 Android开发初体验</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%201%20Android%20%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C-20161006.html</url>
    <content><![CDATA[<blockquote>
<p>此章是 Android 开发的基础内容，只有几个开发时的基本点需要注意</p>
<p>GitHub 链接:<br><a href="https://github.com/kniost/Android-Programming-Big-Nerd-Ranch-Guide-2nd/commit/5c5aed21dd8878fec7b2eb8c42ed72688c080a15" target="_blank" rel="noopener"> GeoQuiz 第1章</a></p>
</blockquote>
<a id="more"></a>
<h1 id="1-变量名命名规范"><a href="#1-变量名命名规范" class="headerlink" title="1. 变量名命名规范"></a>1. 变量名命名规范</h1><ul>
<li>建议子类名使用 Activity 后缀，如 QuizActivity.java</li>
<li>布局的命名规则是将 Activity 名称的单词顺序颠倒过来并全部转换为小写字母，然后在单词之间添加下划线，如 activity_quiz.xml</li>
<li><a href="http://www.cnblogs.com/wengfumin/articles/2337095.html" target="_blank" rel="noopener">包、类、变量、方法、数组等的命名规范</a></li>
</ul>
<h1 id="2-字符串资源"><a href="#2-字符串资源" class="headerlink" title="2. 字符串资源"></a>2. 字符串资源</h1><p>尽量使用字符串文件，而非写死字符串，以便于统一修改和语言版本转换</p>
<h1 id="3-Android-Studio-快捷键"><a href="#3-Android-Studio-快捷键" class="headerlink" title="3. Android Studio 快捷键"></a>3. Android Studio 快捷键</h1><ul>
<li>Option + Return (Alt + Enter) 组合键可以自动导入</li>
</ul>
<h1 id="4-引用组件"><a href="#4-引用组件" class="headerlink" title="4. 引用组件"></a>4. 引用组件</h1><p>引用组件使用以下方法，而且需要将返回的 View 对象转型（cast）为目标对象<br>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mTrueButton = (Button) findViewById(R.id.true_button);</span><br></pre></td></tr></table></figure>
<h1 id="5-监听器的设置（使用匿名内部类）"><a href="#5-监听器的设置（使用匿名内部类）" class="headerlink" title="5. 监听器的设置（使用匿名内部类）"></a>5. 监听器的设置（使用匿名内部类）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mTrueButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Do whatever you want</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用匿名内部类实现监听器有两个好处：代码更加清晰可读和避免不必要的命名类实现</p>
<h2 id="6-Android-编译过程"><a href="#6-Android-编译过程" class="headerlink" title="6.Android 编译过程"></a>6.Android 编译过程</h2><p> <img src="http://img.blog.csdn.net/20161007140508683" alt="Android 编译过程"></p>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android编程权威指南（第二版）学习笔记及代码（〇）——前言</title>
    <url>/Android%20%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/Chapter%200%20%E5%89%8D%E8%A8%80-20160724.html</url>
    <content><![CDATA[<p>如果让我向Android开发新手推荐一本书，我不会推荐郭神的《第一行代码》，而是这本《Android Programming : The Big Nerd Ranch Guide(2nd Edition)》，中文名为《Android编程权威指南（第二版）》，<em>（注意不要和清华大学出版社的《Android开发权威指南》相混淆）</em>。</p>
<a id="more"></a>
<blockquote>
<p>已经出到第三版了哈哈哈</p>
</blockquote>
<p>受益于出版时间较晚，且已经迭代了一个版本，它面向更新的API，基于较新的 Android Studio，通过8个 App 将 Android 的知识讲得清楚明白，不会像郭神的代码那样出现各种各样的没有说明的地方。其延伸阅读的地方也十分精彩，值得细细研究。</p>
<p>我同意最好的文档还是官方文档，不过我认为新手不适合直接阅读官方文档，就像把一个不会游泳的人直接扔进远离海岸的海里，可能扑腾几下就淹死了，而因此直接学会游泳的一定是少数的肌肉强壮有天赋的大神吧。</p>
<p>本学习笔记只是将看书时容易遗漏的重要知识点记录下来并加以阐述，书上已经有的内容不再赘述。如果要看本笔记的话，需要先看一遍书上的相应章节。</p>
<hr>
<blockquote>
<p>此学习笔记基于《Android Programming : The Big Nerd Ranch Guide(2nd Edition)》</p>
</blockquote>
<hr>
<p>GitHub Page: <a href="http://kniost.github.io" target="_blank" rel="noopener">kniost.github.io</a><br>简书：<a href="http://www.jianshu.com/u/723da691aa42" target="_blank" rel="noopener">http://www.jianshu.com/u/723da691aa42</a></p>
]]></content>
      <categories>
        <category>Android编程权威指南学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 的常见使用入门</title>
    <url>/Git%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8-20160724.html</url>
    <content><![CDATA[<h2 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"mail@mail.com"</span></span><br></pre></td></tr></table></figure>
<p>其中<code>--global</code>参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<a id="more"></a>

<h2 id="创建本地版本库"><a href="#创建本地版本库" class="headerlink" title="创建本地版本库"></a>创建本地版本库</h2><p>首先进入你想进行版本控制的文件夹，即令其成为工作目录，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p>即可将这个目录变成Git可以管理的仓库，可以发现当前目录下多了一个隐藏的目录<code>.git</code>，这个目录是Git来跟踪管理版本库的，一般来说不需要手动修改这个目录里面的文件，否则可能造成破坏。</p>
<h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><p>把一个文件放到Git仓库只需要两步。</p>
<ul>
<li>第一步，用命令git add告诉Git，把文件添加到仓库：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add readme.md</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加所有更改的命令是<code>git add .</code></p>
</blockquote>
<p>执行上面的命令，没有任何显示，说明添加成功。可以添加完所有自己想提交的文件后再进行下一步</p>
<ul>
<li>第二步，用命令git commit告诉Git，把文件提交到仓库：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"wrote a readme markdown file"</span></span><br></pre></td></tr></table></figure>
<p>对于<code>git commit</code>命令，-m后面输入的是本次提交的说明，最好输入有意义的内容，这样你就能从历史记录里方便地找到改动记录。</p>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin gitAddress</span><br></pre></td></tr></table></figure>

<p>添加后，远程仓库的名字就是origin，这是Git对远程仓库的默认的叫法可以更改，gitAddress指的是git的地址</p>
<h2 id="推送文件到远程仓库"><a href="#推送文件到远程仓库" class="headerlink" title="推送文件到远程仓库"></a>推送文件到远程仓库</h2><p><strong>如果远程仓库是空的</strong>，我们第一次推送master分支时，直接使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<p>把当前分支master推送到远程仓库。<br>加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>之后只要本地作了提交，就可以通过命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>把本地master分支的最新修改推送至远程仓库。</p>
<p><strong>远程仓库如果已经有文件了</strong>，比如是公司的项目或者团队的项目之类的，就需要先将项目下载以后进行修改，然后add，commit，push</p>
<h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><p>用命令git clone克隆一个本地仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> gitAddress</span><br></pre></td></tr></table></figure>
<h2 id="抓取更改"><a href="#抓取更改" class="headerlink" title="抓取更改"></a>抓取更改</h2><p>从远程仓库抓取更改的命令很简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<p>即可将更改应用到本地仓库，其他人做过的修改就可以应用了。</p>
<h2 id="修改上一次commit的信息（未push的情况下）"><a href="#修改上一次commit的信息（未push的情况下）" class="headerlink" title="修改上一次commit的信息（未push的情况下）"></a>修改上一次commit的信息（未push的情况下）</h2><ul>
<li>在git中，其commit提供了一个–amend参数，可以修改最后一次提交的信息.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<p>然后在出来的编辑界面中，直接对上次提交的注释进行编辑。</p>
<ul>
<li>git使用amend选项提供了最后一次commit的修改。但是对于历史提交则需要用到rebase。 </li>
</ul>
<p>比如假设要修改当前版本的倒数第三次状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i HEAD~3</span><br></pre></td></tr></table></figure>

<p>这个命令执行完后也会出现一个编辑页面，把你要修改的提交前面的pick改为edit，然后保存退出： </p>
<p>这时通过git log你可以发现，git的最后一次提交已经变成你选的那个了，这时再使用： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<p>来对commit进行修改。 修改完了之后，为了回到最后一次提交的状态，使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>####参考网站  <a href="http://www.liaoxuefeng.com" target="_blank" rel="noopener">Git教程-廖雪峰的网站</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Unix/macOS/Linux</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
</search>
